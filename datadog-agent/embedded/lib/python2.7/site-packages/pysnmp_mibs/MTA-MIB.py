#
# PySNMP MIB module MTA-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/MTA-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:22:19 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( ObjectIdentifier, OctetString, Integer, ) = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
( URLString, applIndex, ) = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "URLString", "applIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ObjectGroup, ModuleCompliance, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
( iso, Integer32, Unsigned32, Bits, ObjectIdentity, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, MibIdentifier, Counter64, NotificationType, mib_2, ModuleIdentity, ) = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Unsigned32", "Bits", "ObjectIdentity", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "MibIdentifier", "Counter64", "NotificationType", "mib-2", "ModuleIdentity")
( DisplayString, TimeInterval, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "TextualConvention")
mta = ModuleIdentity((1, 3, 6, 1, 2, 1, 28)).setRevisions(("2000-03-03 00:00", "1999-05-12 00:00", "1997-08-17 00:00", "1993-11-28 00:00",))
if mibBuilder.loadTexts: mta.setLastUpdated('200003030000Z')
if mibBuilder.loadTexts: mta.setOrganization('IETF Mail and Directory Management Working Group')
if mibBuilder.loadTexts: mta.setContactInfo('        Ned Freed\n\n         Postal: Innosoft International, Inc.\n                 1050 Lakes Drive\n                 West Covina, CA 91790\n                 US\n\n         Tel: +1 626 919 3600\n         Fax: +1 626 919 3614\n\n         E-Mail: ned.freed@innosoft.com')
if mibBuilder.loadTexts: mta.setDescription('The MIB module describing Message Transfer Agents (MTAs)')
mtaTable = MibTable((1, 3, 6, 1, 2, 1, 28, 1), )
if mibBuilder.loadTexts: mtaTable.setDescription('The table holding information specific to an MTA.')
mtaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 28, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: mtaEntry.setDescription('The entry associated with each MTA.')
mtaReceivedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaReceivedMessages.setDescription('The number of messages received since MTA initialization.\n         This includes messages transmitted to this MTA from other\n         MTAs as well as messages that have been submitted to the\n         MTA directly by end-users or applications.')
mtaStoredMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaStoredMessages.setDescription('The total number of messages currently stored in the MTA.\n         This includes messages that are awaiting transmission to\n         some other MTA or are waiting for delivery to an end-user\n         or application.')
mtaTransmittedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTransmittedMessages.setDescription('The number of messages transmitted since MTA initialization.\n         This includes messages that were transmitted to some other\n         MTA or are waiting for delivery to an end-user or\n         application.')
mtaReceivedVolume = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 4), Counter32()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaReceivedVolume.setDescription('The total volume of messages received since MTA\n         initialization, measured in kilo-octets.  This volume should\n         include all transferred data that is logically above the mail\n         transport protocol level.  For example, an SMTP-based MTA\n         should use the number of kilo-octets in the message header\n         and body, while an X.400-based MTA should use the number of\n         kilo-octets of P2 data.  This includes messages transmitted\n         to this MTA from other MTAs as well as messages that have\n         been submitted to the MTA directly by end-users or\n         applications.')
mtaStoredVolume = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 5), Gauge32()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaStoredVolume.setDescription('The total volume of messages currently stored in the MTA,\n         measured in kilo-octets.  This volume should include all\n         stored data that is logically above the mail transport\n         protocol level.  For example, an SMTP-based MTA should\n         use the number of kilo-octets in the message header and\n         body, while an X.400-based MTA would use the number of\n         kilo-octets of P2 data.  This includes messages that are\n         awaiting transmission to some other MTA or are waiting\n         for delivery to an end-user or application.')
mtaTransmittedVolume = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 6), Counter32()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTransmittedVolume.setDescription('The total volume of messages transmitted since MTA\n         initialization, measured in kilo-octets.  This volume should\n         include all transferred data that is logically above the mail\n         transport protocol level.  For example, an SMTP-based MTA\n         should use the number of kilo-octets in the message header\n         and body, while an X.400-based MTA should use the number of\n         kilo-octets of P2 data.  This includes messages that were\n         transmitted to some other MTA or are waiting for delivery\n         to an end-user or application.')
mtaReceivedRecipients = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaReceivedRecipients.setDescription('The total number of recipients specified in all messages\n         received since MTA initialization.  Recipients this MTA\n         has no responsibility for, i.e. inactive envelope\n         recipients or ones referred to in message headers,\n         should not be counted even if information about such\n         recipients is available.  This includes messages\n         transmitted to this MTA from other MTAs as well as\n         messages that have been submitted to the MTA directly\n         by end-users or applications.')
mtaStoredRecipients = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaStoredRecipients.setDescription('The total number of recipients specified in all messages\n         currently stored in the MTA.  Recipients this MTA has no\n         responsibility for, i.e. inactive envelope recipients or\n         ones referred to in message headers, should not be\n         counted.  This includes messages that are awaiting\n         transmission to some other MTA or are waiting for\n         delivery to an end-user or application.')
mtaTransmittedRecipients = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaTransmittedRecipients.setDescription('The total number of recipients specified in all messages\n         transmitted since MTA initialization.  Recipients this\n         MTA had no responsibility for, i.e. inactive envelope\n         recipients or ones referred to in message headers,\n         should not be counted.  This includes messages that were\n         transmitted to some other MTA or are waiting for\n         delivery to an end-user or application.')
mtaSuccessfulConvertedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaSuccessfulConvertedMessages.setDescription('The number of messages that have been successfully\n         converted from one form to another since MTA\n         initialization.')
mtaFailedConvertedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaFailedConvertedMessages.setDescription('The number of messages for which an unsuccessful\n         attempt was made to convert them from one form to\n         another since MTA initialization.')
mtaLoopsDetected = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaLoopsDetected.setDescription("A message loop is defined as a situation where the MTA\n         decides that a given message will never be delivered to\n         one or more recipients and instead will continue to\n         loop endlessly through one or more MTAs.  This variable\n         counts the number of times the MTA has detected such a\n         situation since MTA initialization. Note that the\n         mechanism MTAs use to detect loops (e.g., trace field\n         counting, count of references to this MTA in a trace\n         field, examination of DNS or other directory information,\n         etc.), the level at which loops are detected (e.g., per\n         message, per recipient, per directory entry, etc.), and\n         the handling of a loop once it is detected (e.g., looping\n         messages are held, looping messages are bounced or sent\n         to the postmaster, messages that the MTA knows will loop\n         won't be accepted, etc.) vary widely from one MTA to the\n         next and cannot be inferred from this variable.")
mtaGroupTable = MibTable((1, 3, 6, 1, 2, 1, 28, 2), )
if mibBuilder.loadTexts: mtaGroupTable.setDescription('The table holding information specific to each MTA group.')
mtaGroupEntry = MibTableRow((1, 3, 6, 1, 2, 1, 28, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "MTA-MIB", "mtaGroupIndex"))
if mibBuilder.loadTexts: mtaGroupEntry.setDescription('The entry associated with each MTA group.')
mtaGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
if mibBuilder.loadTexts: mtaGroupIndex.setDescription('The index associated with a group for a given MTA.')
mtaGroupReceivedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupReceivedMessages.setDescription('The number of messages received to this group since\n         group creation.')
mtaGroupRejectedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupRejectedMessages.setDescription('The number of messages rejected by this group since\n         group creation.')
mtaGroupStoredMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupStoredMessages.setDescription("The total number of messages currently stored in this\n         group's queue.")
mtaGroupTransmittedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupTransmittedMessages.setDescription('The number of messages transmitted by this group since\n         group creation.')
mtaGroupReceivedVolume = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 6), Counter32()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupReceivedVolume.setDescription('The total volume of messages received to this group since\n         group creation, measured in kilo-octets.  This volume\n         should include all transferred data that is logically above\n         the mail transport protocol level.  For example, an\n         SMTP-based MTA should use the number of kilo-octets in the\n         message header and body, while an X.400-based MTA should use\n         the number of kilo-octets of P2 data.')
mtaGroupStoredVolume = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 7), Gauge32()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupStoredVolume.setDescription("The total volume of messages currently stored in this\n         group's queue, measured in kilo-octets.  This volume should\n         include all stored data that is logically above the mail\n         transport protocol level.  For example, an SMTP-based\n         MTA should use the number of kilo-octets in the message\n         header and body, while an X.400-based MTA would use the\n         number of kilo-octets of P2 data.")
mtaGroupTransmittedVolume = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 8), Counter32()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupTransmittedVolume.setDescription('The total volume of messages transmitted by this group\n         since group creation, measured in kilo-octets.  This\n         volume should include all transferred data that is logically\n         above the mail transport protocol level.  For example, an\n         SMTP-based MTA should use the number of kilo-octets in the\n         message header and body, while an X.400-based MTA should use\n         the number of kilo-octets of P2 data.')
mtaGroupReceivedRecipients = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupReceivedRecipients.setDescription('The total number of recipients specified in all messages\n         received to this group since group creation.\n         Recipients this MTA has no responsibility for should not\n         be counted.')
mtaGroupStoredRecipients = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupStoredRecipients.setDescription("The total number of recipients specified in all messages\n         currently stored in this group's queue.  Recipients this\n         MTA has no responsibility for should not be counted.")
mtaGroupTransmittedRecipients = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupTransmittedRecipients.setDescription('The total number of recipients specified in all messages\n         transmitted by this group since group creation.\n         Recipients this MTA had no responsibility for should not\n         be counted.')
mtaGroupOldestMessageStored = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOldestMessageStored.setDescription("Time since the oldest message in this group's queue was\n         placed in the queue.")
mtaGroupInboundAssociations = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupInboundAssociations.setDescription('The number of current associations to the group, where the\n         group is the responder.')
mtaGroupOutboundAssociations = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOutboundAssociations.setDescription('The number of current associations to the group, where the\n        group is the initiator.')
mtaGroupAccumulatedInboundAssociations = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupAccumulatedInboundAssociations.setDescription('The total number of associations to the group since\n        group creation, where the MTA was the responder.')
mtaGroupAccumulatedOutboundAssociations = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupAccumulatedOutboundAssociations.setDescription('The total number of associations from the group since\n         group creation, where the MTA was the initiator.')
mtaGroupLastInboundActivity = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 17), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLastInboundActivity.setDescription('Time since the last time that this group had an active\n        inbound association for purposes of message reception.')
mtaGroupLastOutboundActivity = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 18), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLastOutboundActivity.setDescription('Time since the last time that this group had a\n         successful outbound association for purposes of\n         message delivery.')
mtaGroupLastOutboundAssociationAttempt = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 34), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLastOutboundAssociationAttempt.setDescription('Time since the last time that this group attempted\n         to make an outbound association for purposes of\n         message delivery.')
mtaGroupRejectedInboundAssociations = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupRejectedInboundAssociations.setDescription('The total number of inbound associations the group has\n        rejected, since group creation.  Rejected associations\n        are not counted in the accumulated association totals.')
mtaGroupFailedOutboundAssociations = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupFailedOutboundAssociations.setDescription('The total number associations where the group was the\n        initiator and association establishment has failed,\n        since group creation.  Failed associations are\n        not counted in the accumulated association totals.')
mtaGroupInboundRejectionReason = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupInboundRejectionReason.setDescription("The failure reason, if any, for the last association this\n        group refused to respond to. If no association attempt\n        has been made since the MTA was initialized the value\n        should be 'never'.")
mtaGroupOutboundConnectFailureReason = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOutboundConnectFailureReason.setDescription("The failure reason, if any, for the last association attempt\n        this group initiated. If no association attempt has been\n        made since the MTA was initialized the value should be\n        'never'.")
mtaGroupScheduledRetry = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 23), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupScheduledRetry.setDescription('The amount of time until this group is next scheduled to\n         attempt to make an association.')
mtaGroupMailProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 24), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupMailProtocol.setDescription("An identification of the protocol being used by this group.\n         For an group employing OSI protocols, this will be the\n         Application Context.    For Internet applications, OID\n         values of the form {applTCPProtoID port} or {applUDPProtoID\n         port} are used for TCP-based and UDP-based protocols,\n         respectively. In either case 'port' corresponds to the\n         primary port number being used by the protocol. The\n         usual IANA procedures may be used to register ports for\n         new protocols. applTCPProtoID and applUDPProtoID are\n         defined in the NETWORK-SERVICES-MIB, RFC 2788.")
mtaGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupName.setDescription("A descriptive name for the group. If this group connects to\n         a single remote MTA this should be the name of that MTA. If\n         this in turn is an Internet MTA this should be the domain\n         name.  For an OSI MTA it should be the string encoded\n         distinguished name of the managed object using the format\n         defined in RFC 2253.  For X.400(1984) MTAs which do not\n         have a Distinguished Name, the RFC 2156 syntax\n         'mta in globalid' used in X400-Received: fields can be\n         used.")
mtaGroupSuccessfulConvertedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupSuccessfulConvertedMessages.setDescription('The number of messages that have been successfully\n         converted from one form to another in this group\n         since group creation.')
mtaGroupFailedConvertedMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupFailedConvertedMessages.setDescription('The number of messages for which an unsuccessful\n         attempt was made to convert them from one form to\n         another in this group since group creation.')
mtaGroupDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupDescription.setDescription("A description of the group's purpose.  This information is\n         intended to identify the group in a status display.")
mtaGroupURL = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 29), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupURL.setDescription('A URL pointing to a description of the group.  This\n         information is intended to identify and briefly describe\n         the group in a status display.')
mtaGroupCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 30), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupCreationTime.setDescription('Time since this group was first created.')
mtaGroupHierarchy = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648,2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupHierarchy.setDescription("Describes how this group fits into the hierarchy. A\n         positive value is interpreted as an mtaGroupIndex\n         value for some other group whose variables include\n         those of this group (and usually others). A negative\n         value is interpreted as a group collection code: Groups\n         with common negative hierarchy values comprise one\n         particular breakdown of MTA activity as a whole. A\n         zero value means that this MIB implementation doesn't\n         implement hierarchy indicators and thus the overall\n         group hierarchy cannot be determined.")
mtaGroupOldestMessageId = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 32), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOldestMessageId.setDescription("Message ID of the oldest message in the group's queue.\n         Whenever possible this should be in the form of an\n         RFC 822 msg-id; X.400 may convert X.400 message\n         identifiers to this form by following the rules laid\n         out in RFC2156.")
mtaGroupLoopsDetected = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupLoopsDetected.setDescription("A message loop is defined as a situation where the MTA\n         decides that a given message will never be delivered to\n         one or more recipients and instead will continue to\n         loop endlessly through one or more MTAs.  This variable\n         counts the number of times the MTA has detected such a\n         situation in conjunction with something associated with\n         this group since group creation.  Note that the\n         mechanism MTAs use to detect loops (e.g., trace field\n         counting, count of references to this MTA in a trace\n         field, examination of DNS or other directory information,\n         etc.), the level at which loops are detected (e.g., per\n         message, per recipient, per directory entry, etc.), and\n         the handling of a loop once it is detected (e.g., looping\n         messages are held, looping messages are bounced or sent\n         to the postmaster, messages that the MTA knows will loop\n         won't be accepted, etc.) vary widely from one MTA to the\n         next and cannot be inferred from this variable.")
mtaGroupAssociationTable = MibTable((1, 3, 6, 1, 2, 1, 28, 3), )
if mibBuilder.loadTexts: mtaGroupAssociationTable.setDescription('The table holding information regarding the associations\n         for each MTA group.')
mtaGroupAssociationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 28, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "MTA-MIB", "mtaGroupIndex"), (0, "MTA-MIB", "mtaGroupAssociationIndex"))
if mibBuilder.loadTexts: mtaGroupAssociationEntry.setDescription('The entry holding information regarding the associations\n         for each MTA group.')
mtaGroupAssociationIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupAssociationIndex.setDescription("Reference into association table to allow correlation of\n         this group's active associations with the association table.")
mtaGroupErrorTable = MibTable((1, 3, 6, 1, 2, 1, 28, 5), )
if mibBuilder.loadTexts: mtaGroupErrorTable.setDescription('The table holding information regarding accumulated errors\n         for each MTA group.')
mtaGroupErrorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 28, 5, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "MTA-MIB", "mtaGroupIndex"), (0, "MTA-MIB", "mtaStatusCode"))
if mibBuilder.loadTexts: mtaGroupErrorEntry.setDescription('The entry holding information regarding accumulated\n         errors for each MTA group.')
mtaGroupInboundErrorCount = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupInboundErrorCount.setDescription('Count of the number of errors of a given type that have\n         been accumulated in association with a particular group\n         while processing incoming messages. In the case of SMTP\n         these will typically be errors reporting by an SMTP\n         server to the remote client; in the case of X.400\n         these will typically be errors encountered while\n         processing an incoming message.')
mtaGroupInternalErrorCount = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupInternalErrorCount.setDescription('Count of the number of errors of a given type that have\n         been accumulated in association with a particular group\n         during internal MTA processing.')
mtaGroupOutboundErrorCount = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaGroupOutboundErrorCount.setDescription("Count of the number of errors of a given type that have\n         been accumulated in association with a particular group's\n         outbound connection activities. In the case of an SMTP\n         client these will typically be errors reported while\n         attempting to contact or while communicating with the\n         remote SMTP server. In the case of X.400 these will\n         typically be errors encountered while constructing\n         or attempting to deliver an outgoing message.")
mtaStatusCode = MibTableColumn((1, 3, 6, 1, 2, 1, 28, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000000,5999999)))
if mibBuilder.loadTexts: mtaStatusCode.setDescription("An index capable of representing an Enhanced Mail System\n         Status Code.  Enhanced Mail System Status Codes are\n         defined in RFC 1893.  These codes have the form\n\n             class.subject.detail\n\n         Here 'class' is either 2, 4, or 5 and both 'subject' and\n         'detail'  are integers in the range 0..999. Given a status\n         code the corresponding index value is defined to be\n         ((class * 1000) + subject) * 1000 + detail.  Both SMTP\n         error response codes and X.400 reason and diagnostic codes\n         can be mapped into these codes, resulting in a namespace\n         capable of describing most error conditions a mail system\n         encounters in a generic yet detailed way.")
mtaConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 28, 4))
mtaGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 28, 4, 1))
mtaCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 28, 4, 2))
mtaCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 1)).setObjects(*(("MTA-MIB", "mtaRFC1566Group"),))
if mibBuilder.loadTexts: mtaCompliance.setDescription('The compliance statement for RFC 1566 implementations\n         which support the Mail Monitoring MIB for basic\n         monitoring of MTAs.')
mtaAssocCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 2)).setObjects(*(("MTA-MIB", "mtaRFC1566Group"), ("MTA-MIB", "mtaRFC1566AssocGroup"),))
if mibBuilder.loadTexts: mtaAssocCompliance.setDescription('The compliance statement for RFC 1566 implementations\n         which support the Mail Monitoring MIB for monitoring\n         of MTAs and their associations.')
mtaRFC2249Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 5)).setObjects(*(("MTA-MIB", "mtaRFC2249Group"),))
if mibBuilder.loadTexts: mtaRFC2249Compliance.setDescription('The compliance statement for RFC 2249 implementations\n         which support the Mail Monitoring MIB for basic\n         monitoring of MTAs.')
mtaRFC2249AssocCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 6)).setObjects(*(("MTA-MIB", "mtaRFC2249Group"), ("MTA-MIB", "mtaRFC2249AssocGroup"),))
if mibBuilder.loadTexts: mtaRFC2249AssocCompliance.setDescription('The compliance statement for RFC 2249 implementations\n         which support the Mail Monitoring MIB for monitoring of\n         MTAs and their associations.')
mtaRFC2249ErrorCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 7)).setObjects(*(("MTA-MIB", "mtaRFC2249Group"), ("MTA-MIB", "mtaRFC2249ErrorGroup"),))
if mibBuilder.loadTexts: mtaRFC2249ErrorCompliance.setDescription('The compliance statement for RFC 2249 implementations\n         which support the Mail Monitoring MIB for monitoring of\n         MTAs and detailed errors.')
mtaRFC2249FullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 8)).setObjects(*(("MTA-MIB", "mtaRFC2249Group"), ("MTA-MIB", "mtaRFC2249AssocGroup"), ("MTA-MIB", "mtaRFC2249ErrorGroup"),))
if mibBuilder.loadTexts: mtaRFC2249FullCompliance.setDescription('The compliance statement for RFC 2249 implementations\n         which support the full Mail Monitoring MIB for\n         monitoring of MTAs, associations, and detailed errors.')
mtaRFC2789Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 9)).setObjects(*(("MTA-MIB", "mtaRFC2789Group"),))
if mibBuilder.loadTexts: mtaRFC2789Compliance.setDescription('The compliance statement for RFC 2789 implementations\n         which support the Mail Monitoring MIB for basic\n         monitoring of MTAs.')
mtaRFC2789AssocCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 10)).setObjects(*(("MTA-MIB", "mtaRFC2789Group"), ("MTA-MIB", "mtaRFC2789AssocGroup"),))
if mibBuilder.loadTexts: mtaRFC2789AssocCompliance.setDescription('The compliance statement for RFC 2789 implementations\n         which support the Mail Monitoring MIB for monitoring of\n         MTAs and their associations.')
mtaRFC2789ErrorCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 11)).setObjects(*(("MTA-MIB", "mtaRFC2789Group"), ("MTA-MIB", "mtaRFC2789ErrorGroup"),))
if mibBuilder.loadTexts: mtaRFC2789ErrorCompliance.setDescription('The compliance statement for RFC 2789 implementations\n         which support the Mail Monitoring MIB for monitoring of\n         MTAs and detailed errors.')
mtaRFC2789FullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 28, 4, 2, 12)).setObjects(*(("MTA-MIB", "mtaRFC2789Group"), ("MTA-MIB", "mtaRFC2789AssocGroup"), ("MTA-MIB", "mtaRFC2789ErrorGroup"),))
if mibBuilder.loadTexts: mtaRFC2789FullCompliance.setDescription('The compliance statement for RFC 2789 implementations\n         which support the full Mail Monitoring MIB for\n         monitoring of MTAs, associations, and detailed errors.')
mtaRFC1566Group = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 10)).setObjects(*(("MTA-MIB", "mtaReceivedMessages"), ("MTA-MIB", "mtaStoredMessages"), ("MTA-MIB", "mtaTransmittedMessages"), ("MTA-MIB", "mtaReceivedVolume"), ("MTA-MIB", "mtaStoredVolume"), ("MTA-MIB", "mtaTransmittedVolume"), ("MTA-MIB", "mtaReceivedRecipients"), ("MTA-MIB", "mtaStoredRecipients"), ("MTA-MIB", "mtaTransmittedRecipients"), ("MTA-MIB", "mtaGroupReceivedMessages"), ("MTA-MIB", "mtaGroupRejectedMessages"), ("MTA-MIB", "mtaGroupStoredMessages"), ("MTA-MIB", "mtaGroupTransmittedMessages"), ("MTA-MIB", "mtaGroupReceivedVolume"), ("MTA-MIB", "mtaGroupStoredVolume"), ("MTA-MIB", "mtaGroupTransmittedVolume"), ("MTA-MIB", "mtaGroupReceivedRecipients"), ("MTA-MIB", "mtaGroupStoredRecipients"), ("MTA-MIB", "mtaGroupTransmittedRecipients"), ("MTA-MIB", "mtaGroupOldestMessageStored"), ("MTA-MIB", "mtaGroupInboundAssociations"), ("MTA-MIB", "mtaGroupOutboundAssociations"), ("MTA-MIB", "mtaGroupAccumulatedInboundAssociations"), ("MTA-MIB", "mtaGroupAccumulatedOutboundAssociations"), ("MTA-MIB", "mtaGroupLastInboundActivity"), ("MTA-MIB", "mtaGroupLastOutboundActivity"), ("MTA-MIB", "mtaGroupRejectedInboundAssociations"), ("MTA-MIB", "mtaGroupFailedOutboundAssociations"), ("MTA-MIB", "mtaGroupInboundRejectionReason"), ("MTA-MIB", "mtaGroupOutboundConnectFailureReason"), ("MTA-MIB", "mtaGroupScheduledRetry"), ("MTA-MIB", "mtaGroupMailProtocol"), ("MTA-MIB", "mtaGroupName"),))
if mibBuilder.loadTexts: mtaRFC1566Group.setDescription('A collection of objects providing basic monitoring of MTAs.\n         This is the original set of such objects defined in RFC\n         1566.')
mtaRFC1566AssocGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 11)).setObjects(*(("MTA-MIB", "mtaGroupAssociationIndex"),))
if mibBuilder.loadTexts: mtaRFC1566AssocGroup.setDescription('A collection of objects providing monitoring of MTA\n         associations.  This is the original set of such objects\n         defined in RFC 1566.')
mtaRFC2249Group = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 4)).setObjects(*(("MTA-MIB", "mtaReceivedMessages"), ("MTA-MIB", "mtaStoredMessages"), ("MTA-MIB", "mtaTransmittedMessages"), ("MTA-MIB", "mtaReceivedVolume"), ("MTA-MIB", "mtaStoredVolume"), ("MTA-MIB", "mtaTransmittedVolume"), ("MTA-MIB", "mtaReceivedRecipients"), ("MTA-MIB", "mtaStoredRecipients"), ("MTA-MIB", "mtaTransmittedRecipients"), ("MTA-MIB", "mtaSuccessfulConvertedMessages"), ("MTA-MIB", "mtaFailedConvertedMessages"), ("MTA-MIB", "mtaGroupReceivedMessages"), ("MTA-MIB", "mtaGroupRejectedMessages"), ("MTA-MIB", "mtaGroupStoredMessages"), ("MTA-MIB", "mtaGroupTransmittedMessages"), ("MTA-MIB", "mtaGroupReceivedVolume"), ("MTA-MIB", "mtaGroupStoredVolume"), ("MTA-MIB", "mtaGroupTransmittedVolume"), ("MTA-MIB", "mtaGroupReceivedRecipients"), ("MTA-MIB", "mtaGroupStoredRecipients"), ("MTA-MIB", "mtaGroupTransmittedRecipients"), ("MTA-MIB", "mtaGroupOldestMessageStored"), ("MTA-MIB", "mtaGroupInboundAssociations"), ("MTA-MIB", "mtaGroupOutboundAssociations"), ("MTA-MIB", "mtaLoopsDetected"), ("MTA-MIB", "mtaGroupAccumulatedInboundAssociations"), ("MTA-MIB", "mtaGroupAccumulatedOutboundAssociations"), ("MTA-MIB", "mtaGroupLastInboundActivity"), ("MTA-MIB", "mtaGroupLastOutboundActivity"), ("MTA-MIB", "mtaGroupLastOutboundAssociationAttempt"), ("MTA-MIB", "mtaGroupRejectedInboundAssociations"), ("MTA-MIB", "mtaGroupFailedOutboundAssociations"), ("MTA-MIB", "mtaGroupInboundRejectionReason"), ("MTA-MIB", "mtaGroupOutboundConnectFailureReason"), ("MTA-MIB", "mtaGroupScheduledRetry"), ("MTA-MIB", "mtaGroupMailProtocol"), ("MTA-MIB", "mtaGroupName"), ("MTA-MIB", "mtaGroupSuccessfulConvertedMessages"), ("MTA-MIB", "mtaGroupFailedConvertedMessages"), ("MTA-MIB", "mtaGroupDescription"), ("MTA-MIB", "mtaGroupURL"), ("MTA-MIB", "mtaGroupCreationTime"), ("MTA-MIB", "mtaGroupHierarchy"), ("MTA-MIB", "mtaGroupOldestMessageId"), ("MTA-MIB", "mtaGroupLoopsDetected"),))
if mibBuilder.loadTexts: mtaRFC2249Group.setDescription('A collection of objects providing basic monitoring of MTAs.\n         This group was originally defined in RFC 2249.')
mtaRFC2249AssocGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 5)).setObjects(*(("MTA-MIB", "mtaGroupAssociationIndex"),))
if mibBuilder.loadTexts: mtaRFC2249AssocGroup.setDescription('A collection of objects providing monitoring of MTA\n         associations.  This group was originally defined in RFC\n         2249.')
mtaRFC2249ErrorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 6)).setObjects(*(("MTA-MIB", "mtaGroupInboundErrorCount"), ("MTA-MIB", "mtaGroupInternalErrorCount"), ("MTA-MIB", "mtaGroupOutboundErrorCount"),))
if mibBuilder.loadTexts: mtaRFC2249ErrorGroup.setDescription('A collection of objects providing monitoring of\n         detailed MTA errors.  This group was originally defined\n         in RFC 2249.')
mtaRFC2789Group = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 7)).setObjects(*(("MTA-MIB", "mtaReceivedMessages"), ("MTA-MIB", "mtaStoredMessages"), ("MTA-MIB", "mtaTransmittedMessages"), ("MTA-MIB", "mtaReceivedVolume"), ("MTA-MIB", "mtaStoredVolume"), ("MTA-MIB", "mtaTransmittedVolume"), ("MTA-MIB", "mtaReceivedRecipients"), ("MTA-MIB", "mtaStoredRecipients"), ("MTA-MIB", "mtaTransmittedRecipients"), ("MTA-MIB", "mtaSuccessfulConvertedMessages"), ("MTA-MIB", "mtaFailedConvertedMessages"), ("MTA-MIB", "mtaGroupReceivedMessages"), ("MTA-MIB", "mtaGroupRejectedMessages"), ("MTA-MIB", "mtaGroupStoredMessages"), ("MTA-MIB", "mtaGroupTransmittedMessages"), ("MTA-MIB", "mtaGroupReceivedVolume"), ("MTA-MIB", "mtaGroupStoredVolume"), ("MTA-MIB", "mtaGroupTransmittedVolume"), ("MTA-MIB", "mtaGroupReceivedRecipients"), ("MTA-MIB", "mtaGroupStoredRecipients"), ("MTA-MIB", "mtaGroupTransmittedRecipients"), ("MTA-MIB", "mtaGroupOldestMessageStored"), ("MTA-MIB", "mtaGroupInboundAssociations"), ("MTA-MIB", "mtaGroupOutboundAssociations"), ("MTA-MIB", "mtaLoopsDetected"), ("MTA-MIB", "mtaGroupAccumulatedInboundAssociations"), ("MTA-MIB", "mtaGroupAccumulatedOutboundAssociations"), ("MTA-MIB", "mtaGroupLastInboundActivity"), ("MTA-MIB", "mtaGroupLastOutboundActivity"), ("MTA-MIB", "mtaGroupLastOutboundAssociationAttempt"), ("MTA-MIB", "mtaGroupRejectedInboundAssociations"), ("MTA-MIB", "mtaGroupFailedOutboundAssociations"), ("MTA-MIB", "mtaGroupInboundRejectionReason"), ("MTA-MIB", "mtaGroupOutboundConnectFailureReason"), ("MTA-MIB", "mtaGroupScheduledRetry"), ("MTA-MIB", "mtaGroupMailProtocol"), ("MTA-MIB", "mtaGroupName"), ("MTA-MIB", "mtaGroupSuccessfulConvertedMessages"), ("MTA-MIB", "mtaGroupFailedConvertedMessages"), ("MTA-MIB", "mtaGroupDescription"), ("MTA-MIB", "mtaGroupURL"), ("MTA-MIB", "mtaGroupCreationTime"), ("MTA-MIB", "mtaGroupHierarchy"), ("MTA-MIB", "mtaGroupOldestMessageId"), ("MTA-MIB", "mtaGroupLoopsDetected"),))
if mibBuilder.loadTexts: mtaRFC2789Group.setDescription('A collection of objects providing basic monitoring of MTAs.\n         This is the appropriate group for RFC 2789.')
mtaRFC2789AssocGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 8)).setObjects(*(("MTA-MIB", "mtaGroupAssociationIndex"),))
if mibBuilder.loadTexts: mtaRFC2789AssocGroup.setDescription('A collection of objects providing monitoring of MTA\n         associations.  This is the appropriate group for RFC\n         2789 association monitoring.')
mtaRFC2789ErrorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 28, 4, 1, 9)).setObjects(*(("MTA-MIB", "mtaGroupInboundErrorCount"), ("MTA-MIB", "mtaGroupInternalErrorCount"), ("MTA-MIB", "mtaGroupOutboundErrorCount"),))
if mibBuilder.loadTexts: mtaRFC2789ErrorGroup.setDescription('A collection of objects providing monitoring of\n         detailed MTA errors.  This is the appropriate group\n         for RFC 2789 error monitoring.')
mibBuilder.exportSymbols("MTA-MIB", mtaReceivedRecipients=mtaReceivedRecipients, mtaGroupTransmittedVolume=mtaGroupTransmittedVolume, mtaRFC2249ErrorGroup=mtaRFC2249ErrorGroup, mtaGroupMailProtocol=mtaGroupMailProtocol, mtaFailedConvertedMessages=mtaFailedConvertedMessages, mtaGroupLastInboundActivity=mtaGroupLastInboundActivity, mtaGroupFailedConvertedMessages=mtaGroupFailedConvertedMessages, mtaGroupInboundErrorCount=mtaGroupInboundErrorCount, mtaSuccessfulConvertedMessages=mtaSuccessfulConvertedMessages, mtaGroupURL=mtaGroupURL, mtaRFC2789Group=mtaRFC2789Group, mtaGroupStoredVolume=mtaGroupStoredVolume, mtaGroupStoredMessages=mtaGroupStoredMessages, mtaGroupReceivedVolume=mtaGroupReceivedVolume, mtaGroupIndex=mtaGroupIndex, mtaGroupErrorEntry=mtaGroupErrorEntry, mtaGroupEntry=mtaGroupEntry, mtaRFC2789FullCompliance=mtaRFC2789FullCompliance, mtaCompliances=mtaCompliances, mtaGroupLastOutboundAssociationAttempt=mtaGroupLastOutboundAssociationAttempt, mtaGroupReceivedRecipients=mtaGroupReceivedRecipients, mtaGroupAccumulatedOutboundAssociations=mtaGroupAccumulatedOutboundAssociations, mtaGroupDescription=mtaGroupDescription, mtaGroupCreationTime=mtaGroupCreationTime, mtaGroupAssociationIndex=mtaGroupAssociationIndex, mtaRFC2789ErrorCompliance=mtaRFC2789ErrorCompliance, mtaGroupInternalErrorCount=mtaGroupInternalErrorCount, mtaTransmittedRecipients=mtaTransmittedRecipients, mtaGroupErrorTable=mtaGroupErrorTable, mtaGroups=mtaGroups, mtaRFC2249AssocGroup=mtaRFC2249AssocGroup, PYSNMP_MODULE_ID=mta, mtaGroupOutboundAssociations=mtaGroupOutboundAssociations, mtaGroupLastOutboundActivity=mtaGroupLastOutboundActivity, mtaGroupAssociationEntry=mtaGroupAssociationEntry, mta=mta, mtaStoredVolume=mtaStoredVolume, mtaConformance=mtaConformance, mtaRFC2789Compliance=mtaRFC2789Compliance, mtaGroupOutboundConnectFailureReason=mtaGroupOutboundConnectFailureReason, mtaStoredRecipients=mtaStoredRecipients, mtaGroupStoredRecipients=mtaGroupStoredRecipients, mtaGroupRejectedInboundAssociations=mtaGroupRejectedInboundAssociations, mtaGroupScheduledRetry=mtaGroupScheduledRetry, mtaRFC2249Compliance=mtaRFC2249Compliance, mtaGroupOldestMessageId=mtaGroupOldestMessageId, mtaRFC2789ErrorGroup=mtaRFC2789ErrorGroup, mtaGroupInboundAssociations=mtaGroupInboundAssociations, mtaGroupHierarchy=mtaGroupHierarchy, mtaLoopsDetected=mtaLoopsDetected, mtaReceivedMessages=mtaReceivedMessages, mtaStatusCode=mtaStatusCode, mtaTransmittedVolume=mtaTransmittedVolume, mtaGroupAssociationTable=mtaGroupAssociationTable, mtaRFC2249FullCompliance=mtaRFC2249FullCompliance, mtaTable=mtaTable, mtaGroupRejectedMessages=mtaGroupRejectedMessages, mtaGroupTransmittedMessages=mtaGroupTransmittedMessages, mtaRFC2249AssocCompliance=mtaRFC2249AssocCompliance, mtaGroupLoopsDetected=mtaGroupLoopsDetected, mtaGroupFailedOutboundAssociations=mtaGroupFailedOutboundAssociations, mtaGroupName=mtaGroupName, mtaRFC2789AssocGroup=mtaRFC2789AssocGroup, mtaAssocCompliance=mtaAssocCompliance, mtaGroupInboundRejectionReason=mtaGroupInboundRejectionReason, mtaRFC2249Group=mtaRFC2249Group, mtaReceivedVolume=mtaReceivedVolume, mtaGroupOldestMessageStored=mtaGroupOldestMessageStored, mtaStoredMessages=mtaStoredMessages, mtaGroupOutboundErrorCount=mtaGroupOutboundErrorCount, mtaEntry=mtaEntry, mtaGroupReceivedMessages=mtaGroupReceivedMessages, mtaRFC2249ErrorCompliance=mtaRFC2249ErrorCompliance, mtaRFC2789AssocCompliance=mtaRFC2789AssocCompliance, mtaGroupTransmittedRecipients=mtaGroupTransmittedRecipients, mtaGroupSuccessfulConvertedMessages=mtaGroupSuccessfulConvertedMessages, mtaGroupAccumulatedInboundAssociations=mtaGroupAccumulatedInboundAssociations, mtaRFC1566Group=mtaRFC1566Group, mtaRFC1566AssocGroup=mtaRFC1566AssocGroup, mtaTransmittedMessages=mtaTransmittedMessages, mtaGroupTable=mtaGroupTable, mtaCompliance=mtaCompliance)
