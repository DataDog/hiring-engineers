#
# PySNMP MIB module T11-FC-ROUTE-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/T11-FC-ROUTE-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:30:21 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( Integer, OctetString, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
( FcAddressIdOrZero, fcmInstanceIndex, FcDomainIdOrZero, fcmSwitchIndex, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "FcAddressIdOrZero", "fcmInstanceIndex", "FcDomainIdOrZero", "fcmSwitchIndex")
( InterfaceIndex, InterfaceIndexOrZero, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
( ObjectGroup, ModuleCompliance, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
( MibIdentifier, iso, Unsigned32, TimeTicks, NotificationType, Integer32, IpAddress, mib_2, Bits, Counter64, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Unsigned32", "TimeTicks", "NotificationType", "Integer32", "IpAddress", "mib-2", "Bits", "Counter64", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity")
( RowStatus, TextualConvention, TimeStamp, DisplayString, StorageType, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TimeStamp", "DisplayString", "StorageType")
( T11FabricIndex, ) = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")
t11FcRouteMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 144)).setRevisions(("2006-08-14 00:00",))
if mibBuilder.loadTexts: t11FcRouteMIB.setLastUpdated('200608140000Z')
if mibBuilder.loadTexts: t11FcRouteMIB.setOrganization('T11')
if mibBuilder.loadTexts: t11FcRouteMIB.setContactInfo('     Claudio DeSanti\n                    Cisco Systems, Inc.\n                    170 West Tasman Drive\n                    San Jose, CA 95134 USA\n                    EMail: cds@cisco.com\n\n\n                    Keith McCloghrie\n                    Cisco Systems, Inc.\n                    170 West Tasman Drive\n                    San Jose, CA USA 95134\n                    Email: kzm@cisco.com')
if mibBuilder.loadTexts: t11FcRouteMIB.setDescription('The MIB module for configuring and displaying Fibre\n           Channel Route Information.\n\n           Copyright (C) The Internet Society (2006).  This version\n           of this MIB module is part of RFC 4625;  see the RFC\n           itself for full legal notices.')
t11FcRouteNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 0))
t11FcRouteObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 1))
t11FcRouteConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 2))
t11FcRouteFabricTable = MibTable((1, 3, 6, 1, 2, 1, 144, 1, 1), )
if mibBuilder.loadTexts: t11FcRouteFabricTable.setDescription('The table containing Fibre Channel Routing information\n           that is specific to a Fabric.')
t11FcRouteFabricEntry = MibTableRow((1, 3, 6, 1, 2, 1, 144, 1, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteFabricIndex"))
if mibBuilder.loadTexts: t11FcRouteFabricEntry.setDescription('Each entry contains routing information specific to a\n           particular Fabric on a particular switch (identified by\n           values of fcmInstanceIndex and fcmSwitchIndex).')
t11FcRouteFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 1, 1, 1), T11FabricIndex())
if mibBuilder.loadTexts: t11FcRouteFabricIndex.setDescription('A unique index value that uniquely identifies a\n           particular Fabric.\n\n           In a Fabric conformant to FC-SW-3, only a single Fabric\n\n\n\n           can operate within a physical infrastructure, and thus\n           the value of this Fabric Index will always be 1.\n\n           In a Fabric conformant to FC-SW-4, multiple Virtual Fabrics\n           can operate within one (or more) physical infrastructures.\n           In such a case, index value is used to uniquely identify a\n           particular Fabric within a physical infrastructure.')
t11FcRouteFabricLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcRouteFabricLastChange.setDescription('The value of sysUpTime at the most recent time when any\n           corresponding row in the t11FcRouteTable was created,\n           modified, or deleted.  A corresponding row in the\n           t11FcRouteTable is for the same management instance,\n           the same switch, and same Fabric as the row in this table.\n\n           If no change has occurred since the last restart of the\n           management system, then the value of this object is 0.')
t11FcRouteTable = MibTable((1, 3, 6, 1, 2, 1, 144, 1, 2), )
if mibBuilder.loadTexts: t11FcRouteTable.setDescription("The Fibre Channel Routing tables for the\n           locally managed switches.  This table lists all the\n           routes that are configured in and/or computed by any\n           local switch for any Fabric.\n\n           Such routes are used by a switch to forward frames (of user\n           data) on a Fabric.  The conceptual process is based on\n           extracting the Destination Fibre Channel Address Identifier\n           (D_ID) out of a received frame (of user data) and comparing\n           it to each entry of this table that is applicable to the\n           given switch and Fabric.  Such comparison consists of first\n           performing a logical-AND of the extracted D_ID with a mask\n           (the value of t11FcRouteDestMask) and second comparing the\n           result of that 'AND' operation to the value of\n           t11FcRouteDestAddrId.  A similar comparison is made of the\n           Source Fibre Channel Address Identifier (S_ID) of a frame\n\n\n\n           against the t11FcRouteSrcAddrId and t11FcRouteSrcMask values\n           of an entry.  If an entry's value of t11FcRouteInInterface\n           is non-zero, then a further comparison determines if the\n           frame was received on the appropriate interface.  If all of\n           these comparisons for a particular entry are successful,\n           then that entry represents a potential route for forwarding\n           the received frame.\n\n           For entries configured by a user, t11FcRouteProto has\n           the value 'netmgmt'; only entries of this type can be\n           deleted by the user.")
t11FcRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 144, 1, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteFabricIndex"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteDestAddrId"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteDestMask"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteSrcAddrId"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteSrcMask"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteInInterface"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteProto"), (0, "T11-FC-ROUTE-MIB", "t11FcRouteOutInterface"))
if mibBuilder.loadTexts: t11FcRouteEntry.setDescription('Each entry contains a route to a particular destination,\n           possibly from a particular subset of source addresses,\n           on a particular Fabric via a particular output interface\n           and learned in a particular manner.')
t11FcRouteDestAddrId = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 1), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3,3)).setFixedLength(3))
if mibBuilder.loadTexts: t11FcRouteDestAddrId.setDescription('The destination Fibre Channel Address Identifier of\n           this route.  A zero-length string for this field is\n           not allowed.')
t11FcRouteDestMask = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 2), FcAddressIdOrZero())
if mibBuilder.loadTexts: t11FcRouteDestMask.setDescription("The mask to be logical-ANDed with a destination\n           Fibre Channel Address Identifier before it is compared\n           to the value in the t11FcRouteDestAddrId field.\n           Allowed values are 255.255.255, 255.255.0, or 255.0.0.\n           FSPF's definition generates routes to a Domain_ID,\n           so the mask for all FSPF-generated routes is 255.0.0.\n           The zero-length value has the same meaning as 0.0.0.")
t11FcRouteSrcAddrId = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 3), FcAddressIdOrZero())
if mibBuilder.loadTexts: t11FcRouteSrcAddrId.setDescription('The source Fibre Channel Address Identifier of this\n           route.  Note that if this object and the corresponding\n           instance of t11FcRouteSrcMask both have a value of 0.0.0,\n           then this route matches all source addresses.  The\n           zero-length value has the same meaning as 0.0.0.')
t11FcRouteSrcMask = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 4), FcAddressIdOrZero())
if mibBuilder.loadTexts: t11FcRouteSrcMask.setDescription('The mask to be logical-ANDed with a source\n           Fibre Channel Address Identifier before it is compared\n           to the value in the t11FcRouteSrcAddrId field.  Allowed\n           values are 255.255.255, 255.255.0, 255.0.0, or 0.0.0.\n           The zero-length value has the same meaning as 0.0.0.')
t11FcRouteInInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 5), InterfaceIndexOrZero())
if mibBuilder.loadTexts: t11FcRouteInInterface.setDescription('If the value of this object is non-zero, it is the\n           value of ifIndex that identifies the local\n           Fibre Channel interface through which a frame\n           must have been received in order to match with\n           this entry.  If the value of this object is zero,\n           the matching does not require that the frame be\n           received on any specific interface.')
t11FcRouteProto = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("fspf", 4),)))
if mibBuilder.loadTexts: t11FcRouteProto.setDescription('The mechanism via which this route was learned:\n                other(1)  - not specified\n                local(2)  - local interface\n                netmgmt(3)- static route\n                fspf(4)   - Fibre Shortest Path First\n           ')
t11FcRouteOutInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 7), InterfaceIndex())
if mibBuilder.loadTexts: t11FcRouteOutInterface.setDescription('The value of ifIndex that identifies the local\n           Fibre Channel interface through which the next hop\n           of this route is to be reached.')
t11FcRouteDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 8), FcDomainIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteDomainId.setDescription("The domain_ID of next hop switch.\n\n           This object can have a value of zero if the value\n\n\n\n           of t11FcRouteProto is 'local'.")
t11FcRouteMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteMetric.setDescription('The routing metric for this route.\n\n           The use of this object is dependent on t11FcRouteProto.')
t11FcRouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("local", 1), ("remote", 2),)).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteType.setDescription('The type of route.\n\n           local(1)  - a route for which the next Fibre Channel\n                       port is the final destination;\n           remote(2) - a route for which the next Fibre Channel\n                      port is not the final destination.')
t11FcRouteIfDown = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("remove", 1), ("retain", 2),)).clone('retain')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteIfDown.setDescription("The value of this object indicates what happens to\n           this route when the output interface (given by the\n           corresponding value of t11FcRouteOutInterface) is\n           operationally 'down'.  If this object's value is 'retain',\n           the route is to be retained in this table.  If this\n           object's value is 'remove', the route is to be removed\n           from this table.")
t11FcRouteStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 12), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteStorageType.setDescription("The storage type for this conceptual row.\n           Conceptual rows having the value 'permanent' need not\n           allow write-access to any columnar objects in the row.")
t11FcRouteRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 144, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcRouteRowStatus.setDescription("The status of this conceptual row.\n           The only rows that can be deleted by setting this object to\n           'destroy' are those for which t11FcRouteProto has the value\n           'netmgmt'.")
t11FcRouteCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 2, 1))
t11FcRouteGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 144, 2, 2))
t11FcRouteCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 144, 2, 1, 1)).setObjects(*(("T11-FC-ROUTE-MIB", "t11FcRouteGroup"),))
if mibBuilder.loadTexts: t11FcRouteCompliance.setDescription("The compliance statement for entities that\n           implement the T11-FC-ROUTE-MIB.\n--\n-- Note: The next four OBJECT clauses are for auxiliary objects, and the\n-- SMIv2 does not permit inclusion of objects that are not accessible\n-- in an OBJECT clause (see Sections 3.1 & 5.4.3 in STD 58, RFC 2580).\n-- Thus, these four clauses cannot be included below in the normal\n-- location for OBJECT clauses.\n--\n--      OBJECT     t11FcRouteSrcAddrId\n--      SYNTAX     FcAddressIdOrZero (SIZE (0))\n--      DESCRIPTION\n--             'Support is not required for routes that\n--             match only a subset of possible source\n\n\n\n--             addresses.'\n--\n--      OBJECT     t11FcRouteSrcMask\n--      SYNTAX     FcAddressIdOrZero (SIZE (0))\n--      DESCRIPTION\n--             'Support is not required for routes that\n--             match only a subset of possible source\n--             addresses.'\n--\n--      OBJECT     t11FcRouteDestMask\n--      DESCRIPTION\n--             'Support is mandatory only for FSPF-generated\n--             routes.  Since FSPF's definition generates\n--             routes to a Domain_ID, the mask for all\n--             FSPF-generated routes is 255.0.0.  Thus,\n--             support is only required for 255.0.0.'\n--\n--      OBJECT     t11FcRouteInInterface\n--      SYNTAX     InterfaceIndexOrZero (0)\n--      DESCRIPTION\n--             'Support for routes specific to particular\n--             source interfaces is not required.'\n          ")
t11FcRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 144, 2, 2, 1)).setObjects(*(("T11-FC-ROUTE-MIB", "t11FcRouteFabricLastChange"), ("T11-FC-ROUTE-MIB", "t11FcRouteDomainId"), ("T11-FC-ROUTE-MIB", "t11FcRouteMetric"), ("T11-FC-ROUTE-MIB", "t11FcRouteType"), ("T11-FC-ROUTE-MIB", "t11FcRouteIfDown"), ("T11-FC-ROUTE-MIB", "t11FcRouteStorageType"), ("T11-FC-ROUTE-MIB", "t11FcRouteRowStatus"),))
if mibBuilder.loadTexts: t11FcRouteGroup.setDescription('A collection of objects for displaying and configuring\n           routes.')
mibBuilder.exportSymbols("T11-FC-ROUTE-MIB", t11FcRouteTable=t11FcRouteTable, PYSNMP_MODULE_ID=t11FcRouteMIB, t11FcRouteCompliances=t11FcRouteCompliances, t11FcRouteGroup=t11FcRouteGroup, t11FcRouteIfDown=t11FcRouteIfDown, t11FcRouteDestAddrId=t11FcRouteDestAddrId, t11FcRouteGroups=t11FcRouteGroups, t11FcRouteFabricIndex=t11FcRouteFabricIndex, t11FcRouteObjects=t11FcRouteObjects, t11FcRouteProto=t11FcRouteProto, t11FcRouteDomainId=t11FcRouteDomainId, t11FcRouteMIB=t11FcRouteMIB, t11FcRouteConformance=t11FcRouteConformance, t11FcRouteInInterface=t11FcRouteInInterface, t11FcRouteOutInterface=t11FcRouteOutInterface, t11FcRouteCompliance=t11FcRouteCompliance, t11FcRouteNotifications=t11FcRouteNotifications, t11FcRouteEntry=t11FcRouteEntry, t11FcRouteDestMask=t11FcRouteDestMask, t11FcRouteMetric=t11FcRouteMetric, t11FcRouteStorageType=t11FcRouteStorageType, t11FcRouteFabricTable=t11FcRouteFabricTable, t11FcRouteType=t11FcRouteType, t11FcRouteSrcMask=t11FcRouteSrcMask, t11FcRouteRowStatus=t11FcRouteRowStatus, t11FcRouteFabricLastChange=t11FcRouteFabricLastChange, t11FcRouteSrcAddrId=t11FcRouteSrcAddrId, t11FcRouteFabricEntry=t11FcRouteFabricEntry)
