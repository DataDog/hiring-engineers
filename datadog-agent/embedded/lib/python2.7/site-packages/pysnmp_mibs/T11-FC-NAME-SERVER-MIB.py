#
# PySNMP MIB module T11-FC-NAME-SERVER-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/T11-FC-NAME-SERVER-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:29:49 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( ObjectIdentifier, Integer, OctetString, ) = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
( fcmInstanceIndex, FcPortType, FcClasses, FcAddressIdOrZero, FcNameIdOrZero, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "fcmInstanceIndex", "FcPortType", "FcClasses", "FcAddressIdOrZero", "FcNameIdOrZero")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
( MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, iso, ObjectIdentity, Integer32, Counter64, MibIdentifier, Unsigned32, TimeTicks, mib_2, NotificationType, ModuleIdentity, Bits, IpAddress, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "iso", "ObjectIdentity", "Integer32", "Counter64", "MibIdentifier", "Unsigned32", "TimeTicks", "mib-2", "NotificationType", "ModuleIdentity", "Bits", "IpAddress")
( TextualConvention, DisplayString, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue")
( t11FamLocalSwitchWwn, ) = mibBuilder.importSymbols("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamLocalSwitchWwn")
( T11FabricIndex, ) = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")
t11FcNameServerMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 135)).setRevisions(("2006-03-02 00:00",))
if mibBuilder.loadTexts: t11FcNameServerMIB.setLastUpdated('200603020000Z')
if mibBuilder.loadTexts: t11FcNameServerMIB.setOrganization('T11')
if mibBuilder.loadTexts: t11FcNameServerMIB.setContactInfo('     Claudio DeSanti\n                  Cisco Systems, Inc.\n                  170 West Tasman Drive\n                  San Jose, CA 95134 USA\n                  Phone: +1 408 853-9172\n                  EMail: cds@cisco.com\n\n                  Keith McCloghrie\n                  Cisco Systems, Inc.\n                  170 West Tasman Drive\n                  San Jose, CA USA 95134\n                  Phone: +1 408-526-5260\n                  EMail: kzm@cisco.com')
if mibBuilder.loadTexts: t11FcNameServerMIB.setDescription('The MIB module for the management of the functionality,\n           which realizes the FC-GS-4 requirements for Name\n           Server (NS).\n\n           Copyright (C) The Internet Society (2006).  This version of\n           this MIB module is part of RFC 4438; see the RFC itself for\n           full legal notices.')
t11NsNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 0))
t11NsMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 1))
t11NsMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 2))
t11NsStatus = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 1, 1))
t11NsStatistics = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 1, 2))
class T11NsGs4RejectReasonCode(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,))
    namedValues = NamedValues(("none", 1), ("invalidCmdCode", 2), ("invalidVerLevel", 3), ("logicalError", 4), ("invalidIUSize", 5), ("logicalBusy", 6), ("protocolError", 7), ("unableToPerformCmdReq", 8), ("cmdNotSupported", 9), ("serverNotAvailable", 10), ("couldNotEstabSession", 11), ("vendorError", 12),)

class T11NsRejReasonCodeExpl(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,))
    namedValues = NamedValues(("noAdditionalExplanation", 1), ("portIdentifierNotRegistered", 2), ("portNameNotRegistered", 3), ("nodeNameNotRegistered", 4), ("classOfServiceNotRegistered", 5), ("nodeIpAddressNotRegistered", 6), ("ipaNotRegistered", 7), ("fc4TypeNotRegistered", 8), ("symbolicPortNameNotRegistered", 9), ("symbolicNodeNameNotRegistered", 10), ("portTypeNotRegistered", 11), ("portIpAddressNotRegistered", 12), ("fabricPortNameNotRegistered", 13), ("hardAddressNotRegistered", 14), ("fc4DescriptorNotRegistered", 15), ("fc4FeaturesNotRegistered", 16), ("accessDenied", 17), ("unacceptablePortIdentifier", 18), ("databaseEmpty", 19), ("noObjectRegInSpecifiedScope", 20), ("domainIdNotPresent", 21), ("portIdNotPresent", 22), ("noDeviceAttached", 23), ("authorizationException", 24), ("authenticationException", 25), ("databaseFull", 26),)

t11NsInfoSubsetTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 1), )
if mibBuilder.loadTexts: t11NsInfoSubsetTable.setDescription('This table contains one entry for each Name Server\n           Information Subset within each Fibre Channel\n           management instance.')
t11NsInfoSubsetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"))
if mibBuilder.loadTexts: t11NsInfoSubsetEntry.setDescription('This entry contains information about operations\n           on a particular Name Server Information Subset\n           within the Fibre Channel management instance\n           identified by fcmInstanceIndex.')
t11NsInfoSubsetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: t11NsInfoSubsetIndex.setDescription('An arbitrary integer value that uniquely identifies\n           this Name Server Information Subset amongst all others\n           within the same Fibre Channel management instance.\n\n           It is mandatory to keep this value constant between\n           restarts of the agent and to make every possible\n           effort to keep it constant across such restarts.')
t11NsInfoSubsetSwitchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetSwitchIndex.setDescription('The value of this object is zero when operations\n           upon this Name Server Information Subset do not occur\n           at a local Fibre Channel switch; otherwise, it is\n           non-zero and identifies the local switch.\n\n           The switch identified by a non-zero value of this\n           object is the same switch as is identified by the\n           same value of fcmSwitchIndex.')
t11NsInfoSubsetTableLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetTableLastChange.setDescription('The value of sysUpTime at the time of the last update\n           to any entry in the t11NsRegTable with the same values\n           of fcmInstanceIndex and t11NsInfoSubsetIndex.  This\n           includes creation of an entry, deletion of an entry, or\n           modification of an existing entry.  If no such update\n           has taken place since the last re-initialization of the\n           local network management subsystem, then this object\n           contains a zero value.')
t11NsInfoSubsetNumRows = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetNumRows.setDescription('The number of Nx_Ports currently registered in this\n\n\n\n           Name Server Information Subset, i.e., the number of\n           rows in the t11NsRegTable with the same values of\n           fcmInstanceIndex and t11NsInfoSubsetIndex.')
t11NsInfoSubsetTotalRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInfoSubsetTotalRejects.setDescription('The total number of (CT_IU) Requests for Name Server\n           functions that were rejected for inclusion in this\n           Name Server Information Subset, across all Fabrics\n           for which it contains information.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsInfoSubsetRejReqNotfyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11NsInfoSubsetRejReqNotfyEnable.setDescription("This object indicates whether 't11NsRejectRegNotify'\n           notifications are generated by rejections of requests\n           to register information in this Name Server Information\n           Subset.\n\n           If value of this object is 'true', then the\n           notification is generated when a request is rejected.\n           If it is 'false', the notification is not generated.\n\n           The persistence of values of this object across an\n           agent reboot is implementation-dependent.")
t11NsRegTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 2), )
if mibBuilder.loadTexts: t11NsRegTable.setDescription('This table contains entries for all Nx_Ports registered\n\n\n\n           in the identified Name Server Information Subsets across\n           all Fabrics for which such subsets contain information.')
t11NsRegEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegPortIdentifier"))
if mibBuilder.loadTexts: t11NsRegEntry.setDescription('An entry containing information about an Nx_Port\n           represented by t11NsRegPortIdentifier that is registered\n           with a Name Server Information Subset (identified by\n           t11NsInfoSubsetIndex) within the Fibre Channel management\n           instance (identified by fcmInstanceIndex) on the Fabric\n           (identified by t11NsRegFabricIndex).')
t11NsRegFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 1), T11FabricIndex())
if mibBuilder.loadTexts: t11NsRegFabricIndex.setDescription('A unique index value that uniquely identifies a\n           particular Fabric.\n\n           In a Fabric conformant to SW-3, only a single Fabric can\n           operate within a single physical infrastructure, and thus,\n           the value of this Fabric Index will always be 1.\n\n\n\n           However, it is possible that future standards will define\n           how multiple Fabrics, each with its own management\n           instrumentation, could operate within one (or more) physical\n           infrastructures.  To allow for this future possibility, this\n           index value is used to uniquely identify a particular\n           Fabric within a physical infrastructure.')
t11NsRegPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 2), FcAddressIdOrZero())
if mibBuilder.loadTexts: t11NsRegPortIdentifier.setDescription('The Fibre Channel Address Identifier of this Nx_Port.\n           If no Port Identifier has been registered, then the\n           value of this object is the zero-length string.')
t11NsRegPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 3), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegPortName.setDescription('The Port_Name (WWN) of this Nx_Port.\n           If this object has not been registered, then its value\n           is the zero-length string.')
t11NsRegNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 4), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegNodeName.setDescription('The Node_Name (WWN) of this Nx_Port.\n           If this object has not been registered, then its value\n           is the zero-length string.')
t11NsRegClassOfSvc = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 5), FcClasses()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegClassOfSvc.setDescription('The class of service indicator.  This object is an\n           array of bits that contain a bit map of the classes of\n           service supported by the associated port.  If a bit in\n\n\n\n           this object is 1, it indicates that the class of\n           service is supported by the associated port.  When a\n           bit is set to 0, it indicates that no class of service\n           is supported by this Nx_Port.\n\n           If this object has not been not registered for a port,\n           then the instance for that port is not instantiated.')
t11NsRegNodeIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(16,16),)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegNodeIpAddress.setDescription("The IP address of the node of this Nx_Port, in\n           network-byte order, either as a 32-bit IPv4 address or\n           a 128-bit IPv6 address.  For the former, the leftmost 96 bits\n           (12 bytes) should contain x'00 00 00 00 00 00 00 00 00 00 FF\n           FF', and the IPv4 address should be present in the rightmost\n           32 bits.\n\n           Note that the value of this object is the IP address value\n           that is received in the FC-GS-4 message Register IP address\n           (Node) RIP_NN.  It is not validated against any IP address\n           format.\n\n           If no 'IP address (Node)' has been registered, then the\n           value of this object is the zero-length string.")
t11NsRegProcAssoc = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(8,8),)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegProcAssoc.setDescription("The Fibre Channel Initial Process Associator (IPA).\n\n           If no 'Initial Process Associator' has been registered,\n           then the value of this object is the zero-length string.")
t11NsRegFc4Type = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(32,32),)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFc4Type.setDescription("The FC-4 protocol types supported by this Nx_Port.\n           This is an array of 256 bits.  Each bit in the array\n           corresponds to a Type value as defined by Fibre Channel\n           standards and contained in the Type field of the frame\n           header.  The order of the bits in the 256-bit (32-byte)\n           value is the same as defined in FC-GS-4, section 5.2.3.8,\n           and represented in network-byte order.\n\n           If no 'FC-4 TYPEs' has been registered, then the\n           value of this object is the zero-length string.")
t11NsRegPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 9), FcPortType().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegPortType.setDescription("The port type of this port.\n\n           If no 'Port Type' has been registered, then the value\n           of this object is unidentified and is represented by\n           the value 'unknown'.")
t11NsRegPortIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(16,16),)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegPortIpAddress.setDescription("The value that Fibre Channel calls an 'IP Address (Port)'\n           that represents the IP address of the associated port.\n           The value is either in 32-bit IPv4 format or 128-bit IPv6\n           format, in network-byte order.  When this object contains an\n           IPv4 address, the leftmost 96 bits (12 bytes) should contain\n           x'00 00 00 00 00 00 00 00 00 00 FF FF'.  The IPv4 address\n           should be present in the rightmost 32 bits.\n\n           Note that the value of this object is the IP address value\n\n\n\n           that is received in the FC-GS-4 message Register IP address\n           (Port) RIPP_ID.  It is not validated against any IP address\n           format.\n\n           If no 'IP address (Port)' has been registered, then the\n           value of this object is the zero-length string.")
t11NsRegFabricPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 11), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFabricPortName.setDescription("The Fabric Port Name (WWN) of the Fx_Port to which\n           this Nx_Port is attached.\n\n           If no 'Fabric Port Name' has been registered, then the\n           value of this object is the zero-length string.")
t11NsRegHardAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 12), FcAddressIdOrZero().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegHardAddress.setDescription("The format of this object is identical to the format\n           of Hard Address defined in the Discover Address (ADISC)\n           Extended Link Service (FC-FS).\n\n           Hard Address is the 24-bit NL_Port identifier that\n           consists of:\n             - the 8-bit Domain_ID in the most significant byte\n             - the 8-bit Area_ID in the next most significant\n               byte\n             - the 8-bit AL-PA (Arbitrated Loop Physical Address)\n               which an NL_Port attempts acquire during FC-AL\n               initialization in the least significant byte.\n\n           If the port is not an NL_Port, or if it is an NL_Port\n           but does not have a hard address, then all bits are\n           reported as zeros.\n\n           If no 'Hard Address' has been registered, then the\n\n\n\n           value of this object is the zero-length string.")
t11NsRegSymbolicPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegSymbolicPortName.setDescription("The user-defined name of this port.\n\n           If no 'Symbolic Port Name' has been registered, then\n           the value of this object is the zero-length string.")
t11NsRegSymbolicNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegSymbolicNodeName.setDescription("The user-defined name of the node of this port.\n\n           If no 'Symbolic Node Name' has been registered, then\n           the value of this object is the zero-length string.")
t11NsRegFc4Features = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(128,128),)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFc4Features.setDescription("The FC-4 Features associated with FC-4 Types on this\n           port encoded as a 128-byte value in network-byte order,\n           or the zero-length string if no 'FC-4 Features' have been\n           registered.\n\n           Section 5.2.3.15 of FC-GS-4 is the authoritative\n           definition of the format of the 128-byte value,\n           i.e., if different, FC-GS-4 takes precedence over the\n           following description:\n\n           The 128-byte value is an array of 4-bit values, one for\n           each FC-4 Type value, positioned as follows: the 5 most\n           significant bits of a Type value identify where it appears\n           within the 128-byte value, specifically, within which word:\n\n\n\n                 - Word 0 (of the 128-byte value) contains information\n                   related to Types '00' through '07';\n                 - Word 1 contains information related to Types\n                   '08' through 0F';\n                 - and so forth, up to Word 31, which contains\n                   information related to Types 'F8' through 'FF'.\n\n           The least significant of the eight 4-bit values in each\n           Word represents an FC-4 Type with 000 as its 3 least\n           significant bits, and most significant 4-bit value in\n           each Word represents an FC-4 Type with 111 as its 3 least\n           significant bits.")
t11NsRegFc4DescriptorTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 3), )
if mibBuilder.loadTexts: t11NsRegFc4DescriptorTable.setDescription('This table contains entries for all FC-4 Descriptors\n           registered in the identified Name Server Information\n           Subsets across all Fabrics for which such subsets\n           contain information.')
t11NsRegFc4DescriptorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 3, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegPortIdentifier"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFc4TypeValue"))
if mibBuilder.loadTexts: t11NsRegFc4DescriptorEntry.setDescription('An entry in the t11NsRegFc4DescriptorTable,\n           containing information about an FC-4 Descriptor\n           that is associated with a particular FC-4 Type\n           value.  The particular FC-4 Descriptor was\n           registered by an Nx_Port (identified by\n           t11NsRegPortIdentifier) in a Name Server Information\n           Subset (identified by t11NsInfoSubsetIndex) within\n           the Fibre Channel management instance (identified by\n           fcmInstanceIndex) on the Fabric (identified by\n\n\n\n           t11NsRegFabricIndex).\n\n           If no FC-4 Descriptors have been registered\n           for a particular port, then there will be no\n           entries in this table for that port.')
t11NsRegFc4TypeValue = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,255)))
if mibBuilder.loadTexts: t11NsRegFc4TypeValue.setDescription("An integer value that identifies an FC-4 Type value\n           (representing a particular protocol type, as specified\n           in FC-FS) for which an FC-4 Descriptor has been\n           registered.\n\n           An instance of this object contains a 'Type value'\n           that corresponds to a '1' bit in the value of the\n           t11NsRegFc4Type registered for the same port;\n           this correspondence is as specified in FC-GS-4.")
t11NsRegFc4Descriptor = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRegFc4Descriptor.setDescription('The FC-4 Descriptor value that has been registered\n           for the particular port on the particular Fabric, and\n           for the FC-4 Type represented by the corresponding\n           value of t11NsRegFc4TypeIndex.\n\n           The format of an FC-4 Descriptor is dependent on the\n           corresponding FC-4 Type value, but is represented in\n\n\n\n           network-byte order.')
t11NsStatsTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 2, 1), )
if mibBuilder.loadTexts: t11NsStatsTable.setDescription('This table contains per-Fabric state and statistics\n           for operations upon the identified Name Server\n           Information Subsets.')
t11NsStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"))
if mibBuilder.loadTexts: t11NsStatsEntry.setDescription('An entry in this table contains state and statistics\n           for operations upon a Name Server Information Subset\n           (identified by t11NsInfoSubsetIndex) within the Fibre\n           Channel management instance (identified by\n           fcmInstanceIndex) on the Fabric (identified by\n           t11NsRegFabricIndex).')
t11NsInGetReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInGetReqs.setDescription('The total number of (CT_IU) Get Requests\n           received requesting information from this Name\n           Server Information Subset on this Fabric.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsOutGetReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsOutGetReqs.setDescription('The total number of (CT_IU) Get Requests sent in\n           order to obtain information needed in this Name Server\n           Information Subset on this Fabric.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsInRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInRegReqs.setDescription('The total number of (CT_IU) Registration Requests\n           received to register information in the Name Server\n           Information Subset on this Fabric.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsInDeRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInDeRegReqs.setDescription('The total number of (CT_IU) De-registration Requests\n           received to de-register information from this Name Server\n           Information Subset on this Fabric.\n\n           This counter has no discontinuities other than those\n\n\n\n           that all Counter32s have when sysUpTime=0.')
t11NsInRscns = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsInRscns.setDescription('The total number of received RSCNs, indicating\n           Name Server-related changes relating to this Name\n           Server Information Subset on this Fabric.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsOutRscns = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsOutRscns.setDescription('The total number of transmitted RSCNs, indicating\n           Name Server-related changes relating to this Name\n           Server Information Subset on this Fabric.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejects.setDescription('The total number of CT_IU Requests for Name\n           Server functions on this Name Server Information\n           Subset on this Fabric that were rejected.\n\n           This counter has no discontinuities other than those\n           that all Counter32s have when sysUpTime=0.')
t11NsDatabaseFull = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsDatabaseFull.setDescription("An indication of whether the database containing this\n\n\n\n           Name Server Information Subset is full.  This object is\n           set to 'true' only if the Name Server is unable to allocate\n           space for a new entry for the corresponding Fabric, and it is\n           set to 'false' whenever an existing entry is deleted for the\n           corresponding Fabric.")
t11NsRejectTable = MibTable((1, 3, 6, 1, 2, 1, 135, 1, 1, 4), )
if mibBuilder.loadTexts: t11NsRejectTable.setDescription('This table contains information about the most recent\n           Name Server Registration Request failures for various\n           ports on various Fabrics.\n\n           If no information is available about the most recent\n           rejection of a Registration Request on a particular port\n           on a particular Fabric, then there will no entry in this\n           table for that port and Fabric.\n\n           When a t11NsRejectRegNotify notification is sent for\n           such a Registration Request failure, the values of the\n           objects in the relevant entry of this table are updated\n           immediately prior to generating the notification.')
t11NsRejectEntry = MibTableRow((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegFabricIndex"), (0, "T11-FC-NAME-SERVER-MIB", "t11NsRegPortIdentifier"))
if mibBuilder.loadTexts: t11NsRejectEntry.setDescription('An entry containing information about the most recent\n           rejection of a request to register information in the Name\n           Server Information Subset (identified by\n           t11NsInfoSubsetIndex) within the Fibre Channel management\n           instance (identified by fcmInstanceIndex) for a particular\n           port (identified by t11NsRegPortIdentifier) on a particular\n           Fabric (identified by t11NsRegFabricIndex).')
t11NsRejectCtCommandString = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejectCtCommandString.setDescription("The binary content of the Registration Request,\n           formatted as an octet string (in network byte\n           order) containing the CT_IU, as described in\n           Table 2 of [FC-GS-4] (including the preamble),\n           which was most recently rejected for the particular\n           Name Server Information Subset on the particular port\n           on the particular Fabric.\n\n           This object contains the zero-length string\n           if and when the CT-IU's content is unavailable.\n\n           When the length of this object is 255 octets, it\n           contains the first 255 octets of the CT-IU (in\n           network-byte order).")
t11NsRejectReasonCode = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 2), T11NsGs4RejectReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejectReasonCode.setDescription('A registration reject reason code.  This object\n           contains the reason code of the most recent Name\n           Server Registration Request failure for the\n           particular port on the particular Fabric.')
t11NsRejReasonCodeExp = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 3), T11NsRejReasonCodeExpl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejReasonCodeExp.setDescription('A registration reject reason code explanation.  This\n           object contains the reason code explanation of the most\n           recent Name Server Registration Request failure for the\n           particular port on the particular Fabric.')
t11NsRejReasonVendorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 135, 1, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11NsRejReasonVendorCode.setDescription('A registration reject vendor-specific code.  This\n           object contains the vendor-specific code of the most\n           recent Name Server Registration Request failure for the\n           particular port on the particular Fabric.')
t11NsRejectRegNotify = NotificationType((1, 3, 6, 1, 2, 1, 135, 0, 1)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11FamLocalSwitchWwn"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectCtCommandString"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectReasonCode"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonCodeExp"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonVendorCode"),))
if mibBuilder.loadTexts: t11NsRejectRegNotify.setDescription("This notification is generated whenever a request to\n           register information in a Name Server Information\n           Subset (for which the corresponding instance of\n           t11NsInfoSubsetRejReqNotfyEnable is 'true') is\n           rejected on a particular Fabric for a particular Nx_Port.\n\n           The value of t11FamLocalSwitchWwn indicates the\n           WWN of the switch that received the request.\n           (If the WWN is unavailable, the value is set to\n           the zero-length string.)\n\n           The value of t11NsRejectCtCommandString indicates\n           the rejected request, and the values of\n           t11NsRejectReasonCode, t11NsRejReasonCodeExp, and\n           t11NsRejReasonVendorCode indicate the reason for\n           the rejection.\n\n           The value of t11NsRegPortName represents the Port Name\n           if it is able to be extracted out of the Registration\n           Request, or otherwise the value as currently registered\n           on the port.")
t11NsMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 2, 1))
t11NsMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 135, 2, 2))
t11NsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 135, 2, 1, 1)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsDBGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsNotifyControlGroup"), ("T11-FC-NAME-SERVER-MIB", "t11NsNotifyGroup"),))
if mibBuilder.loadTexts: t11NsMIBCompliance.setDescription('The compliance statement for entities that\n           implement the Fibre Channel Name Server.')
t11NsDBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 1)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetSwitchIndex"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetTableLastChange"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetNumRows"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegNodeName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegClassOfSvc"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegNodeIpAddress"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegProcAssoc"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFc4Type"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortType"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegPortIpAddress"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFabricPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegHardAddress"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegSymbolicPortName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegSymbolicNodeName"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFc4Features"), ("T11-FC-NAME-SERVER-MIB", "t11NsRegFc4Descriptor"),))
if mibBuilder.loadTexts: t11NsDBGroup.setDescription('A collection of objects for monitoring the information\n           registered in a Name Server Information Subset.')
t11NsRequestStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 2)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInGetReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsOutGetReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsInRegReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsInDeRegReqs"), ("T11-FC-NAME-SERVER-MIB", "t11NsDatabaseFull"),))
if mibBuilder.loadTexts: t11NsRequestStatsGroup.setDescription('A collection of objects for displaying Name\n           Server statistics and state for Name Server requests.')
t11NsRscnStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 3)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInRscns"), ("T11-FC-NAME-SERVER-MIB", "t11NsOutRscns"),))
if mibBuilder.loadTexts: t11NsRscnStatsGroup.setDescription('A collection of objects for displaying Name\n           Server statistics for Name Server-related RSCNs.')
t11NsRejectStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 4)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetTotalRejects"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejects"),))
if mibBuilder.loadTexts: t11NsRejectStatsGroup.setDescription('A collection of objects for displaying Name\n           Server statistics for rejects.')
t11NsNotifyControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 5)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsRejectCtCommandString"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejectReasonCode"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonCodeExp"), ("T11-FC-NAME-SERVER-MIB", "t11NsRejReasonVendorCode"), ("T11-FC-NAME-SERVER-MIB", "t11NsInfoSubsetRejReqNotfyEnable"),))
if mibBuilder.loadTexts: t11NsNotifyControlGroup.setDescription('A collection of notification control and\n           notification information objects for monitoring\n           rejections of Name Server registrations.')
t11NsNotifyGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 135, 2, 2, 6)).setObjects(*(("T11-FC-NAME-SERVER-MIB", "t11NsRejectRegNotify"),))
if mibBuilder.loadTexts: t11NsNotifyGroup.setDescription('A collection of notifications for monitoring\n           rejections of Name Server registrations.')
mibBuilder.exportSymbols("T11-FC-NAME-SERVER-MIB", t11NsRegNodeName=t11NsRegNodeName, t11NsDBGroup=t11NsDBGroup, t11NsNotifications=t11NsNotifications, t11NsRegClassOfSvc=t11NsRegClassOfSvc, t11NsRejectCtCommandString=t11NsRejectCtCommandString, t11NsRegFc4Type=t11NsRegFc4Type, t11NsStatsTable=t11NsStatsTable, t11NsNotifyGroup=t11NsNotifyGroup, t11NsInDeRegReqs=t11NsInDeRegReqs, t11NsRequestStatsGroup=t11NsRequestStatsGroup, t11NsRegPortIpAddress=t11NsRegPortIpAddress, t11FcNameServerMIB=t11FcNameServerMIB, t11NsOutGetReqs=t11NsOutGetReqs, t11NsRejReasonVendorCode=t11NsRejReasonVendorCode, t11NsMIBGroups=t11NsMIBGroups, t11NsRejects=t11NsRejects, t11NsRegNodeIpAddress=t11NsRegNodeIpAddress, t11NsInGetReqs=t11NsInGetReqs, t11NsStatsEntry=t11NsStatsEntry, t11NsInfoSubsetRejReqNotfyEnable=t11NsInfoSubsetRejReqNotfyEnable, t11NsRegFabricIndex=t11NsRegFabricIndex, t11NsStatistics=t11NsStatistics, t11NsInfoSubsetIndex=t11NsInfoSubsetIndex, t11NsRejectTable=t11NsRejectTable, t11NsInRegReqs=t11NsInRegReqs, t11NsRejectRegNotify=t11NsRejectRegNotify, t11NsMIBCompliance=t11NsMIBCompliance, t11NsRegPortType=t11NsRegPortType, t11NsRegPortIdentifier=t11NsRegPortIdentifier, t11NsRegSymbolicPortName=t11NsRegSymbolicPortName, T11NsRejReasonCodeExpl=T11NsRejReasonCodeExpl, t11NsInfoSubsetEntry=t11NsInfoSubsetEntry, t11NsRejReasonCodeExp=t11NsRejReasonCodeExp, t11NsInfoSubsetSwitchIndex=t11NsInfoSubsetSwitchIndex, t11NsRejectStatsGroup=t11NsRejectStatsGroup, t11NsInfoSubsetNumRows=t11NsInfoSubsetNumRows, t11NsRegFc4TypeValue=t11NsRegFc4TypeValue, t11NsRscnStatsGroup=t11NsRscnStatsGroup, t11NsRegFc4DescriptorTable=t11NsRegFc4DescriptorTable, t11NsRegTable=t11NsRegTable, t11NsRejectReasonCode=t11NsRejectReasonCode, T11NsGs4RejectReasonCode=T11NsGs4RejectReasonCode, t11NsRegPortName=t11NsRegPortName, t11NsRegFc4DescriptorEntry=t11NsRegFc4DescriptorEntry, t11NsRegSymbolicNodeName=t11NsRegSymbolicNodeName, t11NsRegEntry=t11NsRegEntry, t11NsOutRscns=t11NsOutRscns, t11NsRegFc4Descriptor=t11NsRegFc4Descriptor, t11NsRejectEntry=t11NsRejectEntry, t11NsMIBCompliances=t11NsMIBCompliances, t11NsInfoSubsetTable=t11NsInfoSubsetTable, t11NsRegProcAssoc=t11NsRegProcAssoc, t11NsRegFc4Features=t11NsRegFc4Features, t11NsMIBObjects=t11NsMIBObjects, t11NsDatabaseFull=t11NsDatabaseFull, t11NsRegFabricPortName=t11NsRegFabricPortName, t11NsMIBConformance=t11NsMIBConformance, t11NsInfoSubsetTableLastChange=t11NsInfoSubsetTableLastChange, PYSNMP_MODULE_ID=t11FcNameServerMIB, t11NsStatus=t11NsStatus, t11NsRegHardAddress=t11NsRegHardAddress, t11NsInRscns=t11NsInRscns, t11NsNotifyControlGroup=t11NsNotifyControlGroup, t11NsInfoSubsetTotalRejects=t11NsInfoSubsetTotalRejects)
