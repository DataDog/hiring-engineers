#
# PySNMP MIB module TCPIPX-MIB (http://pysnmp.sf.net)
# ASN.1 source file:///home/tt/fixed_mibs/TCPIPX-MIB
# Produced by pysmi-0.0.2 at Mon Jun 22 23:55:14 2015
# On host cray platform Linux version 2.6.37.6-smp by user tt
# Using Python version 2.7.2 (default, Apr  2 2012, 20:32:47) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( ModuleCompliance, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibTableRow, MibTableColumn, MibScalar, Unsigned32, TimeTicks, Counter64, MibTable, NotificationType, enterprises, ModuleIdentity, IpAddress, iso, Gauge32, MibIdentifier, Bits, ObjectIdentity, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibTableRow", "MibTableColumn", "MibScalar", "Unsigned32", "TimeTicks", "Counter64", "MibTable", "NotificationType", "enterprises", "ModuleIdentity", "IpAddress", "iso", "Gauge32", "MibIdentifier", "Bits", "ObjectIdentity", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class IpxAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(10,10)
    fixedLength = 10

novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
tcpx = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 29))
tcpxTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 29, 1))
tcpxUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 29, 2))
tcpIpxConnTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1), )
if mibBuilder.loadTexts: tcpIpxConnTable.setDescription('A table containing information specific on\n                       TCP connection over IPX network layer.')
tcpIpxConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1, 1), ).setIndexNames((0, "TCPIPX-MIB", "tcpIpxConnLocalAddress"), (0, "TCPIPX-MIB", "tcpIpxConnLocalPort"), (0, "TCPIPX-MIB", "tcpIpxConnRemAddress"), (0, "TCPIPX-MIB", "tcpIpxConnRemPort"))
if mibBuilder.loadTexts: tcpIpxConnEntry.setDescription('Information about a particular current TCP\n                       connection over IPX  An object of this type is\n                       transient, in that it ceases to exist when (or\n                       soon after) the connection makes the transition\n                       to the CLOSED state.')
tcpIpxConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpIpxConnState.setDescription("The state of this TCP connection.\n\n                       The only value which may be set by a management\n                       station is deleteTCB(12).  Accordingly, it is\n                       appropriate for an agent to return a `badValue'\n                       response if a management station attempts to set\n                       this object to any other value.\n\n                       If a management station sets this object to the\n                       value deleteTCB(12), then this has the effect of\n                       deleting the TCB (as defined in RFC 793) of the\n                       corresponding connection on the managed node,\n                       resulting in immediate termination of the\n                       connection.\n\n                       As an implementation-specific option, a RST\n                       segment may be sent from the managed node to the\n                       other TCP endpoint (note however that RST\n                       segments are not sent reliably).")
tcpIpxConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1, 1, 2), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIpxConnLocalAddress.setDescription('The local IPX address for this TCP connection.\n                       In the case of a connection in the listen state\n                       which is willing to accept connections for any\n                       interface, the value 00000000:000000000000 is\n                       used.  See tcpUnspecConnTable for connections in\n                       the listen  state which is willing to accept\n                       connects for any IP interface associated with\n                       the node.')
tcpIpxConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIpxConnLocalPort.setDescription('The local port number for this TCP connection.')
tcpIpxConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1, 1, 4), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIpxConnRemAddress.setDescription('The remote IPX address for this TCP connection.')
tcpIpxConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIpxConnRemPort.setDescription('The remote port number for this TCP connection.')
udpIpxTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 1), )
if mibBuilder.loadTexts: udpIpxTable.setDescription('A table containing UDP listener information.')
udpIpxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 1, 1), ).setIndexNames((0, "TCPIPX-MIB", "udpIpxLocalAddress"), (0, "TCPIPX-MIB", "udpIpxLocalPort"))
if mibBuilder.loadTexts: udpIpxEntry.setDescription('Information about a particular current UDP\n                       listener.')
udpIpxLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 1, 1, 1), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpIpxLocalAddress.setDescription('The local IPX address for this UDP listener.  In\n                       the case of a UDP listener which is willing to\n                       accept datagrams for any interface, the value\n                       00000000:000000000000 is used.  See\n                       udpUnspecTable for UDP listener which is\n                       willing to accept datagrams from any network\n                       layer.')
udpIpxLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpIpxLocalPort.setDescription('The local port number for this UDP listener.')
tcpUnspecConnTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 2), )
if mibBuilder.loadTexts: tcpUnspecConnTable.setDescription('A table containing information specific on\n                       TCP connection over unspecified network layer.')
tcpUnspecConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 2, 1), ).setIndexNames((0, "TCPIPX-MIB", "tcpUnspecConnLocalPort"))
if mibBuilder.loadTexts: tcpUnspecConnEntry.setDescription('Information about a particular current TCP\n                       connection over unspecified network layer.  An\n                       object of this type is transient, in that it\n                       ceases to exist when the connection makes\n                       transition beyond LISTEN state, or when (or\n                       soon after) the connection makes transition\n                       to the CLOSED state,')
tcpUnspecConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 12,)).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("deleteTCB", 12),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpUnspecConnState.setDescription("The state of this TCP connection.\n\n                       Since the TCP connection can belong to this table\n                       only when its state is less than SYN-SENT, only\n                       closed and listen state apply.\n\n                       The only value which may be set by a management\n                       station is deleteTCB(12).  Accordingly, it is\n                       appropriate for an agent to return a `badValue'\n                       response if a management station attempts to set\n                       this object to any other value.\n\n                       If a management station sets this object to the\n                       value deleteTCB(12), then this has the effect of\n                       deleting the TCB (as defined in RFC 793) of the\n                       corresponding connection on the managed node,\n                       resulting in immediate termination of the\n                       connection.\n\n                       As an implementation-specific option, a RST\n                       segment may be sent from the managed node to the\n                       other TCP endpoint (note however that RST\n                       segments are not sent reliably).")
tcpUnspecConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpUnspecConnLocalPort.setDescription('The local port number for this TCP connection.')
udpUnspecTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 2), )
if mibBuilder.loadTexts: udpUnspecTable.setDescription('A table containing UDP listener information.')
udpUnspecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 2, 1), ).setIndexNames((0, "TCPIPX-MIB", "udpUnspecLocalPort"))
if mibBuilder.loadTexts: udpUnspecEntry.setDescription('Information about a particular current UDP\n                       listener.')
udpUnspecLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 29, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpUnspecLocalPort.setDescription('The local port number for this UDP listener.')
mibBuilder.exportSymbols("TCPIPX-MIB", tcpIpxConnTable=tcpIpxConnTable, IpxAddress=IpxAddress, udpIpxEntry=udpIpxEntry, udpIpxLocalPort=udpIpxLocalPort, udpUnspecEntry=udpUnspecEntry, udpIpxTable=udpIpxTable, tcpIpxConnLocalAddress=tcpIpxConnLocalAddress, novell=novell, tcpUnspecConnTable=tcpUnspecConnTable, tcpUnspecConnLocalPort=tcpUnspecConnLocalPort, tcpx=tcpx, udpUnspecTable=udpUnspecTable, tcpIpxConnEntry=tcpIpxConnEntry, udpIpxLocalAddress=udpIpxLocalAddress, tcpIpxConnState=tcpIpxConnState, udpUnspecLocalPort=udpUnspecLocalPort, tcpIpxConnLocalPort=tcpIpxConnLocalPort, tcpxTcp=tcpxTcp, tcpIpxConnRemAddress=tcpIpxConnRemAddress, tcpUnspecConnEntry=tcpUnspecConnEntry, tcpUnspecConnState=tcpUnspecConnState, mibDoc=mibDoc, tcpIpxConnRemPort=tcpIpxConnRemPort, tcpxUdp=tcpxUdp)
