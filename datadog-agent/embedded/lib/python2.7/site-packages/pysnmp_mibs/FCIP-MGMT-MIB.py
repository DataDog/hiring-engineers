#
# PySNMP MIB module FCIP-MGMT-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/FCIP-MGMT-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:12:19 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( OctetString, Integer, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
( FcNameIdOrZero, ) = mibBuilder.importSymbols("FC-MGMT-MIB", "FcNameIdOrZero")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( NotificationGroup, ObjectGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
( TimeTicks, Counter64, Counter32, iso, Integer32, Gauge32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, MibIdentifier, NotificationType, mib_2, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Counter32", "iso", "Integer32", "Gauge32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "MibIdentifier", "NotificationType", "mib-2", "Unsigned32")
( RowStatus, DisplayString, TextualConvention, TruthValue, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue", "TimeStamp")
fcipMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 224)).setRevisions(("2006-02-06 00:00",))
if mibBuilder.loadTexts: fcipMIB.setLastUpdated('200602060000Z')
if mibBuilder.loadTexts: fcipMIB.setOrganization('IETF IPFC Working Group')
if mibBuilder.loadTexts: fcipMIB.setContactInfo('Anil Rijhsinghani\n                  Accton Technology Corporation\n                  5 Mount Royal Ave\n                  Marlboro, MA 01752 USA.\n\n\n\n                  Ravi Natarajan\n                  F5 Networks\n                  2460 North First Street, Suite 100\n                  San Jose, CA 95131 USA.')
if mibBuilder.loadTexts: fcipMIB.setDescription('The module defines management information specific to\n         FCIP devices.\n\n         Copyright(C) The Internet Society (2006).  This version\n         of this MIB module is part of RFC 4404; see the RFC\n         itself for full legal notices.')
fcipObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 224, 1))
fcipConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 224, 2))
fcipConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 224, 1, 1))
class FcipDomainIdInOctetForm(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,1)
    fixedLength = 1

class FcipEntityMode(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2,))
    namedValues = NamedValues(("ePortMode", 1), ("bPortMode", 2),)

class FcipEntityId(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(8,8)
    fixedLength = 8

fcipDynIpConfType = MibScalar((1, 3, 6, 1, 2, 1, 224, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("slpv2", 1), ("none", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcipDynIpConfType.setDescription('The type of discovery protocol used to discover remote\n         FCIP entities.  The value of this object is persistent\n         across system restarts.')
fcipDeviceWWN = MibScalar((1, 3, 6, 1, 2, 1, 224, 1, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipDeviceWWN.setDescription('The World Wide Name of this FCIP device.')
fcipEntitySACKOption = MibScalar((1, 3, 6, 1, 2, 1, 224, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipEntitySACKOption.setDescription('Indication of whether the TCP Selective Acknowledgement\n         Option is enabled at this FCIP device to let the receiver\n         acknowledge multiple lost packets in a single ACK for faster\n\n\n\n         recovery.')
fcipEntityInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 4), )
if mibBuilder.loadTexts: fcipEntityInstanceTable.setDescription("Information about this FCIP device's existing instances of\n         FCIP entities.")
fcipEntityInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"))
if mibBuilder.loadTexts: fcipEntityInstanceEntry.setDescription('A conceptual row of the FCIP entity table with information\n         about a particular FCIP entity.  Once a row has been\n         created, it is non-volatile across agent restarts until it\n         is deleted.')
fcipEntityId = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 1), FcipEntityId())
if mibBuilder.loadTexts: fcipEntityId.setDescription('The FCIP entity identifier.')
fcipEntityName = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipEntityName.setDescription('An administratively-assigned name for this FCIP entity.')
fcipEntityAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipEntityAddressType.setDescription('The type of Internet address by which the entity is\n         reachable.  Only address types IPv4 and IPv6 are supported.')
fcipEntityAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipEntityAddress.setDescription('The Internet address for the entity, if configured.  The\n         format of this address is determined by the value of the\n         fcipEntityAddressType object.')
fcipEntityTcpConnPort = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipEntityTcpConnPort.setDescription('A TCP port other than the FCIP Well-Known port on which the\n         FCIP entity listens for new TCP connection requests.  It\n         contains the value zero(0) if the FCIP Entity only listens\n         on the Well-Known port.')
fcipEntitySeqNumWrap = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipEntitySeqNumWrap.setDescription('An indication of whether the FCIP Entity supports protection\n         against sequence number wrap.')
fcipEntityPHBSupport = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipEntityPHBSupport.setDescription('An indication of whether the FCIP Entity supports PHB IP\n         quality of service (QoS).')
fcipEntityStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipEntityStatus.setDescription('This object specifies the operational status of the row.\n\n         When a management station sets the status to active(1), then\n         the values for the objects fcipEntityName,\n         fcipEntityAddressType, and fcipEntityAddress should be\n         supplied as part of the set request.  The values of the\n         objects fcipEntityName, fcipEntityAddressType, and\n         fcipEntityAddress can be changed if the row status is in\n         active state.  The object fcipEntityTcpConnPort takes the\n         default value zero(0), if no value is supplied at the time\n         of row creation.\n\n         Setting the status to destroy(6) deletes the specified FCIP\n         entity instance row from the table.  It also deletes all the\n         rows corresponding to the specified FCIP entity from the\n         fcipLinkTable and fcipTcpConnTable tables.')
fcipLinkTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 5), )
if mibBuilder.loadTexts: fcipLinkTable.setDescription('Information about FCIP links that exist on this device.')
fcipLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"), (0, "FCIP-MGMT-MIB", "fcipLinkIndex"))
if mibBuilder.loadTexts: fcipLinkEntry.setDescription('A conceptual row of the FCIP link table containing\n         information about a particular FCIP link.  The values of the\n         read-create objects in this table are persistent across\n         system restarts.')
fcipLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: fcipLinkIndex.setDescription('An arbitrary integer that uniquely identifies one FCIP link\n         within an FCIP entity.')
fcipLinkIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkIfIndex.setDescription('The ifIndex value of the virtual interface corresponding to\n         the FCIP Link running over TCP/IP.')
fcipLinkCost = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkCost.setDescription('The FSPF cost associated with this FCIP Link.')
fcipLinkLocalFcipEntityMode = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 4), FcipEntityMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkLocalFcipEntityMode.setDescription('The mode of the local end of the FCIP link.')
fcipLinkLocalFcipEntityAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkLocalFcipEntityAddressType.setDescription('The type of Internet address contained in the corresponding\n         instance of fcipLinkLocalFcipEntityAddress.  Only address\n         types IPv4 and IPv6 are supported.')
fcipLinkLocalFcipEntityAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkLocalFcipEntityAddress.setDescription('The Internet address for the local end of this FCIP Link.\n         The format of this object is determined by the value of the\n         fcipLinkLocalFcipEntityAddressType object.')
fcipLinkRemFcipEntityWWN = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 7), FcNameIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkRemFcipEntityWWN.setDescription('The World Wide Name of the remote FC Fabric Entity.')
fcipLinkRemFcipEntityId = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 8), FcipEntityId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkRemFcipEntityId.setDescription("The remote FCIP entity's identifier.")
fcipLinkRemFcipEntityAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 9), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkRemFcipEntityAddressType.setDescription('The type of Internet address contained in the corresponding\n         instance of fcipLinkRemFcipEntityAddress.  Only address\n         types IPv4 and IPv6 are supported.')
fcipLinkRemFcipEntityAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 10), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkRemFcipEntityAddress.setDescription('The Internet address for the remote end of this FCIP Link.\n         The format of this object is determined by the value of the\n         fcipLinkRemFcipEntityAddressType object.')
fcipLinkStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipLinkStatus.setDescription('This object specifies the operational status of the row.\n\n         The values of objects fcipLinkLocalFcipEntityAddressType,\n         fcipLinkLocalFcipEntityAddress, fcipLinkRemFcipEntityWWN,\n         fcipLinkRemFcipEntityId, fcipLinkRemFcipEntityAddressType,\n\n\n\n         and fcipLinkRemFcipEntityAddress can be changed if the row\n         is in active(1) state.  The object fcipLinkCost is set to\n         the value zero(0) if no value is supplied at the time of row\n         creation.\n\n         Setting the status to destroy(6) deletes the specified FCIP\n         link from the table.  It also deletes all rows corresponding\n         to the specified FCIP link from the fcipTcpConnTable table.')
fcipLinkCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 5, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkCreateTime.setDescription('The value of sysUpTime when this entry was last created.')
fcipTcpConnTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 6), )
if mibBuilder.loadTexts: fcipTcpConnTable.setDescription('Information about existing TCP connections.  Each FCIP link\n         within an FCIP entity manages one or more TCP connections.\n         The FCIP entity employs a Data Engine for each TCP\n         connection for handling FC frame encapsulation,\n         de-encapsulation, and transmission of FCIP frames on the\n         connection.')
fcipTcpConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 6, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"), (0, "FCIP-MGMT-MIB", "fcipLinkIndex"), (0, "FCIP-MGMT-MIB", "fcipTcpConnLocalPort"), (0, "FCIP-MGMT-MIB", "fcipTcpConnRemPort"))
if mibBuilder.loadTexts: fcipTcpConnEntry.setDescription('A conceptual row of the FCIP TCP Connection table containing\n         information about a particular TCP connection.')
fcipTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 6, 1, 1), InetPortNumber())
if mibBuilder.loadTexts: fcipTcpConnLocalPort.setDescription('The local port number for this TCP connection.')
fcipTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 6, 1, 2), InetPortNumber())
if mibBuilder.loadTexts: fcipTcpConnRemPort.setDescription('The remote port number for this TCP connection.')
fcipTcpConnRWSize = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipTcpConnRWSize.setDescription('The default maximum TCP Receiver Window size for this TCP\n         connection.')
fcipTcpConnMSS = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipTcpConnMSS.setDescription('The TCP Maximum Segment Size (MSS) for this TCP connection.')
fcipDynamicRouteTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 7), )
if mibBuilder.loadTexts: fcipDynamicRouteTable.setDescription('Information about dynamically discovered routing\n         information.  The FCIP device may use the SLPv2 protocol in\n         conjunction with other protocols (say, FSPF) for dynamically\n         discovering other FCIP entities and may populate this table\n         with FCIP link information for each Destination Address\n         Identifier.')
fcipDynamicRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 7, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"), (0, "FCIP-MGMT-MIB", "fcipDynamicRouteDID"))
if mibBuilder.loadTexts: fcipDynamicRouteEntry.setDescription('A conceptual row of the FCIP Dynamic Route Table containing\n         information about a particular FCIP route.')
fcipDynamicRouteDID = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 7, 1, 1), FcipDomainIdInOctetForm())
if mibBuilder.loadTexts: fcipDynamicRouteDID.setDescription('8-bit ID of a Fibre Channel Domain that is reachable from\n         this FCIP device.')
fcipDynamicRouteLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipDynamicRouteLinkIndex.setDescription('The FCIP Link used to reach the domain specified by the\n\n\n\n         corresponding instance of fcipDynamicRouteDID.  The link\n         identified by a value of this object is the same FCIP link\n         as identified by the same value of fcipLinkIndex for the\n         same FCIP entity.')
fcipStaticRouteTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 8), )
if mibBuilder.loadTexts: fcipStaticRouteTable.setDescription('Information about static route entries configured by the\n         Network Admin.  In the absence of dynamic discovery of\n         remote FCIP entities, the Network Manager will figure out\n         all remote FCIP devices that are reachable from this device\n         and populate this table with FCIP link information for each\n         Domain ID.  At any time, both static and dynamic routing\n         can be active, and an entry in the static route table for a\n         given DID takes precedence over the entry in the dynamic\n         route table for the same Domain ID.')
fcipStaticRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 8, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"), (0, "FCIP-MGMT-MIB", "fcipStaticRouteDID"))
if mibBuilder.loadTexts: fcipStaticRouteEntry.setDescription('A conceptual row of the FCIP Static Route Table containing\n         information about a particular FCIP route.  The values of\n         the read-create objects in this table are persistent across\n         system restarts.')
fcipStaticRouteDID = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 8, 1, 1), FcipDomainIdInOctetForm())
if mibBuilder.loadTexts: fcipStaticRouteDID.setDescription('8-bit ID of a Fibre Channel Domain that is reachable from\n         this FCIP device.')
fcipStaticRouteLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipStaticRouteLinkIndex.setDescription('The FCIP Link used to reach the domain specified by the\n         corresponding instance of fcipStaticRouteDID.  The link\n         identified by a value of this object is the same FCIP link\n         as identified by the same value of fcipLinkIndex for the\n         same FCIP entity.')
fcipStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcipStaticRouteStatus.setDescription('This object specifies the operational status of the row.\n\n         When a management station sets the status to active(1),\n         the values for the object fcipStaticRouteLinkIndex should be\n         supplied as part of the set request.\n\n         Setting the status to destroy(6) deletes the specified FCIP\n         static route entry from the table.')
fcipDiscoveryDomainTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 9), )
if mibBuilder.loadTexts: fcipDiscoveryDomainTable.setDescription('Information about FCIP Discovery Domains.  Each FCIP\n         Discovery Domain is associated with one or more FCIP\n         entities.')
fcipDiscoveryDomainEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 9, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"), (0, "FCIP-MGMT-MIB", "fcipDiscoveryDomainIndex"))
if mibBuilder.loadTexts: fcipDiscoveryDomainEntry.setDescription('A conceptual row of the FCIP Discovery Domain Table\n         containing information about a particular FCIP Discovery\n         Domain that is associated with one or more FCIP entities.\n         The values of the read-write object fcipDiscoveryDomainName\n         are persistent across system restarts.')
fcipDiscoveryDomainIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: fcipDiscoveryDomainIndex.setDescription('An integer that uniquely identifies an FCIP Discovery Domain\n         associated with this FCIP entity.')
fcipDiscoveryDomainName = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcipDiscoveryDomainName.setDescription('The name of this FCIP Discovery Domain.')
fcipLinkErrorsTable = MibTable((1, 3, 6, 1, 2, 1, 224, 1, 1, 10), )
if mibBuilder.loadTexts: fcipLinkErrorsTable.setDescription('A list of error counters for FCIP Links.  Each counter\n         records the number of times a particular error happened that\n         caused a TCP connection to close down.')
fcipLinkErrorsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1), ).setIndexNames((0, "FCIP-MGMT-MIB", "fcipEntityId"), (0, "FCIP-MGMT-MIB", "fcipLinkIndex"))
if mibBuilder.loadTexts: fcipLinkErrorsEntry.setDescription('A conceptual row of the FCIP Link Errors Table containing\n         error counters for an FCIP Link.')
fcipLinkFcipLossofFcSynchs = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipLossofFcSynchs.setDescription('The number of times FC synchronization was lost on this FCIP\n\n\n\n         Link.  The last discontinuity of this counter is indicated\n         by fcipLinkCreateTime.')
fcipLinkFcipEncapErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipEncapErrors.setDescription('The number of FCIP frames received with encapsulation errors\n         such as improper header, format, or length.  The last\n         discontinuity of this counter is indicated by\n         fcipLinkCreateTime.')
fcipLinkFcipNotReceivedSfResps = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipNotReceivedSfResps.setDescription('The number of times an FCIP Special Frame Response was\n         expected but not received on this FCIP Link.  The last\n         discontinuity of this counter is indicated by\n         fcipLinkCreateTime.')
fcipLinkFcipSfRespMismatches = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipSfRespMismatches.setDescription('The number of times FCIP Special Frame Bytes mismatch\n         happened on this FCIP Link.  The last discontinuity of this\n         counter is indicated by fcipLinkCreateTime.')
fcipLinkFcipSfInvalidNonces = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipSfInvalidNonces.setDescription('The number of times FCIP Special Frame Invalid Connection\n         Nonce happened on this FCIP Link.  The last discontinuity\n         of this counter is indicated by fcipLinkCreateTime.')
fcipLinkFcipReceivedSfDuplicates = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipReceivedSfDuplicates.setDescription('The number of times duplicate FCIP Special Frames were\n         received on this FCIP Link.  The last discontinuity of this\n         counter is indicated by fcipLinkCreateTime.')
fcipLinkFcipSfInvalidWWNs = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipSfInvalidWWNs.setDescription('The number of times FCIP Special Frames with invalid\n         destination FC Fabric Entity WWN were received on this FCIP\n         Link.  The last discontinuity of this counter is indicated\n         by fcipLinkCreateTime.')
fcipLinkFcipBB2LkaTimeOuts = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipBB2LkaTimeOuts.setDescription('The number of FC Keep Alive Time-outs that occurred on\n         this FCIP Link.  The last discontinuity of this counter\n         is indicated by fcipLinkCreateTime.')
fcipLinkFcipSntpExpiredTimeStamps = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkFcipSntpExpiredTimeStamps.setDescription('The number of frames discarded due to an expired Simple\n         Network Time Protocol (SNTP) timestamp on this FCIP Link.\n         The last discontinuity of this counter is indicated by\n         fcipLinkCreateTime.')
fcipLinkTcpTooManyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkTcpTooManyErrors.setDescription('The number of TCP connections that closed down on this\n         FCIP Link due to too many errors on the connection.  The\n         last discontinuity of this counter is indicated by\n\n\n\n         fcipLinkCreateTime.')
fcipLinkTcpExcessiveDroppedDatagrams = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkTcpExcessiveDroppedDatagrams.setDescription('The number of TCP connections that closed down on this\n         FCIP Link due to an excessive number of dropped FCIP\n         packets.  The last discontinuity of this counter is\n         indicated by fcipLinkCreateTime.')
fcipLinkTcpSaParamMismatches = MibTableColumn((1, 3, 6, 1, 2, 1, 224, 1, 1, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipLinkTcpSaParamMismatches.setDescription('The number of times TCP connections with Security\n         Association parameter mismatches were closed down on this\n         FCIP Link.  The last discontinuity of this counter is\n         indicated by fcipLinkCreateTime.')
fcipCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 224, 2, 1))
fcipGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 224, 2, 2))
fcipCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 224, 2, 1, 1)).setObjects(*(("FCIP-MGMT-MIB", "fcipEntityScalarGroup"), ("FCIP-MGMT-MIB", "fcipEntityInstanceGroup"), ("FCIP-MGMT-MIB", "fcipLinkGroup"), ("FCIP-MGMT-MIB", "fcipTcpConnGroup"), ("FCIP-MGMT-MIB", "fcipDiscoveryDomainGroup"), ("FCIP-MGMT-MIB", "fcipLinkErrorsGroup"), ("FCIP-MGMT-MIB", "fcipDynamicRouteGroup"), ("FCIP-MGMT-MIB", "fcipStaticRouteGroup"),))
if mibBuilder.loadTexts: fcipCompliance.setDescription('Compliance statement for FCIP MIB.')
fcipEntityScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 1)).setObjects(*(("FCIP-MGMT-MIB", "fcipDynIpConfType"), ("FCIP-MGMT-MIB", "fcipDeviceWWN"), ("FCIP-MGMT-MIB", "fcipEntitySACKOption"),))
if mibBuilder.loadTexts: fcipEntityScalarGroup.setDescription('Collection of scalar objects applicable to all FCIP\n         instances.')
fcipEntityInstanceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 2)).setObjects(*(("FCIP-MGMT-MIB", "fcipEntityName"), ("FCIP-MGMT-MIB", "fcipEntityAddressType"), ("FCIP-MGMT-MIB", "fcipEntityAddress"), ("FCIP-MGMT-MIB", "fcipEntityTcpConnPort"), ("FCIP-MGMT-MIB", "fcipEntitySeqNumWrap"), ("FCIP-MGMT-MIB", "fcipEntityPHBSupport"), ("FCIP-MGMT-MIB", "fcipEntityStatus"),))
if mibBuilder.loadTexts: fcipEntityInstanceGroup.setDescription('A collection of objects providing information about FCIP\n         instances.')
fcipLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 3)).setObjects(*(("FCIP-MGMT-MIB", "fcipLinkIfIndex"), ("FCIP-MGMT-MIB", "fcipLinkCost"), ("FCIP-MGMT-MIB", "fcipLinkLocalFcipEntityMode"), ("FCIP-MGMT-MIB", "fcipLinkLocalFcipEntityAddressType"), ("FCIP-MGMT-MIB", "fcipLinkLocalFcipEntityAddress"), ("FCIP-MGMT-MIB", "fcipLinkRemFcipEntityWWN"), ("FCIP-MGMT-MIB", "fcipLinkRemFcipEntityId"), ("FCIP-MGMT-MIB", "fcipLinkRemFcipEntityAddressType"), ("FCIP-MGMT-MIB", "fcipLinkRemFcipEntityAddress"), ("FCIP-MGMT-MIB", "fcipLinkStatus"), ("FCIP-MGMT-MIB", "fcipLinkCreateTime"),))
if mibBuilder.loadTexts: fcipLinkGroup.setDescription('A collection of objects providing information about FCIP\n         Links.')
fcipTcpConnGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 4)).setObjects(*(("FCIP-MGMT-MIB", "fcipTcpConnRWSize"), ("FCIP-MGMT-MIB", "fcipTcpConnMSS"),))
if mibBuilder.loadTexts: fcipTcpConnGroup.setDescription('A collection of objects providing information about FCIP\n         TCP connections.')
fcipDiscoveryDomainGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 5)).setObjects(*(("FCIP-MGMT-MIB", "fcipDiscoveryDomainName"),))
if mibBuilder.loadTexts: fcipDiscoveryDomainGroup.setDescription('A collection of objects providing information about FCIP\n         Discovery Domains.')
fcipLinkErrorsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 6)).setObjects(*(("FCIP-MGMT-MIB", "fcipLinkFcipLossofFcSynchs"), ("FCIP-MGMT-MIB", "fcipLinkFcipEncapErrors"), ("FCIP-MGMT-MIB", "fcipLinkFcipNotReceivedSfResps"), ("FCIP-MGMT-MIB", "fcipLinkFcipSfRespMismatches"), ("FCIP-MGMT-MIB", "fcipLinkFcipSfInvalidNonces"), ("FCIP-MGMT-MIB", "fcipLinkFcipReceivedSfDuplicates"), ("FCIP-MGMT-MIB", "fcipLinkFcipSfInvalidWWNs"), ("FCIP-MGMT-MIB", "fcipLinkFcipBB2LkaTimeOuts"), ("FCIP-MGMT-MIB", "fcipLinkFcipSntpExpiredTimeStamps"), ("FCIP-MGMT-MIB", "fcipLinkTcpTooManyErrors"), ("FCIP-MGMT-MIB", "fcipLinkTcpExcessiveDroppedDatagrams"), ("FCIP-MGMT-MIB", "fcipLinkTcpSaParamMismatches"),))
if mibBuilder.loadTexts: fcipLinkErrorsGroup.setDescription('A collection of objects providing information about FCIP\n         link errors.')
fcipDynamicRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 7)).setObjects(*(("FCIP-MGMT-MIB", "fcipDynamicRouteLinkIndex"),))
if mibBuilder.loadTexts: fcipDynamicRouteGroup.setDescription('A collection of objects providing information about FCIP\n         dynamic routes.')
fcipStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 224, 2, 2, 8)).setObjects(*(("FCIP-MGMT-MIB", "fcipStaticRouteLinkIndex"), ("FCIP-MGMT-MIB", "fcipStaticRouteStatus"),))
if mibBuilder.loadTexts: fcipStaticRouteGroup.setDescription('A collection of objects providing information about FCIP\n         static routes.')
mibBuilder.exportSymbols("FCIP-MGMT-MIB", fcipEntityStatus=fcipEntityStatus, fcipLinkGroup=fcipLinkGroup, fcipConfig=fcipConfig, fcipLinkCreateTime=fcipLinkCreateTime, fcipEntityScalarGroup=fcipEntityScalarGroup, fcipLinkRemFcipEntityAddress=fcipLinkRemFcipEntityAddress, fcipStaticRouteStatus=fcipStaticRouteStatus, fcipLinkFcipSfRespMismatches=fcipLinkFcipSfRespMismatches, fcipLinkTcpExcessiveDroppedDatagrams=fcipLinkTcpExcessiveDroppedDatagrams, fcipEntityName=fcipEntityName, fcipLinkRemFcipEntityId=fcipLinkRemFcipEntityId, fcipTcpConnTable=fcipTcpConnTable, fcipCompliance=fcipCompliance, fcipLinkFcipLossofFcSynchs=fcipLinkFcipLossofFcSynchs, fcipLinkTcpSaParamMismatches=fcipLinkTcpSaParamMismatches, fcipLinkErrorsGroup=fcipLinkErrorsGroup, fcipCompliances=fcipCompliances, fcipDynamicRouteTable=fcipDynamicRouteTable, fcipMIB=fcipMIB, fcipStaticRouteTable=fcipStaticRouteTable, fcipLinkFcipBB2LkaTimeOuts=fcipLinkFcipBB2LkaTimeOuts, fcipLinkFcipReceivedSfDuplicates=fcipLinkFcipReceivedSfDuplicates, fcipEntitySeqNumWrap=fcipEntitySeqNumWrap, fcipLinkEntry=fcipLinkEntry, fcipDiscoveryDomainEntry=fcipDiscoveryDomainEntry, fcipDynamicRouteGroup=fcipDynamicRouteGroup, fcipDiscoveryDomainGroup=fcipDiscoveryDomainGroup, FcipDomainIdInOctetForm=FcipDomainIdInOctetForm, fcipStaticRouteEntry=fcipStaticRouteEntry, fcipDiscoveryDomainIndex=fcipDiscoveryDomainIndex, fcipLinkFcipSfInvalidWWNs=fcipLinkFcipSfInvalidWWNs, fcipEntityAddressType=fcipEntityAddressType, fcipEntityId=fcipEntityId, fcipLinkLocalFcipEntityMode=fcipLinkLocalFcipEntityMode, fcipEntitySACKOption=fcipEntitySACKOption, fcipLinkIndex=fcipLinkIndex, FcipEntityMode=FcipEntityMode, fcipLinkLocalFcipEntityAddressType=fcipLinkLocalFcipEntityAddressType, fcipStaticRouteGroup=fcipStaticRouteGroup, fcipEntityInstanceTable=fcipEntityInstanceTable, fcipTcpConnRemPort=fcipTcpConnRemPort, fcipDynIpConfType=fcipDynIpConfType, fcipConformance=fcipConformance, fcipDiscoveryDomainTable=fcipDiscoveryDomainTable, fcipLinkFcipSntpExpiredTimeStamps=fcipLinkFcipSntpExpiredTimeStamps, fcipGroups=fcipGroups, fcipDiscoveryDomainName=fcipDiscoveryDomainName, fcipLinkErrorsEntry=fcipLinkErrorsEntry, fcipLinkRemFcipEntityWWN=fcipLinkRemFcipEntityWWN, fcipStaticRouteDID=fcipStaticRouteDID, fcipLinkCost=fcipLinkCost, fcipLinkRemFcipEntityAddressType=fcipLinkRemFcipEntityAddressType, FcipEntityId=FcipEntityId, fcipDynamicRouteEntry=fcipDynamicRouteEntry, fcipLinkErrorsTable=fcipLinkErrorsTable, fcipEntityInstanceGroup=fcipEntityInstanceGroup, fcipLinkTcpTooManyErrors=fcipLinkTcpTooManyErrors, fcipTcpConnGroup=fcipTcpConnGroup, fcipObjects=fcipObjects, fcipTcpConnLocalPort=fcipTcpConnLocalPort, fcipEntityAddress=fcipEntityAddress, fcipStaticRouteLinkIndex=fcipStaticRouteLinkIndex, fcipEntityTcpConnPort=fcipEntityTcpConnPort, fcipLinkStatus=fcipLinkStatus, fcipDynamicRouteLinkIndex=fcipDynamicRouteLinkIndex, fcipLinkLocalFcipEntityAddress=fcipLinkLocalFcipEntityAddress, PYSNMP_MODULE_ID=fcipMIB, fcipEntityInstanceEntry=fcipEntityInstanceEntry, fcipTcpConnEntry=fcipTcpConnEntry, fcipTcpConnRWSize=fcipTcpConnRWSize, fcipTcpConnMSS=fcipTcpConnMSS, fcipDynamicRouteDID=fcipDynamicRouteDID, fcipLinkIfIndex=fcipLinkIfIndex, fcipLinkFcipEncapErrors=fcipLinkFcipEncapErrors, fcipLinkFcipNotReceivedSfResps=fcipLinkFcipNotReceivedSfResps, fcipLinkFcipSfInvalidNonces=fcipLinkFcipSfInvalidNonces, fcipDeviceWWN=fcipDeviceWWN, fcipLinkTable=fcipLinkTable, fcipEntityPHBSupport=fcipEntityPHBSupport)
