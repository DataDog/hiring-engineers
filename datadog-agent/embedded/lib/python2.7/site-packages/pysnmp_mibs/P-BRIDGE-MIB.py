#
# PySNMP MIB module P-BRIDGE-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/P-BRIDGE-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:23:25 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
( dot1dTp, dot1dBasePortEntry, dot1dTpPort, dot1dBridge, dot1dBasePort, ) = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dTp", "dot1dBasePortEntry", "dot1dTpPort", "dot1dBridge", "dot1dBasePort")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( Bits, ObjectIdentity, Integer32, Counter32, NotificationType, ModuleIdentity, iso, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, MibIdentifier, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Integer32", "Counter32", "NotificationType", "ModuleIdentity", "iso", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "MibIdentifier", "Unsigned32")
( TruthValue, DisplayString, MacAddress, TextualConvention, TimeInterval, ) = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention", "TimeInterval")
pBridgeMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 17, 6)).setRevisions(("2006-01-09 00:00", "1999-08-25 00:00",))
if mibBuilder.loadTexts: pBridgeMIB.setLastUpdated('200601090000Z')
if mibBuilder.loadTexts: pBridgeMIB.setOrganization('IETF Bridge MIB Working Group')
if mibBuilder.loadTexts: pBridgeMIB.setContactInfo('Email:  bridge-mib@ietf.org\n                 ietfmibs@ops.ietf.org\n\n                 David Levi\n         Postal: Nortel Networks\n                 4655 Great America Parkway\n                 Santa Clara, CA 95054\n                 USA\n                 Phone: +1 865 686 0432\n                 Email: dlevi@nortel.com\n\n                 David Harrington\n         Postal: Effective Software\n                 50 Harding Rd.\n                 Portsmouth, NH 03801\n                 USA\n                 Phone: +1 603 436 8634\n                 Email: ietfdbh@comcast.net\n\n                 Les Bell\n         Postal: Hemel Hempstead, Herts. HP2 7YU\n                 UK\n          Email: elbell@ntlworld.com\n\n                 Vivian Ngai\n\n\n\n          Email: vivian_ngai@acm.org\n\n                 Andrew Smith\n         Postal: Beijing Harbour Networks\n                 Jiuling Building\n                 21 North Xisanhuan Ave.\n                 Beijing, 100089\n                 PRC\n            Fax: +1 415 345 1827\n          Email: ah_smith@acm.org\n\n                 Paul Langille\n         Postal: Newbridge Networks\n                 5 Corporate Drive\n                 Andover, MA 01810\n                 USA\n          Phone: +1 978 691 4665\n          Email: langille@newbridge.com\n\n                 Anil Rijhsinghani\n         Postal: Accton Technology Corporation\n                 5 Mount Royal Ave\n                 Marlboro, MA 01752\n                 USA\n          Phone:\n          Email: anil@accton.com\n\n                 Keith McCloghrie\n         Postal: Cisco Systems, Inc.\n                 170 West Tasman Drive\n                 San Jose, CA 95134-1706\n                 USA\n          Phone: +1 408 526 5260\n          Email: kzm@cisco.com')
if mibBuilder.loadTexts: pBridgeMIB.setDescription('The Bridge MIB Extension module for managing Priority\n        and Multicast Filtering, defined by IEEE 802.1D-1998,\n        including Restricted Group Registration defined by\n        IEEE 802.1t-2001.\n\n        Copyright (C) The Internet Society (2006).  This version of\n        this MIB module is part of RFC 4363; See the RFC itself for\n        full legal notices.')
pBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1))
class EnabledStatus(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2,))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2),)

dot1dExtBase = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 1))
dot1dPriority = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 2))
dot1dGarp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 3))
dot1dGmrp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 1, 4))
dot1dDeviceCapabilities = MibScalar((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 1), Bits().clone(namedValues=NamedValues(("dot1dExtendedFilteringServices", 0), ("dot1dTrafficClasses", 1), ("dot1qStaticEntryIndividualPort", 2), ("dot1qIVLCapable", 3), ("dot1qSVLCapable", 4), ("dot1qHybridCapable", 5), ("dot1qConfigurablePvidTagging", 6), ("dot1dLocalVlanCapable", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setDescription('Indicates the optional parts of IEEE 802.1D and 802.1Q\n        that are implemented by this device and are manageable\n        through this MIB.  Capabilities that are allowed on a\n        per-port basis are indicated in dot1dPortCapabilities.\n\n        dot1dExtendedFilteringServices(0),\n                              -- can perform filtering of\n                              -- individual multicast addresses\n                              -- controlled by GMRP.\n        dot1dTrafficClasses(1),\n                              -- can map user priority to\n                              -- multiple traffic classes.\n        dot1qStaticEntryIndividualPort(2),\n                              -- dot1qStaticUnicastReceivePort &\n                              -- dot1qStaticMulticastReceivePort\n                              -- can represent non-zero entries.\n        dot1qIVLCapable(3),   -- Independent VLAN Learning (IVL).\n        dot1qSVLCapable(4),   -- Shared VLAN Learning (SVL).\n        dot1qHybridCapable(5),\n                              -- both IVL & SVL simultaneously.\n        dot1qConfigurablePvidTagging(6),\n                              -- whether the implementation\n                              -- supports the ability to\n                              -- override the default PVID\n                              -- setting and its egress status\n                              -- (VLAN-Tagged or Untagged) on\n                              -- each port.\n        dot1dLocalVlanCapable(7)\n                              -- can support multiple local\n                              -- bridges, outside of the scope\n                              -- of 802.1Q defined VLANs.')
dot1dTrafficClassesEnabled = MibScalar((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTrafficClassesEnabled.setDescription('The value true(1) indicates that Traffic Classes are\n        enabled on this bridge.  When false(2), the bridge\n        operates with a single priority level for all traffic.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dGmrpStatus = MibScalar((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dGmrpStatus.setDescription('The administrative status requested by management for\n        GMRP.  The value enabled(1) indicates that GMRP should\n        be enabled on this device, in all VLANs, on all ports\n        for which it has not been specifically disabled.  When\n        disabled(2), GMRP is disabled, in all VLANs and on all\n        ports, and all GMRP packets will be forwarded\n        transparently.  This object affects both Applicant and\n        Registrar state machines.  A transition from disabled(2)\n        to enabled(1) will cause a reset of all GMRP state\n        machines on all ports.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortCapabilitiesTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 4), )
if mibBuilder.loadTexts: dot1dPortCapabilitiesTable.setDescription('A table that contains capabilities information about\n        every port that is associated with this bridge.')
dot1dPortCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 4, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortCapabilitiesEntry"))
dot1dPortCapabilitiesEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortCapabilitiesEntry.setDescription('A set of capabilities information about this port\n        indexed by dot1dBasePort.')
dot1dPortCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 1, 4, 1, 1), Bits().clone(namedValues=NamedValues(("dot1qDot1qTagging", 0), ("dot1qConfigurableAcceptableFrameTypes", 1), ("dot1qIngressFiltering", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortCapabilities.setDescription('Indicates the parts of IEEE 802.1D and 802.1Q that are\n        optional on a per-port basis, that are implemented by\n        this device, and that are manageable through this MIB.\n\n        dot1qDot1qTagging(0), -- supports 802.1Q VLAN tagging of\n                              -- frames and GVRP.\n        dot1qConfigurableAcceptableFrameTypes(1),\n                              -- allows modified values of\n                              -- dot1qPortAcceptableFrameTypes.\n        dot1qIngressFiltering(2)\n                              -- supports the discarding of any\n                              -- frame received on a Port whose\n                              -- VLAN classification does not\n                              -- include that Port in its Member\n                              -- set.')
dot1dPortPriorityTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1), )
if mibBuilder.loadTexts: dot1dPortPriorityTable.setDescription('A table that contains information about every port that\n        is associated with this transparent bridge.')
dot1dPortPriorityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortPriorityEntry"))
dot1dPortPriorityEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortPriorityEntry.setDescription('A list of Default User Priorities for each port of a\n        transparent bridge.  This is indexed by dot1dBasePort.')
dot1dPortDefaultUserPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortDefaultUserPriority.setDescription('The default ingress User Priority for this port.  This\n        only has effect on media, such as Ethernet, that do not\n        support native User Priority.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortNumTrafficClasses = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortNumTrafficClasses.setDescription('The number of egress traffic classes supported on this\n        port.  This object may optionally be read-only.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dUserPriorityRegenTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2), )
if mibBuilder.loadTexts: dot1dUserPriorityRegenTable.setDescription('A list of Regenerated User Priorities for each received\n        User Priority on each port of a bridge.  The Regenerated\n        User Priority value may be used to index the Traffic\n        Class Table for each input port.  This only has effect\n        on media that support native User Priority.  The default\n        values for Regenerated User Priorities are the same as\n        the User Priorities.')
dot1dUserPriorityRegenEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "P-BRIDGE-MIB", "dot1dUserPriority"))
if mibBuilder.loadTexts: dot1dUserPriorityRegenEntry.setDescription('A mapping of incoming User Priority to a Regenerated\n        User Priority.')
dot1dUserPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7)))
if mibBuilder.loadTexts: dot1dUserPriority.setDescription('The User Priority for a frame received on this port.')
dot1dRegenUserPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dRegenUserPriority.setDescription('The Regenerated User Priority that the incoming User\n\n\n\n        Priority is mapped to for this port.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dTrafficClassTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3), )
if mibBuilder.loadTexts: dot1dTrafficClassTable.setDescription('A table mapping evaluated User Priority to Traffic\n        Class, for forwarding by the bridge.  Traffic class is a\n        number in the range (0..(dot1dPortNumTrafficClasses-1)).')
dot1dTrafficClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "P-BRIDGE-MIB", "dot1dTrafficClassPriority"))
if mibBuilder.loadTexts: dot1dTrafficClassEntry.setDescription('User Priority to Traffic Class mapping.')
dot1dTrafficClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7)))
if mibBuilder.loadTexts: dot1dTrafficClassPriority.setDescription('The Priority value determined for the received frame.\n        This value is equivalent to the priority indicated in\n        the tagged frame received, or one of the evaluated\n        priorities, determined according to the media-type.\n\n\n\n        For untagged frames received from Ethernet media, this\n        value is equal to the dot1dPortDefaultUserPriority value\n        for the ingress port.\n\n        For untagged frames received from non-Ethernet media,\n        this value is equal to the dot1dRegenUserPriority value\n        for the ingress port and media-specific user priority.')
dot1dTrafficClass = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTrafficClass.setDescription('The Traffic Class the received frame is mapped to.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortOutboundAccessPriorityTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 4), )
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityTable.setDescription('A table mapping Regenerated User Priority to Outbound\n        Access Priority.  This is a fixed mapping for all port\n        types, with two options for 802.5 Token Ring.')
dot1dPortOutboundAccessPriorityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "P-BRIDGE-MIB", "dot1dRegenUserPriority"))
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriorityEntry.setDescription('Regenerated User Priority to Outbound Access Priority\n        mapping.')
dot1dPortOutboundAccessPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortOutboundAccessPriority.setDescription('The Outbound Access Priority the received frame is\n        mapped to.')
dot1dPortGarpTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1), )
if mibBuilder.loadTexts: dot1dPortGarpTable.setDescription('A table of GARP control information about every bridge\n        port.  This is indexed by dot1dBasePort.')
dot1dPortGarpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortGarpEntry"))
dot1dPortGarpEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortGarpEntry.setDescription('GARP control information for a bridge port.')
dot1dPortGarpJoinTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1, 1), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpJoinTime.setDescription('The GARP Join time, in centiseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortGarpLeaveTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1, 2), TimeInterval().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveTime.setDescription('The GARP Leave time, in centiseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortGarpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 3, 1, 1, 3), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveAllTime.setDescription('The GARP LeaveAll time, in centiseconds.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortGmrpTable = MibTable((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1), )
if mibBuilder.loadTexts: dot1dPortGmrpTable.setDescription('A table of GMRP control and status information about\n        every bridge port.  Augments the dot1dBasePortTable.')
dot1dPortGmrpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("P-BRIDGE-MIB", "dot1dPortGmrpEntry"))
dot1dPortGmrpEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1dPortGmrpEntry.setDescription('GMRP control and status information for a bridge port.')
dot1dPortGmrpStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGmrpStatus.setDescription('The administrative state of GMRP operation on this port.  The\n        value enabled(1) indicates that GMRP is enabled on this port\n        in all VLANs as long as dot1dGmrpStatus is also enabled(1).\n        A value of disabled(2) indicates that GMRP is disabled on\n        this port in all VLANs: any GMRP packets received will\n        be silently discarded, and no GMRP registrations will be\n        propagated from other ports.  Setting this to a value of\n        enabled(1) will be stored by the agent but will only take\n        effect on the GMRP protocol operation if dot1dGmrpStatus\n        also indicates the value enabled(1).  This object affects\n        all GMRP Applicant and Registrar state machines on this\n        port.  A transition from disabled(2) to enabled(1) will\n        cause a reset of all GMRP state machines on this port.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dPortGmrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpFailedRegistrations.setDescription('The total number of failed GMRP registrations, for any\n        reason, in all VLANs, on this port.')
dot1dPortGmrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpLastPduOrigin.setDescription('The Source MAC Address of the last GMRP message\n        received on this port.')
dot1dPortRestrictedGroupRegistration = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 6, 1, 4, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortRestrictedGroupRegistration.setDescription('The state of Restricted Group Registration on this port.\n         If the value of this control is true(1), then creation\n         of a new dynamic entry is permitted only if there is a\n         Static Filtering Entry for the VLAN concerned, in which\n         the Registrar Administrative Control value is Normal\n         Registration.\n\n        The value of this object MUST be retained across\n        reinitializations of the management system.')
dot1dTpHCPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 5), )
if mibBuilder.loadTexts: dot1dTpHCPortTable.setDescription('A table that contains information about every high-\n        capacity port that is associated with this transparent\n        bridge.')
dot1dTpHCPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 5, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpHCPortEntry.setDescription('Statistics information for each high-capacity port of a\n        transparent bridge.')
dot1dTpHCPortInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpHCPortInFrames.setDescription('The number of frames that have been received by this\n        port from its segment.  Note that a frame received on\n        the interface corresponding to this port is only counted\n        by this object if and only if it is for a protocol being\n        processed by the local bridging function, including\n        bridge management frames.')
dot1dTpHCPortOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpHCPortOutFrames.setDescription('The number of frames that have been transmitted by this\n        port to its segment.  Note that a frame transmitted on\n        the interface corresponding to this port is only counted\n        by this object if and only if it is for a protocol being\n        processed by the local bridging function, including\n        bridge management frames.')
dot1dTpHCPortInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpHCPortInDiscards.setDescription('Count of valid frames that have been received by this\n        port from its segment that were discarded (i.e.,\n        filtered) by the Forwarding Process.')
dot1dTpPortOverflowTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 6), )
if mibBuilder.loadTexts: dot1dTpPortOverflowTable.setDescription('A table that contains the most-significant bits of\n        statistics counters for ports that are associated with this\n        transparent bridge that are on high-capacity interfaces, as\n        defined in the conformance clauses for this table.  This table\n        is provided as a way to read 64-bit counters for agents that\n        support only SNMPv1.\n\n        Note that the reporting of most-significant and\n        least-significant counter bits separately runs the risk of\n        missing an overflow of the lower bits in the interval between\n        sampling.  The manager must be aware of this possibility, even\n        within the same varbindlist, when interpreting the results of\n        a request or asynchronous notification.')
dot1dTpPortOverflowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 6, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpPortOverflowEntry.setDescription('The most significant bits of statistics counters for a high-\n        capacity interface of a transparent bridge.  Each object is\n        associated with a corresponding object in dot1dTpPortTable\n        that indicates the least significant bits of the counter.')
dot1dTpPortInOverflowFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInOverflowFrames.setDescription('The number of times the associated dot1dTpPortInFrames\n        counter has overflowed.')
dot1dTpPortOutOverflowFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortOutOverflowFrames.setDescription('The number of times the associated dot1dTpPortOutFrames\n        counter has overflowed.')
dot1dTpPortInOverflowDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInOverflowDiscards.setDescription('The number of times the associated\n        dot1dTpPortInDiscards counter has overflowed.')
pBridgeConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 2))
pBridgeGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 2, 1))
pBridgeCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 6, 2, 2))
pBridgeExtCapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 1)).setObjects(*(("P-BRIDGE-MIB", "dot1dDeviceCapabilities"), ("P-BRIDGE-MIB", "dot1dPortCapabilities"),))
if mibBuilder.loadTexts: pBridgeExtCapGroup.setDescription('A collection of objects indicating the optional\n        capabilities of the device.')
pBridgeDeviceGmrpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 2)).setObjects(*(("P-BRIDGE-MIB", "dot1dGmrpStatus"),))
if mibBuilder.loadTexts: pBridgeDeviceGmrpGroup.setDescription('A collection of objects providing device-level control\n        for the Multicast Filtering extended bridge services.')
pBridgeDevicePriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 3)).setObjects(*(("P-BRIDGE-MIB", "dot1dTrafficClassesEnabled"),))
if mibBuilder.loadTexts: pBridgeDevicePriorityGroup.setDescription('A collection of objects providing device-level control\n        for the Priority services.')
pBridgeDefaultPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 4)).setObjects(*(("P-BRIDGE-MIB", "dot1dPortDefaultUserPriority"),))
if mibBuilder.loadTexts: pBridgeDefaultPriorityGroup.setDescription('A collection of objects defining the User Priority\n        applicable to each port for media that do not support\n        native User Priority.')
pBridgeRegenPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 5)).setObjects(*(("P-BRIDGE-MIB", "dot1dRegenUserPriority"),))
if mibBuilder.loadTexts: pBridgeRegenPriorityGroup.setDescription('A collection of objects defining the User Priorities\n        applicable to each port for media that support native\n        User Priority.')
pBridgePriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 6)).setObjects(*(("P-BRIDGE-MIB", "dot1dPortNumTrafficClasses"), ("P-BRIDGE-MIB", "dot1dTrafficClass"),))
if mibBuilder.loadTexts: pBridgePriorityGroup.setDescription('A collection of objects defining the traffic classes\n        within a bridge for each evaluated User Priority.')
pBridgeAccessPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 7)).setObjects(*(("P-BRIDGE-MIB", "dot1dPortOutboundAccessPriority"),))
if mibBuilder.loadTexts: pBridgeAccessPriorityGroup.setDescription('A collection of objects defining the media-dependent\n        outbound access level for each priority.')
pBridgePortGarpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 8)).setObjects(*(("P-BRIDGE-MIB", "dot1dPortGarpJoinTime"), ("P-BRIDGE-MIB", "dot1dPortGarpLeaveTime"), ("P-BRIDGE-MIB", "dot1dPortGarpLeaveAllTime"),))
if mibBuilder.loadTexts: pBridgePortGarpGroup.setDescription('A collection of objects providing port level control\n        and status information for GARP operation.')
pBridgePortGmrpGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 9)).setObjects(*(("P-BRIDGE-MIB", "dot1dPortGmrpStatus"), ("P-BRIDGE-MIB", "dot1dPortGmrpFailedRegistrations"), ("P-BRIDGE-MIB", "dot1dPortGmrpLastPduOrigin"),))
if mibBuilder.loadTexts: pBridgePortGmrpGroup.setDescription('A collection of objects providing port level control\n        and status information for GMRP operation.')
pBridgeHCPortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 10)).setObjects(*(("P-BRIDGE-MIB", "dot1dTpHCPortInFrames"), ("P-BRIDGE-MIB", "dot1dTpHCPortOutFrames"), ("P-BRIDGE-MIB", "dot1dTpHCPortInDiscards"),))
if mibBuilder.loadTexts: pBridgeHCPortGroup.setDescription('A collection of objects providing 64-bit statistics\n         counters for high-capacity bridge ports.')
pBridgePortOverflowGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 11)).setObjects(*(("P-BRIDGE-MIB", "dot1dTpPortInOverflowFrames"), ("P-BRIDGE-MIB", "dot1dTpPortOutOverflowFrames"), ("P-BRIDGE-MIB", "dot1dTpPortInOverflowDiscards"),))
if mibBuilder.loadTexts: pBridgePortOverflowGroup.setDescription('A collection of objects providing overflow statistics\n        counters for high-capacity bridge ports.')
pBridgePortGmrpGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 17, 6, 2, 1, 12)).setObjects(*(("P-BRIDGE-MIB", "dot1dPortGmrpStatus"), ("P-BRIDGE-MIB", "dot1dPortGmrpFailedRegistrations"), ("P-BRIDGE-MIB", "dot1dPortGmrpLastPduOrigin"), ("P-BRIDGE-MIB", "dot1dPortRestrictedGroupRegistration"),))
if mibBuilder.loadTexts: pBridgePortGmrpGroup2.setDescription('A collection of objects providing port level control\n        and status information for GMRP operation.')
pBridgeCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 17, 6, 2, 2, 1)).setObjects(*(("P-BRIDGE-MIB", "pBridgeExtCapGroup"), ("P-BRIDGE-MIB", "pBridgeDeviceGmrpGroup"), ("P-BRIDGE-MIB", "pBridgeDevicePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeDefaultPriorityGroup"), ("P-BRIDGE-MIB", "pBridgeRegenPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeAccessPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePortGarpGroup"), ("P-BRIDGE-MIB", "pBridgePortGmrpGroup"), ("P-BRIDGE-MIB", "pBridgeHCPortGroup"), ("P-BRIDGE-MIB", "pBridgePortOverflowGroup"),))
if mibBuilder.loadTexts: pBridgeCompliance.setDescription('The compliance statement for device support of Priority\n        and Multicast Filtering extended bridging services.')
pBridgeCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 17, 6, 2, 2, 2)).setObjects(*(("P-BRIDGE-MIB", "pBridgeExtCapGroup"), ("P-BRIDGE-MIB", "pBridgeDeviceGmrpGroup"), ("P-BRIDGE-MIB", "pBridgeDevicePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeDefaultPriorityGroup"), ("P-BRIDGE-MIB", "pBridgeRegenPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePriorityGroup"), ("P-BRIDGE-MIB", "pBridgeAccessPriorityGroup"), ("P-BRIDGE-MIB", "pBridgePortGarpGroup"), ("P-BRIDGE-MIB", "pBridgePortGmrpGroup2"), ("P-BRIDGE-MIB", "pBridgeHCPortGroup"), ("P-BRIDGE-MIB", "pBridgePortOverflowGroup"),))
if mibBuilder.loadTexts: pBridgeCompliance2.setDescription('The compliance statement for device support of Priority\n        and Multicast Filtering extended bridging services.')
mibBuilder.exportSymbols("P-BRIDGE-MIB", dot1dPortCapabilitiesTable=dot1dPortCapabilitiesTable, dot1dPortGarpLeaveAllTime=dot1dPortGarpLeaveAllTime, pBridgeConformance=pBridgeConformance, dot1dTpHCPortInDiscards=dot1dTpHCPortInDiscards, dot1dRegenUserPriority=dot1dRegenUserPriority, dot1dTpPortOverflowEntry=dot1dTpPortOverflowEntry, pBridgePortGmrpGroup=pBridgePortGmrpGroup, pBridgePortGmrpGroup2=pBridgePortGmrpGroup2, PYSNMP_MODULE_ID=pBridgeMIB, dot1dPortGmrpStatus=dot1dPortGmrpStatus, dot1dGarp=dot1dGarp, dot1dExtBase=dot1dExtBase, dot1dTrafficClassEntry=dot1dTrafficClassEntry, dot1dUserPriorityRegenEntry=dot1dUserPriorityRegenEntry, dot1dPortCapabilitiesEntry=dot1dPortCapabilitiesEntry, dot1dTrafficClassesEnabled=dot1dTrafficClassesEnabled, dot1dPortGmrpLastPduOrigin=dot1dPortGmrpLastPduOrigin, dot1dTpHCPortEntry=dot1dTpHCPortEntry, dot1dPortGarpTable=dot1dPortGarpTable, dot1dPortGmrpTable=dot1dPortGmrpTable, dot1dPortGmrpEntry=dot1dPortGmrpEntry, pBridgeDevicePriorityGroup=pBridgeDevicePriorityGroup, pBridgeCompliances=pBridgeCompliances, pBridgePortGarpGroup=pBridgePortGarpGroup, dot1dPortPriorityEntry=dot1dPortPriorityEntry, dot1dTpPortOutOverflowFrames=dot1dTpPortOutOverflowFrames, dot1dPriority=dot1dPriority, pBridgeGroups=pBridgeGroups, dot1dPortDefaultUserPriority=dot1dPortDefaultUserPriority, pBridgeDefaultPriorityGroup=pBridgeDefaultPriorityGroup, dot1dPortCapabilities=dot1dPortCapabilities, dot1dTpPortInOverflowDiscards=dot1dTpPortInOverflowDiscards, dot1dPortPriorityTable=dot1dPortPriorityTable, pBridgeExtCapGroup=pBridgeExtCapGroup, pBridgeRegenPriorityGroup=pBridgeRegenPriorityGroup, pBridgeHCPortGroup=pBridgeHCPortGroup, dot1dGmrpStatus=dot1dGmrpStatus, dot1dPortGarpEntry=dot1dPortGarpEntry, pBridgePriorityGroup=pBridgePriorityGroup, pBridgeDeviceGmrpGroup=pBridgeDeviceGmrpGroup, dot1dUserPriorityRegenTable=dot1dUserPriorityRegenTable, pBridgePortOverflowGroup=pBridgePortOverflowGroup, pBridgeCompliance=pBridgeCompliance, pBridgeMIB=pBridgeMIB, dot1dPortGarpJoinTime=dot1dPortGarpJoinTime, dot1dTpPortInOverflowFrames=dot1dTpPortInOverflowFrames, EnabledStatus=EnabledStatus, dot1dTrafficClassTable=dot1dTrafficClassTable, dot1dTpHCPortTable=dot1dTpHCPortTable, dot1dDeviceCapabilities=dot1dDeviceCapabilities, dot1dTrafficClass=dot1dTrafficClass, pBridgeMIBObjects=pBridgeMIBObjects, pBridgeAccessPriorityGroup=pBridgeAccessPriorityGroup, dot1dTpHCPortOutFrames=dot1dTpHCPortOutFrames, dot1dPortRestrictedGroupRegistration=dot1dPortRestrictedGroupRegistration, dot1dTpPortOverflowTable=dot1dTpPortOverflowTable, pBridgeCompliance2=pBridgeCompliance2, dot1dUserPriority=dot1dUserPriority, dot1dTrafficClassPriority=dot1dTrafficClassPriority, dot1dPortOutboundAccessPriority=dot1dPortOutboundAccessPriority, dot1dTpHCPortInFrames=dot1dTpHCPortInFrames, dot1dPortGmrpFailedRegistrations=dot1dPortGmrpFailedRegistrations, dot1dPortGarpLeaveTime=dot1dPortGarpLeaveTime, dot1dGmrp=dot1dGmrp, dot1dPortNumTrafficClasses=dot1dPortNumTrafficClasses, dot1dPortOutboundAccessPriorityEntry=dot1dPortOutboundAccessPriorityEntry, dot1dPortOutboundAccessPriorityTable=dot1dPortOutboundAccessPriorityTable)
