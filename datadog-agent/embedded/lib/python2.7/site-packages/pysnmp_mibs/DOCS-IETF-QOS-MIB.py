#
# PySNMP MIB module DOCS-IETF-QOS-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/DOCS-IETF-QOS-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:09:59 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( ObjectIdentifier, OctetString, Integer, ) = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
( DscpOrAny, ) = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "DscpOrAny")
( ifIndex, InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ObjectGroup, NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
( TimeTicks, Bits, ModuleIdentity, mib_2, MibIdentifier, iso, NotificationType, Gauge32, Unsigned32, ObjectIdentity, IpAddress, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ) = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "ModuleIdentity", "mib-2", "MibIdentifier", "iso", "NotificationType", "Gauge32", "Unsigned32", "ObjectIdentity", "IpAddress", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
( MacAddress, DisplayString, TextualConvention, StorageType, RowStatus, TruthValue, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "StorageType", "RowStatus", "TruthValue", "TimeStamp")
docsIetfQosMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 127)).setRevisions(("2006-01-23 00:00",))
if mibBuilder.loadTexts: docsIetfQosMIB.setLastUpdated('200601230000Z')
if mibBuilder.loadTexts: docsIetfQosMIB.setOrganization('IETF IP over Cable Data Network (IPCDN)\n                     Working Group')
if mibBuilder.loadTexts: docsIetfQosMIB.setContactInfo('\n         Co-Author: Michael Patrick\n         Postal:    Motorola BCS\n                    111 Locke Drive\n                    Marlborough, MA 01752-7214\n                    U.S.A.\n         Phone:     +1 508 786 7563\n         E-mail:    michael.patrick@motorola.com\n\n         Co-Author: William Murwin\n         Postal:    Motorola BCS\n                    111 Locke Drive\n                    Marlborough, MA 01752-7214\n                    U.S.A.\n         Phone:     +1 508 786 7594\n         E-mail:    w.murwin@motorola.com\n\n         IETF IPCDN Working Group\n         General Discussion: ipcdn@ietf.org\n         Subscribe: http://www.ietf.org/mailman/listinfo/ipcdn\n         Archive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn\n         Co-chairs: Richard Woundy, Richard_Woundy@cable.comcast.com\n                    Jean-Francois Mule, jfm@cablelabs.com')
if mibBuilder.loadTexts: docsIetfQosMIB.setDescription('This is the management information for\n         Quality Of Service (QOS) for DOCSIS 1.1 and 2.0.\n         Copyright (C) The Internet Society (2006).  This version of\n         this MIB module is part of RFC 4323; see the RFC itself for\n         full legal notices.')
docsIetfQosNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 127, 0))
docsIetfQosMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 127, 1))
class DocsIetfQosRfMacIfDirection(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2,))
    namedValues = NamedValues(("downstream", 1), ("upstream", 2),)

class DocsIetfQosBitRate(Unsigned32, TextualConvention):
    displayHint = 'd'

class DocsIetfQosSchedulingType(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6),)

docsIetfQosPktClassTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 1), )
if mibBuilder.loadTexts: docsIetfQosPktClassTable.setDescription('This table describes the packet classification\n                    configured on the CM or CMTS.\n                    The model is that a packet either received\n                    as input from an interface or transmitted\n                    for output on an interface may be compared\n                    against an ordered list of rules pertaining to\n                    the packet contents.  Each rule is a row of this\n                    table.  A matching rule provides a Service Flow\n                    ID to which the packet is classified.\n                    All rules need to match for a packet to match\n                    a classifier.\n\n                    The objects in this row correspond to a set of\n                    Classifier Encoding parameters in a DOCSIS\n                    MAC management message.  The\n                    docsIetfQosPktClassBitMap indicates which\n                    particular parameters were present in the\n                    classifier as signaled in the DOCSIS message.\n                    If the referenced parameter was not present\n                    in the signaled DOCSIS 1.1 and 2.0 Classifier, the\n                    corresponding object in this row reports a\n                    value as specified in the DESCRIPTION section.')
docsIetfQosPktClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowId"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosPktClassId"))
if mibBuilder.loadTexts: docsIetfQosPktClassEntry.setDescription('An entry in this table provides a single packet\n                    classifier rule.  The index ifIndex is an ifType\n                    of docsCableMaclayer(127).')
docsIetfQosPktClassId = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,65535)))
if mibBuilder.loadTexts: docsIetfQosPktClassId.setDescription('Index assigned to packet classifier entry by\n                    the CMTS, which is unique per Service Flow.')
docsIetfQosPktClassDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 2), DocsIetfQosRfMacIfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassDirection.setDescription('Indicates the direction to which the classifier\n                    is applied.')
docsIetfQosPktClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassPriority.setDescription('The value specifies the order of evaluation\n                    of the classifiers.\n\n                    The higher the value, the higher the priority.\n                    The value of 0 is used as default in\n                    provisioned Service Flows Classifiers.\n                    The default value of 64 is used for dynamic\n                    Service Flow Classifiers.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the default\n                    value as defined above.')
docsIetfQosPktClassIpTosLow = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassIpTosLow.setDescription('The low value of a range of TOS byte values.\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value\n                    of 0.\n\n                    The IP TOS octet, as originally defined in RFC 791,\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  This object is defined as an 8-bit\n                    octet as per the DOCSIS Specification\n                    for packet classification.')
docsIetfQosPktClassIpTosHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassIpTosHigh.setDescription('The 8-bit high value of a range of TOS byte\n                    values.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the\n                    value of 0.\n\n                    The IP TOS octet as originally defined in RFC 791\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  This object is defined as an 8-bit\n                    octet as defined by the DOCSIS Specification\n                    for packet classification.')
docsIetfQosPktClassIpTosMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassIpTosMask.setDescription('The mask value is bitwise ANDed with TOS byte\n                    in an IP packet, and this value is used for\n                    range checking of TosLow and TosHigh.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value\n                    of 0.\n\n                    The IP TOS octet as originally defined in RFC 791\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  This object is defined as an 8-bit\n                    octet per the DOCSIS Specification for packet\n                    classification.')
docsIetfQosPktClassIpProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,258))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassIpProtocol.setDescription('This object indicates the value of the IP\n                    Protocol field required for IP packets to match\n                    this rule.\n\n                    The value 256 matches traffic with any IP Protocol\n                    value.  The value 257 by convention matches both TCP\n                    and UDP.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value\n                    of 258.')
docsIetfQosPktClassInetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassInetAddressType.setDescription('The type of the Internet address for\n                    docsIetfQosPktClassInetSourceAddr,\n                    docsIetfQosPktClassInetSourceMask,\n                    docsIetfQosPktClassInetDestAddr, and\n                    docsIetfQosPktClassInetDestMask.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    ipv4(1).')
docsIetfQosPktClassInetSourceAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassInetSourceAddr.setDescription("This object specifies the value of the IP\n                    Source Address required for packets to match\n                    this rule.\n\n                    An IP packet matches the rule when the packet\n                    IP Source Address bitwise ANDed with the\n                    docsIetfQosPktClassInetSourceMask value equals the\n                    docsIetfQosPktClassInetSourceAddr value.\n\n                    The address type of this object is specified by\n                    docsIetfQosPktClassInetAddressType.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    '00000000'H.")
docsIetfQosPktClassInetSourceMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassInetSourceMask.setDescription("This object specifies which bits of a packet's\n                    IP Source Address are compared to match\n                    this rule.\n\n                    An IP packet matches the rule when the packet\n                    source address bitwise ANDed with the\n                    docsIetfQosPktClassInetSourceMask value equals the\n                    docsIetfQosIpPktClassInetSourceAddr value.\n\n                    The address type of this object is specified by\n                    docsIetfQosPktClassInetAddressType.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    'FFFFFFFF'H.")
docsIetfQosPktClassInetDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassInetDestAddr.setDescription("This object specifies the value of the IP\n                    Destination Address required for packets to match\n                    this rule.\n\n                    An IP packet matches the rule when the packet\n                    IP Destination Address bitwise ANDed with the\n                    docsIetfQosPktClassInetDestMask value\n                    equals the docsIetfQosPktClassInetDestAddr value.\n\n                    The address type of this object is specified by\n                    docsIetfQosPktClassInetAddressType.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    '00000000'H.")
docsIetfQosPktClassInetDestMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassInetDestMask.setDescription("This object specifies which bits of a packet's\n                    IP Destination Address are compared to\n                    match this rule.\n\n                    An IP packet matches the rule when the packet\n                    destination address bitwise ANDed with the\n                    docsIetfQosPktClassInetDestMask value equals the\n                    docsIetfQosIpPktClassInetDestAddr value.\n\n                    The address type of this object is specified by\n                    docsIetfQosPktClassInetAddressType.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    'FFFFFFFF'H.")
docsIetfQosPktClassSourcePortStart = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassSourcePortStart.setDescription('This object specifies the low-end inclusive\n                    range of TCP/UDP source port numbers to which\n                    a packet is compared.  This object is irrelevant\n                    for non-TCP/UDP IP packets.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value\n                    of 0.')
docsIetfQosPktClassSourcePortEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassSourcePortEnd.setDescription('This object specifies the high-end inclusive\n                    range of TCP/UDP source port numbers to which\n                    a packet is compared.  This object is irrelevant\n                    for non-TCP/UDP IP packets.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    65535.')
docsIetfQosPktClassDestPortStart = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 15), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassDestPortStart.setDescription('This object specifies the low-end inclusive\n                     range of TCP/UDP destination port numbers to\n                     which a packet is compared.\n\n                     If the referenced parameter is not present\n                     in a classifier, this object reports the value\n                     of 0.')
docsIetfQosPktClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 16), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassDestPortEnd.setDescription('This object specifies the high-end inclusive\n                    range of TCP/UDP destination port numbers to which\n                    a packet is compared.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    65535.')
docsIetfQosPktClassDestMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassDestMacAddr.setDescription("An Ethernet packet matches an entry when its\n                    destination MAC address bitwise ANDed with\n                    docsIetfQosPktClassDestMacMask equals the value of\n                    docsIetfQosPktClassDestMacAddr.\n\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    '000000000000'H.")
docsIetfQosPktClassDestMacMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassDestMacMask.setDescription("An Ethernet packet matches an entry when its\n                    destination MAC address bitwise ANDed with\n                    docsIetfQosPktClassDestMacMask equals the value of\n                    docsIetfQosPktClassDestMacAddr.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    '000000000000'H.")
docsIetfQosPktClassSourceMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassSourceMacAddr.setDescription("An Ethernet packet matches this entry when its\n                    source MAC address equals the value of\n                    this object.\n\n                    If the referenced parameter is not present\n                    in a classifier, this object reports the value of\n                    'FFFFFFFFFFFF'H.")
docsIetfQosPktClassEnetProtocolType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4,))).clone(namedValues=NamedValues(("none", 0), ("ethertype", 1), ("dsap", 2), ("mac", 3), ("all", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassEnetProtocolType.setDescription('This object indicates the format of the layer 3\n                    protocol ID in the Ethernet packet.  A value of\n                    none(0) means that the rule does not use the\n                    layer 3 protocol type as a matching criteria.\n\n                    A value of ethertype(1) means that the rule\n                    applies only to frames that contain an\n                    EtherType value.  Ethertype values are contained\n                    in packets using the Dec-Intel-Xerox (DIX)\n                    encapsulation or the RFC1042 Sub-Network Access\n                    Protocol (SNAP) encapsulation formats.\n\n                    A value of dsap(2) means that the rule applies\n                    only to frames using the IEEE802.3\n                    encapsulation format with a Destination Service\n                    Access Point (DSAP) other\n                    than 0xAA (which is reserved for SNAP).\n\n                    A value of mac(3) means that the rule applies\n                    only to MAC management messages for MAC management\n                    messages.\n\n                    A value of all(4) means that the rule matches\n                    all Ethernet packets.\n\n                    If the Ethernet frame contains an 802.1P/Q Tag\n                    header (i.e., EtherType 0x8100), this object\n                    applies to the embedded EtherType field within\n                    the 802.1P/Q header.\n\n                    If the referenced parameter is not present in a\n                    classifier, this object reports the value of 0.')
docsIetfQosPktClassEnetProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassEnetProtocol.setDescription("If docsIetfQosEthPktClassProtocolType is none(0),\n                    this object is ignored when considering whether\n                    a packet matches the current rule.\n\n                    If dosQosPktClassEnetProtocolType is ethertype(1),\n                    this object gives the 16-bit value of the\n                    EtherType that the packet must match in order to\n                    match the rule.\n\n                    If docsIetfQosPktClassEnetProtocolType is dsap(2),\n                    the lower 8 bits of this object's value must match\n                    the DSAP byte of the packet in order to match the\n                    rule.\n\n                    If docsIetfQosPktClassEnetProtocolType is mac(3),\n                    the lower 8 bits of this object's value represent a\n                    lower bound (inclusive) of MAC management message\n                    type codes matched, and the upper 8 bits represent\n                    the upper bound (inclusive) of matched MAC message\n                    type codes.  Certain message type codes are\n                    excluded from matching, as specified in the\n                    reference.\n\n                    If the Ethernet frame contains an 802.1P/Q Tag\n                    header (i.e., EtherType 0x8100), this object applies\n                    to the embedded EtherType field within the 802.1P/Q\n                    header.\n\n                    If the referenced parameter is not present in the\n                    classifier, the value of this object is reported\n                    as 0.")
docsIetfQosPktClassUserPriLow = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassUserPriLow.setDescription('This object applies only to Ethernet frames\n                    using the 802.1P/Q tag header (indicated with\n                    EtherType 0x8100).  Such frames include a 16-bit\n                    Tag that contains a 3-bit Priority field and\n                    a 12-bit VLAN number.\n\n                    Tagged Ethernet packets must have a 3-bit\n                    Priority field within the range of\n                    docsIetfQosPktClassPriLow to\n                    docsIetfQosPktClassPriHigh in order to match this\n                    rule.\n\n                    If the referenced parameter is not present in the\n                    classifier, the value of this object is reported\n                    as 0.')
docsIetfQosPktClassUserPriHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassUserPriHigh.setDescription('This object applies only to Ethernet frames\n                    using the 802.1P/Qtag header (indicated with\n                    EtherType 0x8100).  Such frames include a 16-bit\n                    Tag that contains a 3-bit Priority field and\n                    a 12-bit VLAN number.\n\n                    Tagged Ethernet packets must have a 3-bit\n                    Priority field within the range of\n                    docsIetfQosPktClassPriLow to\n                    docsIetfQosPktClassPriHigh in order to match this\n                    rule.\n\n                    If the referenced parameter is not present in the\n                    classifier, the value of this object is reported\n                    as 7.')
docsIetfQosPktClassVlanId = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,4094),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassVlanId.setDescription('This object applies only to Ethernet frames\n                    using the 802.1P/Q tag header.\n\n                    Tagged packets must have a VLAN Identifier that\n                    matches the value in order to match the rule.\n\n                    If the referenced parameter is not present in the\n                    classifier, the value of this object is reported\n                    as 0.')
docsIetfQosPktClassStateActive = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassStateActive.setDescription('This object indicates whether or not the classifier\n                    is enabled to classify packets to a Service Flow.\n\n                    If the referenced parameter is not present in the\n                    classifier, the value of this object is reported\n                    as true(1).')
docsIetfQosPktClassPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassPkts.setDescription("This object counts the number of packets that have\n                    been classified using this entry.  This\n                    includes all packets delivered to a Service Flow\n                    maximum rate policing function, whether or not that\n                    function drops the packets.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosPktClassBitMap = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("rulePriority", 0), ("activationState", 1), ("ipTos", 2), ("ipProtocol", 3), ("ipSourceAddr", 4), ("ipSourceMask", 5), ("ipDestAddr", 6), ("ipDestMask", 7), ("sourcePortStart", 8), ("sourcePortEnd", 9), ("destPortStart", 10), ("destPortEnd", 11), ("destMac", 12), ("sourceMac", 13), ("ethertype", 14), ("userPri", 15), ("vlanId", 16),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPktClassBitMap.setDescription("This object indicates which parameter encodings\n                    were actually present in the DOCSIS packet\n                    classifier encoding signaled in the DOCSIS message\n                    that created or modified the classifier.  Note that\n                    Dynamic Service Change messages have replace\n                    semantics, so that all non-default parameters must\n                    be present whether the classifier is being created\n                    or changed.\n\n                    A bit of this object is set to 1 if the parameter\n                    indicated by the comment was present in the\n                    classifier encoding, and to 0 otherwise.\n\n                    Note that BITS are encoded most significant bit\n                    first, so that if, for example, bits 6 and 7 are\n                    set, this object is encoded as the octet string\n                    '030000'H.")
docsIetfQosParamSetTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 2), )
if mibBuilder.loadTexts: docsIetfQosParamSetTable.setDescription('This table describes the set of DOCSIS 1.1 and 2.0\n                    QOS parameters defined in a managed device.\n\n                    The ifIndex index specifies a DOCSIS MAC Domain.\n                    The docsIetfQosServiceFlowId index specifies a\n                    particular Service Flow.\n                    The docsIetfQosParamSetType index indicates whether\n                    the active, admitted, or provisioned QOS Parameter\n                    Set is being described by the row.\n\n                    Only the QOS Parameter Sets of DOCSIS 1.1 and 2.0\n                    Service Flows are represented in this table.\n\n                    DOCSIS 1.0 QOS service profiles are not\n                    represented in this table.\n\n                    Each row corresponds to a DOCSIS QOS Parameter Set\n                    as signaled via DOCSIS MAC management messages.\n                    Each object in the row corresponds to one or\n                    part of one DOCSIS 1.1 Service Flow Encoding.\n                    The docsIetfQosParamSetBitMap object in the row\n                    indicates which particular parameters were signaled\n                    in the original registration or dynamic service\n                    request message that created the QOS Parameter Set.\n\n                    In many cases, even if a QOS Parameter Set parameter\n                    was not signaled, the DOCSIS specification calls\n                    for a default value to be used.  That default value\n                    is reported as the value of the corresponding object\n                    in this row.\n\n                    Many objects are not applicable, depending on\n                    the Service Flow direction or upstream scheduling\n                    type.  The object value reported in this case\n                    is specified in the DESCRIPTION clause.')
docsIetfQosParamSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowId"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosParamSetType"))
if mibBuilder.loadTexts: docsIetfQosParamSetEntry.setDescription('A unique set of QOS parameters.')
docsIetfQosParamSetServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetServiceClassName.setDescription('Refers to the Service Class Name from which the\n                    parameter set values were derived.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object is a zero-length string.')
docsIetfQosParamSetPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetPriority.setDescription('The relative priority of a Service Flow.\n                    Higher numbers indicate higher priority.\n                    This priority should only be used to differentiate\n                    Service Flow from identical parameter sets.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object is 0.  If the parameter is\n                    not applicable, the reported value is 0.')
docsIetfQosParamSetMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 3), DocsIetfQosBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetMaxTrafficRate.setDescription('Maximum sustained traffic rate allowed for this\n                    Service Flow in bits/sec.  Must count all MAC frame\n                    data PDU from the bytes following the MAC header\n                    HCS to the end of the CRC.  The number of bytes\n                    forwarded is limited during any time interval.\n                    The value 0 means no maximum traffic rate is\n                    enforced.  This object applies to both upstream and\n                    downstream Service Flows.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object is 0.  If the parameter is\n                    not applicable, it is reported as 0.')
docsIetfQosParamSetMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetMaxTrafficBurst.setDescription('Specifies the token bucket size in bytes\n                    for this parameter set.  The value is calculated\n                    from the byte following the MAC header HCS to\n                    the end of the CRC.  This object is applied in\n                    conjunction with docsIetfQosParamSetMaxTrafficRate\n                    to calculate maximum sustained traffic rate.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object for scheduling types\n                    bestEffort (2), nonRealTimePollingService(3),\n                    and realTimePollingService(4) is 3044.\n\n                    If this parameter is not applicable, it is reported\n                    as 0.\n                   ')
docsIetfQosParamSetMinReservedRate = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 5), DocsIetfQosBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetMinReservedRate.setDescription('Specifies the guaranteed minimum rate in\n                    bits/sec for this parameter set.  The value is\n                    calculated from the byte following the MAC\n                    header HCS to the end of the CRC.  The default\n                    value of 0 means that no bandwidth is reserved.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object is 0.  If the parameter\n                    is not applicable, it is reported as 0.')
docsIetfQosParamSetMinReservedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetMinReservedPkt.setDescription("Specifies an assumed minimum packet size in\n                    bytes for which the\n                    docsIetfQosParamSetMinReservedRate will be\n                    provided.  The value is calculated from the byte\n                    following the MAC header HCS to the end of the\n                    CRC.\n\n                    If the referenced parameter is omitted from a\n                    DOCSIS QOS parameter set, the default value is\n                    CMTS implementation dependent.  In this case, the\n                    CMTS reports the default value it is using, and the\n                    CM reports a value of 0.  If the referenced\n                    parameter is not applicable to the direction or\n                    scheduling type of the Service Flow, both CMTS and\n                    CM report this object's value as 0.")
docsIetfQosParamSetActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetActiveTimeout.setDescription('Specifies the maximum duration in seconds that\n                    resources remain unused on an active service\n                    flow before CMTS signals that both active and\n                    admitted parameters set are null.  The default\n                    value of 0 signifies an infinite amount of time.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object is 0.')
docsIetfQosParamSetAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535)).clone(200)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetAdmittedTimeout.setDescription('Specifies the maximum duration in seconds that\n                    resources remain in admitted state before\n                    resources must be released.\n\n                    The value of 0 signifies an infinite amount\n                    of time.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the\n                    default value of this object is 200.\n                   ')
docsIetfQosParamSetMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetMaxConcatBurst.setDescription("Specifies the maximum concatenated burst in\n                    bytes that an upstream Service Flow is allowed.\n                    The value is calculated from the FC byte of the\n                    Concatenation MAC Header to the last CRC byte in\n                    of the last concatenated MAC frame, inclusive.\n                    The value of 0 specifies no maximum burst.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set, the default\n                    value of this object for scheduling types\n                    bestEffort(2), nonRealTimePollingService(3), and\n                    realTimePollingService(4) is 1522.  If the parameter\n                    is not applicable, this object's value is reported\n                    as 0.")
docsIetfQosParamSetSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 10), DocsIetfQosSchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetSchedulingType.setDescription("Specifies the upstream scheduling service used for\n                    upstream Service Flow.\n\n                    If the referenced parameter is not present in the\n                    corresponding DOCSIS QOS Parameter Set of an\n                    upstream Service Flow, the default value of this\n                    object is bestEffort(2).  For QOS parameter sets of\n                    downstream Service Flows, this object's value is\n                    reported as undefined(1).")
docsIetfQosParamSetNomPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetNomPollInterval.setDescription("Specifies the nominal interval in microseconds\n                    between successive unicast request\n                    opportunities on an upstream Service Flow.\n\n                    This object applies only to upstream Service Flows\n                    with DocsIetfQosSchedulingType of value\n                    nonRealTimePollingService(3),\n                    realTimePollingService(4), and\n                    unsolictedGrantServiceWithAD(5).  The parameter is\n                    mandatory for realTimePollingService(4).  If the\n                    parameter is omitted with\n                    nonRealTimePollingService(3), the CMTS uses an\n                    implementation-dependent value.  If the parameter\n                    is omitted with unsolictedGrantServiceWithAD(5),\n                    the CMTS uses as a default value the value of the\n                    Nominal Grant Interval parameter.  In all cases,\n                    the CMTS reports the value it is using when the\n                    parameter is applicable.  The CM reports the\n                    signaled parameter value if it was signaled,\n                    and 0 otherwise.\n                    If the referenced parameter is not applicable to\n                    the direction or scheduling type of the\n                    corresponding DOCSIS QOS Parameter Set, both\n                    CMTS and CM report this object's value as 0.")
docsIetfQosParamSetTolPollJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetTolPollJitter.setDescription("Specifies the maximum amount of time in\n                    microseconds that the unicast request interval\n                    may be delayed from the nominal periodic\n                    schedule on an upstream Service Flow.\n\n                    This parameter is applicable only to upstream\n                    Service Flows with a DocsIetfQosSchedulingType of\n                    realTimePollingService(4) or\n                    unsolictedGrantServiceWithAD(5).\n\n                    If the referenced parameter is applicable but not\n                    present in the corresponding DOCSIS QOS Parameter\n                    Set, the CMTS uses an implementation-dependent\n                    value and reports the value it is using.\n                    The CM reports a value of 0 in this case.\n\n                    If the parameter is not applicable to the\n                    direction or upstream scheduling type of the\n                    Service Flow, both CMTS and CM report this\n                    object's value as 0.")
docsIetfQosParamSetUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetUnsolicitGrantSize.setDescription("Specifies the unsolicited grant size in bytes.\n                    The grant size includes the entire MAC frame\n                    data PDU from the Frame Control byte to the end\n                    of the MAC frame.\n\n                    The referenced parameter is applicable only\n                    for upstream flows with a DocsIetfQosSchedulingType\n                    of unsolicitedGrantServicewithAD(5) or\n                    unsolicitedGrantService(6), and it is mandatory\n                    when applicable.  Both CMTS and CM report\n                    the signaled value of the parameter in this\n                    case.\n\n                    If the referenced parameter is not applicable to\n                    the direction or scheduling type of the\n                    corresponding DOCSIS QOS Parameter Set, both\n                    CMTS and CM report this object's value as 0.")
docsIetfQosParamSetNomGrantInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetNomGrantInterval.setDescription("Specifies the nominal interval in microseconds\n                    between successive data grant opportunities\n                    on an upstream Service Flow.\n\n                    The referenced parameter is applicable only\n                    for upstream flows with a DocsIetfQosSchedulingType\n                    of unsolicitedGrantServicewithAD(5) or\n                    unsolicitedGrantService(6), and it is mandatory\n                    when applicable.  Both CMTS and CM report the\n                    signaled value of the parameter in this case.\n\n                    If the referenced parameter is not applicable to\n                    the direction or scheduling type of the\n                    corresponding DOCSIS QOS Parameter Set, both\n                    CMTS and CM report this object's value as 0.")
docsIetfQosParamSetTolGrantJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetTolGrantJitter.setDescription("Specifies the maximum amount of time in\n                    microseconds that the transmission opportunities\n                    may be delayed from the nominal periodic schedule.\n\n                    The referenced parameter is applicable only\n                    for upstream flows with a DocsIetfQosSchedulingType\n                    of unsolicitedGrantServicewithAD(5) or\n                    unsolicitedGrantService(6), and it is mandatory\n                    when applicable.  Both CMTS and CM report the\n                    signaled value of the parameter in this case.\n\n                    If the referenced parameter is not applicable to\n                    the direction or scheduling type of the\n                    corresponding DOCSIS QOS Parameter Set, both\n                    CMTS and CM report this object's value as 0.")
docsIetfQosParamSetGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetGrantsPerInterval.setDescription("Specifies the number of data grants per Nominal\n                    Grant Interval\n                    (docsIetfQosParamSetNomGrantInterval).\n\n                    The referenced parameter is applicable only\n                    for upstream flows with a DocsIetfQosSchedulingType\n                    of unsolicitedGrantServicewithAD(5) or\n                    unsolicitedGrantService(6), and it is mandatory\n                    when applicable.  Both CMTS and CM report the\n                    signaled value of the parameter in this case.\n\n                    If the referenced parameter is not applicable to\n                    the direction or scheduling type of the\n                    corresponding DOCSIS QOS Parameter Set, both\n                    CMTS and CM report this object's value as 0.")
docsIetfQosParamSetTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetTosAndMask.setDescription("Specifies the AND mask for the IP TOS byte for\n                    overwriting IP packet's TOS value.  The IP packet\n                    TOS byte is bitwise ANDed with\n                    docsIetfQosParamSetTosAndMask, and the result is\n                    bitwise ORed with docsIetfQosParamSetTosORMask and\n                    the result is written to the IP packet TOS byte.\n                    A value of 'FF'H for docsIetfQosParamSetTosAndMask\n                    and a value of '00'H for\n                    docsIetfQosParamSetTosOrMask means that the IP\n                    Packet TOS byte is not overwritten.\n\n                    This combination is reported if the referenced\n                    parameter is not present in a QOS Parameter Set.\n                    The IP TOS octet as originally defined in RFC 791\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  Network operators SHOULD avoid\n                    specifying values of docsIetfQosParamSetTosAndMask\n                    and docsIetfQosParamSetTosORMask that would result\n                    in the modification of the ECN bits.\n\n                    In particular, operators should not use values of\n                    docsIetfQosParamSetTosAndMask that have either of\n                    the least-significant two bits set to 0.  Similarly,\n                    operators should not use values of\n                    docsIetfQosParamSetTosORMask that have either of\n                    the least-significant two bits set to 1.\n\n                    Even though this object is only enforced by the\n                    Cable Modem Termination System (CMTS),\n                    Cable Modems MUST report the value as signaled in\n                    the referenced parameter.")
docsIetfQosParamSetTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetTosOrMask.setDescription('Specifies the OR mask for the IP TOS byte.\n\n                    See the description of docsIetfQosParamSetTosAndMask\n                    for further details.\n\n                    The IP TOS octet as originally defined in RFC 791\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  Network operators SHOULD avoid\n                    specifying values of docsIetfQosParamSetTosAndMask\n                    and docsIetfQosParamSetTosORMask that would result\n                    in the modification of the ECN bits.')
docsIetfQosParamSetMaxLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetMaxLatency.setDescription('Specifies the maximum latency between the\n                    reception of a packet by the CMTS on its NSI\n                    and the forwarding of the packet to the RF\n                    interface.  A value of 0 signifies no maximum\n                    latency is enforced.  This object only applies to\n                    downstream Service Flows.\n\n                    If the referenced parameter is not present in the\n                    corresponding downstream DOCSIS QOS Parameter Set,\n                    the default value is 0.  This parameter is\n                    not applicable to upstream DOCSIS QOS Parameter\n                    Sets, and its value is reported as 0 in this case.')
docsIetfQosParamSetType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("active", 1), ("admitted", 2), ("provisioned", 3),)))
if mibBuilder.loadTexts: docsIetfQosParamSetType.setDescription('Defines the type of the QOS parameter set defined\n                    by this row.  active(1) indicates the Active QOS\n                    parameter set, describing the service currently\n                    being provided by the DOCSIS MAC domain to the\n                    Service Flow.  admitted(2) indicates the Admitted\n                    QOS Parameter Set, describing services reserved by\n                    the DOCSIS MAC domain for use by the service\n                    flow.  provisioned (3) describes the QOS Parameter\n                    Set defined in the DOCSIS CM Configuration file for\n                    the Service Flow.')
docsIetfQosParamSetRequestPolicyOct = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetRequestPolicyOct.setDescription("Specifies which transmit interval opportunities\n                    the CM omits for upstream transmission requests and\n                    packet transmissions.  This object takes its\n                    default value for downstream Service Flows.\n\n                    Unless otherwise indicated, a bit value of 1 means\n                    that a CM must not use that opportunity for\n                    upstream transmission.\n\n                    If bit 0 is the least significant bit of the\n                    least significant (4th) octet, and if bit number\n                    is increased with significance, the bit definitions\n                    are defined as follows:\n\n                    broadcastReqOpp(0):\n                         all CMs broadcast request opportunities\n\n                    priorityReqMulticastReq(1):\n                         priority request multicast request\n                         opportunities\n\n                    reqDataForReq(2):\n                         request/data opportunities for requests\n\n                    reqDataForData(3):\n                         request/data opportunities for data\n\n                    piggybackReqWithData(4):\n                         piggyback requests with data\n\n                    concatenateData(5):\n                         concatenate data\n\n                    fragmentData(6):\n                         fragment data\n\n                    suppresspayloadheaders(7):\n                         suppress payload headers\n\n                    dropPktsExceedUGSize(8):\n                         A value of 1 means that the Service Flow must\n                         drop packets that do not fit in the Unsolicited\n                         Grant size.\n\n                    If the referenced parameter is not present in\n                    a QOS Parameter Set, the value of this object is\n                    reported as '00000000'H.")
docsIetfQosParamSetBitMap = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 2, 1, 22), Bits().clone(namedValues=NamedValues(("trafficPriority", 0), ("maxTrafficRate", 1), ("maxTrafficBurst", 2), ("minReservedRate", 3), ("minReservedPkt", 4), ("activeTimeout", 5), ("admittedTimeout", 6), ("maxConcatBurst", 7), ("schedulingType", 8), ("requestPolicy", 9), ("nomPollInterval", 10), ("tolPollJitter", 11), ("unsolicitGrantSize", 12), ("nomGrantInterval", 13), ("tolGrantJitter", 14), ("grantsPerInterval", 15), ("tosOverwrite", 16), ("maxLatency", 17),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosParamSetBitMap.setDescription("This object indicates the set of QOS Parameter\n                    Set parameters actually signaled in the\n                    DOCSIS registration or dynamic service request\n                    message that created or modified the QOS Parameter\n                    Set.  A bit is set to 1 when the parameter described\n                    by the indicated reference section is present\n                    in the original request.\n\n                    Note that when Service Class names are expanded,\n                    the registration or dynamic response message may\n                    contain parameters as expanded by the CMTS based\n                    on a stored service class.  These expanded\n                    parameters are not indicated by a 1 bit in this\n                    object.\n\n                    Note that even though some QOS Parameter Set\n                    parameters may not be signaled in a message\n                    (so that the paramater's bit in this object is 0),\n                    the DOCSIS specification requires that default\n                    values be used.  These default values are reported\n                    as the corresponding object's value in the row.\n\n                    Note that BITS objects are encoded most\n                    significant bit first.  For example, if bits\n                    1 and 16 are set, the value of this object\n                    is the octet string '400080'H.")
docsIetfQosServiceFlowTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 3), )
if mibBuilder.loadTexts: docsIetfQosServiceFlowTable.setDescription('This table describes the set of DOCSIS-QOS\n                    Service Flows in a managed device.')
docsIetfQosServiceFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowId"))
if mibBuilder.loadTexts: docsIetfQosServiceFlowEntry.setDescription('Describes a Service Flow.\n                    An entry in the table exists for each\n                    Service Flow ID.  The ifIndex is an\n                    ifType of docsCableMaclayer(127).')
docsIetfQosServiceFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: docsIetfQosServiceFlowId.setDescription('An index assigned to a Service Flow by CMTS.')
docsIetfQosServiceFlowSID = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowSID.setDescription('Service Identifier (SID) assigned to an\n                    admitted or active Service Flow.  This object\n                    reports a value of 0 if a Service ID is not\n                    associated with the Service Flow.  Only active\n                    or admitted upstream Service Flows will have a\n                    Service ID (SID).')
docsIetfQosServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 3, 1, 3), DocsIetfQosRfMacIfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowDirection.setDescription('The direction of the Service Flow.')
docsIetfQosServiceFlowPrimary = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowPrimary.setDescription('Object reflects whether Service Flow is the primary\n                    or a secondary Service Flow.\n\n                    A primary Service Flow is the default Service Flow\n                    for otherwise unclassified traffic and all MAC\n                    messages.')
docsIetfQosServiceFlowStatsTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 4), )
if mibBuilder.loadTexts: docsIetfQosServiceFlowStatsTable.setDescription('This table describes statistics associated with the\n                     Service Flows in a managed device.')
docsIetfQosServiceFlowStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowId"))
if mibBuilder.loadTexts: docsIetfQosServiceFlowStatsEntry.setDescription('Describes a set of Service Flow statistics.\n                    An entry in the table exists for each\n                    Service Flow ID.  The ifIndex is an\n                    ifType of docsCableMaclayer(127).')
docsIetfQosServiceFlowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowPkts.setDescription("For outgoing Service Flows, this object counts the\n                    number of Packet Data PDUs forwarded to this\n                    Service Flow.  For incoming upstream CMTS service\n                    flows, this object counts the number of Packet\n                    Data PDUs actually received on the Service Flow\n                    identified by the SID for which the packet was\n                    scheduled.  CMs not classifying downstream packets\n                    may report this object's value as 0 for downstream\n                    Service Flows.  This object does not count\n                    MAC-specific management messages.\n\n                    Particularly for UGS flows, packets sent on the\n                    primary Service Flow in violation of the UGS grant\n                    size should be counted only by the instance of this\n                    object that is associated with the primary service\n                    flow.\n\n                    Unclassified upstream user data packets (i.e., non-\n                    MAC-management) forwarded to the primary upstream\n                    Service Flow should be counted by the instance of\n                    this object that is associated with the primary\n                    service flow.\n\n                    This object does include packets counted by\n                    docsIetfQosServiceFlowPolicedDelayPkts, but does not\n                    include packets counted by\n                    docsIetfQosServiceFlowPolicedDropPkts\n                    and docsIetfQosServiceFlowPHSUnknowns.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosServiceFlowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowOctets.setDescription("The number of octets from the byte after the MAC\n                    header HCS to the end of the CRC for all packets\n                    counted in the docsIetfQosServiceFlowPkts object for\n                    this row.  Note that this counts the octets after\n                    payload header suppression and before payload\n                    header expansion have been applied.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosServiceFlowTimeCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowTimeCreated.setDescription('The value of sysUpTime when the service flow\n                    was created.')
docsIetfQosServiceFlowTimeActive = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowTimeActive.setDescription("The number of seconds that the service flow\n                    has been active.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosServiceFlowPHSUnknowns = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowPHSUnknowns.setDescription("For incoming upstream CMTS service flows, this\n                    object counts the number of packets received\n                    with an unknown payload header suppression index.\n                    The service flow is identified by the SID for which\n                    the packet was scheduled.\n\n                    On a CM, only this object's instance for the primary\n                    downstream service flow counts packets received with\n                    an unknown payload header suppression index.  All\n                    other downstream service flows on CM report this\n                    objects value as 0.\n\n                    All outgoing service flows report this object's\n                    value as 0.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosServiceFlowPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowPolicedDropPkts.setDescription("For outgoing service flows, this object counts the\n                    number of Packet Data PDUs classified to this\n                    service flow dropped due to:\n                       (1) implementation-dependent excessive delay\n                           while enforcing the Maximum Sustained\n                           Traffic Rate; or\n                       (2) UGS packets dropped due to exceeding the\n                           Unsolicited Grant Size with a\n                           Request/Transmission policy that requires\n                           such packets to be dropped.\n\n                    Classified packets dropped due to other reasons\n                    must be counted in ifOutDiscards for the interface\n                    of this service flow.  This object reports 0 for\n                    incoming service flows.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosServiceFlowPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowPolicedDelayPkts.setDescription("This object counts only outgoing packets delayed in\n                    order to maintain the Maximum Sustained Traffic\n                    Rate.  This object will always report a value of 0\n                    for UGS flows because the Maximum Sustained Traffic\n                    Rate does not apply.  This object is 0 for incoming\n                    service flows.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosUpstreamStatsTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 5), )
if mibBuilder.loadTexts: docsIetfQosUpstreamStatsTable.setDescription('This table describes statistics associated with\n                    upstream service flows.  All counted frames must\n                    be received without a Frame Check Sequence (FCS)\n                    error.')
docsIetfQosUpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosSID"))
if mibBuilder.loadTexts: docsIetfQosUpstreamStatsEntry.setDescription('Describes a set of upstream service flow\n                    statistics.  An entry in the table exists for each\n                    upstream Service Flow in a managed device.\n                    The ifIndex is an ifType of\n                    docsCableMaclayer(127).')
docsIetfQosSID = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,16383)))
if mibBuilder.loadTexts: docsIetfQosSID.setDescription('Identifies a service ID for an admitted or active\n                    upstream service flow.')
docsIetfQosUpstreamFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosUpstreamFragments.setDescription("The number of fragmentation headers received on an\n                    upstream service flow, regardless of whether\n                    the fragment was correctly reassembled into a\n                    valid packet.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosUpstreamFragDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosUpstreamFragDiscards.setDescription("The number of upstream fragments discarded and not\n                    assembled into a valid upstream packet.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosUpstreamConcatBursts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosUpstreamConcatBursts.setDescription("The number of concatenation headers received on an\n                    upstream service flow.\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicServiceStatsTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 6), )
if mibBuilder.loadTexts: docsIetfQosDynamicServiceStatsTable.setDescription('This table describes statistics associated with the\n                    Dynamic Service Flows in a managed device.')
docsIetfQosDynamicServiceStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosIfDirection"))
if mibBuilder.loadTexts: docsIetfQosDynamicServiceStatsEntry.setDescription('Describes a set of dynamic service flow statistics.\n                    Two entries exist for each DOCSIS MAC layer\n                    interface for the upstream and downstream\n                    direction.  On the CMTS, the downstream direction\n                    row indicates messages transmitted or transactions\n                    originated by the CMTS.  The upstream direction row\n                    indicates messages received or transaction\n                    originated by the CM.  On the CM, the downstream\n                    direction row indicates messages received or\n                    transactions originated by the CMTS.  The upstream\n                    direction row indicates messages transmitted by\n                    the CM or transactions originated by the CM.\n                    The ifIndex is an ifType of\n                    docsCableMaclayer(127).')
docsIetfQosIfDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 1), DocsIetfQosRfMacIfDirection())
if mibBuilder.loadTexts: docsIetfQosIfDirection.setDescription('The direction of interface.')
docsIetfQosDSAReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSAReqs.setDescription("The number of Dynamic Service Addition Requests,\n                    including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSARsps = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSARsps.setDescription("The number of Dynamic Service Addition Responses,\n                    including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSAAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSAAcks.setDescription("The number of Dynamic Service Addition\n                    Acknowledgements, including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSCReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSCReqs.setDescription("The number of Dynamic Service Change Requests,\n                    including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSCRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSCRsps.setDescription("The number of Dynamic Service Change Responses,\n                    including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSCAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSCAcks.setDescription("The number of Dynamic Service Change\n                    Acknowledgements, including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSDReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSDReqs.setDescription("The number of Dynamic Service Delete Requests,\n                    including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDSDRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDSDRsps.setDescription("The number of Dynamic Service Delete Responses,\n                    including retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicAdds = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDynamicAdds.setDescription("The number of successful Dynamic Service Addition\n                    transactions.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicAddFails = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDynamicAddFails.setDescription("The number of failed Dynamic Service Addition\n                    transactions.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDynamicChanges.setDescription("The number of successful Dynamic Service Change\n                    transactions.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicChangeFails = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDynamicChangeFails.setDescription("The number of failed Dynamic Service Change\n                    transactions.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDynamicDeletes.setDescription("The number of successful Dynamic Service Delete\n                    transactions.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDynamicDeleteFails = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDynamicDeleteFails.setDescription("The number of failed Dynamic Service Delete\n                    transactions.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDCCReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDCCReqs.setDescription("The number of Dynamic Channel Change Request\n                    messages traversing an interface.  This count\n                    is nonzero only on downstream direction rows.\n                    This count should include the number of retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex\n                    that indexes this object.")
docsIetfQosDCCRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDCCRsps.setDescription("The number of Dynamic Channel Change Response\n                    messages traversing an interface.  This count is\n                    nonzero only on upstream direction rows.  This count\n                    should include the number of retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDCCAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDCCAcks.setDescription("The number of Dynamic Channel Change Acknowledgement\n                    messages traversing an interface.  This count\n                    is nonzero only on downstream direction rows.\n                    This count should include the number of retries.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDCCs = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDCCs.setDescription("The number of successful Dynamic Channel Change\n                    transactions.  This count is nonzero only on\n                    downstream direction rows.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosDCCFails = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosDCCFails.setDescription("The number of failed Dynamic Channel Change\n                    transactions.  This count is nonzero only on\n                    downstream direction rows.\n\n                    This counter's last discontinuity is the\n                    ifCounterDiscontinuityTime for the same ifIndex that\n                    indexes this object.")
docsIetfQosServiceFlowLogTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 7), )
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogTable.setDescription('This table contains a log of the disconnected\n                    Service Flows in a managed device.')
docsIetfQosServiceFlowLogEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 7, 1), ).setIndexNames((0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogIndex"))
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogEntry.setDescription('The information regarding a single disconnected\n                    service flow.')
docsIetfQosServiceFlowLogIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogIndex.setDescription('Unique index for a logged service flow.')
docsIetfQosServiceFlowLogIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogIfIndex.setDescription('The ifIndex of ifType docsCableMaclayer(127)\n                    on the CMTS where the service flow was present.')
docsIetfQosServiceFlowLogSFID = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogSFID.setDescription('The index assigned to the service flow by the CMTS.')
docsIetfQosServiceFlowLogCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogCmMac.setDescription('The MAC address for the cable modem associated with\n                    the service flow.')
docsIetfQosServiceFlowLogPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogPkts.setDescription('The number of packets counted on this service flow\n                    after payload header suppression.')
docsIetfQosServiceFlowLogOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogOctets.setDescription('The number of octets counted on this service flow\n                    after payload header suppression.')
docsIetfQosServiceFlowLogTimeDeleted = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogTimeDeleted.setDescription('The value of sysUpTime when the service flow\n                    was deleted.')
docsIetfQosServiceFlowLogTimeCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogTimeCreated.setDescription('The value of sysUpTime when the service flow\n                    was created.')
docsIetfQosServiceFlowLogTimeActive = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogTimeActive.setDescription('The total time that the service flow was active.')
docsIetfQosServiceFlowLogDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 10), DocsIetfQosRfMacIfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogDirection.setDescription('The value of docsIetfQosServiceFlowDirection\n                    for the service flow.')
docsIetfQosServiceFlowLogPrimary = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogPrimary.setDescription('The value of docsIetfQosServiceFlowPrimary for the\n                    service flow.')
docsIetfQosServiceFlowLogServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogServiceClassName.setDescription('The value of docsIetfQosParamSetServiceClassName for\n                    the provisioned QOS Parameter Set of the\n                    service flow.')
docsIetfQosServiceFlowLogPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogPolicedDropPkts.setDescription('The final value of\n                    docsIetfQosServiceFlowPolicedDropPkts for the\n                    service flow.')
docsIetfQosServiceFlowLogPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogPolicedDelayPkts.setDescription('The final value of\n                    docsIetfQosServiceFlowPolicedDelayPkts for the\n                    service flow.')
docsIetfQosServiceFlowLogControl = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6,))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIetfQosServiceFlowLogControl.setDescription('Setting this object to the value destroy(6) removes\n                    this entry from the table.\n\n                    Reading this object returns the value active(1).')
docsIetfQosServiceClassTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 8), )
if mibBuilder.loadTexts: docsIetfQosServiceClassTable.setDescription('This table describes the set of DOCSIS-QOS\n                    Service Classes in a CMTS.')
docsIetfQosServiceClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 8, 1), ).setIndexNames((0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassName"))
if mibBuilder.loadTexts: docsIetfQosServiceClassEntry.setDescription('A provisioned service class on a CMTS.\n                    Each entry defines a template for certain\n                    DOCSIS QOS Parameter Set values.  When a CM\n                    creates or modifies an Admitted QOS Parameter Set\n                    for a Service Flow, it may reference a Service Class\n                    Name instead of providing explicit QOS Parameter\n                    Set values.  In this case, the CMTS populates\n                    the QOS Parameter Set with the applicable\n                    corresponding values from the named Service Class.\n                    Subsequent changes to a Service Class row do not\n                    affect the QOS Parameter Set values of any service\n                    flows already admitted.\n\n                    A service class template applies to only\n                    a single direction, as indicated in the\n                    docsIetfQosServiceClassDirection object.')
docsIetfQosServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1,15)))
if mibBuilder.loadTexts: docsIetfQosServiceClassName.setDescription('Service Class Name.  DOCSIS specifies that the\n                    maximum size is 16 ASCII characters including\n                    a terminating zero.  The terminating zero is not\n                    represented in this SnmpAdminString syntax object.')
docsIetfQosServiceClassStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassStatus.setDescription('Used to create or delete rows in this table.\n                    There is no restriction on the ability to change\n                    values in this row while the row is active.\n                    Inactive rows need not be timed out.')
docsIetfQosServiceClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassPriority.setDescription('Template for docsIetfQosParamSetPriority.')
docsIetfQosServiceClassMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 4), DocsIetfQosBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassMaxTrafficRate.setDescription('Template for docsIetfQosParamSetMaxTrafficRate.')
docsIetfQosServiceClassMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 5), Unsigned32().clone(3044)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassMaxTrafficBurst.setDescription('Template for docsIetfQosParamSetMaxTrafficBurst.')
docsIetfQosServiceClassMinReservedRate = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 6), DocsIetfQosBitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassMinReservedRate.setDescription('Template for docsIetfQosParamSEtMinReservedRate.')
docsIetfQosServiceClassMinReservedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassMinReservedPkt.setDescription('Template for docsIetfQosParamSetMinReservedPkt.')
docsIetfQosServiceClassMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535)).clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassMaxConcatBurst.setDescription('Template for docsIetfQosParamSetMaxConcatBurst.')
docsIetfQosServiceClassNomPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassNomPollInterval.setDescription('Template for docsIetfQosParamSetNomPollInterval.')
docsIetfQosServiceClassTolPollJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassTolPollJitter.setDescription('Template for docsIetfQosParamSetTolPollJitter.')
docsIetfQosServiceClassUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassUnsolicitGrantSize.setDescription('Template for docsIetfQosParamSetUnsolicitGrantSize.')
docsIetfQosServiceClassNomGrantInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassNomGrantInterval.setDescription('Template for docsIetfQosParamSetNomGrantInterval.')
docsIetfQosServiceClassTolGrantJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassTolGrantJitter.setDescription('Template for docsIetfQosParamSetTolGrantJitter.')
docsIetfQosServiceClassGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassGrantsPerInterval.setDescription('Template for docsIetfQosParamSetGrantsPerInterval.')
docsIetfQosServiceClassMaxLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassMaxLatency.setDescription('Template for docsIetfQosParamSetClassMaxLatency.')
docsIetfQosServiceClassActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassActiveTimeout.setDescription('Template for docsIetfQosParamSetActiveTimeout.')
docsIetfQosServiceClassAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535)).clone(200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassAdmittedTimeout.setDescription('Template for docsIetfQosParamSetAdmittedTimeout.')
docsIetfQosServiceClassSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 18), DocsIetfQosSchedulingType().clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassSchedulingType.setDescription('Template for docsIetfQosParamSetSchedulingType.')
docsIetfQosServiceClassRequestPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassRequestPolicy.setDescription('Template for docsIetfQosParamSetRequestPolicyOct.')
docsIetfQosServiceClassTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceClassTosAndMask.setDescription('Template for docsIetfQosParamSetTosAndMask.\n                    The IP TOS octet as originally defined in RFC 791\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  Network operators SHOULD avoid\n                    specifying values of\n                    docsIetfQosServiceClassTosAndMask and\n                    docsIetfQosServiceClassTosOrMask that would result\n                    in the modification of the ECN bits.\n                    In particular, operators should not use values of\n                    docsIetfQosServiceClassTosAndMask that have either\n                    of the least-significant two bits set to 0.\n                    Similarly,operators should not use values of\n                    docsIetfQosServiceClassTosOrMask that have either\n                    of the least-significant two bits set to 1.')
docsIetfQosServiceClassTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosServiceClassTosOrMask.setDescription('Template for docsIetfQosParamSetTosOrMask.\n                    The IP TOS octet as originally defined in RFC 791\n                    has been superseded by the 6-bit Differentiated\n                    Services Field (DSField, RFC 3260) and the 2-bit\n                    Explicit Congestion Notification Field (ECN field,\n                    RFC 3168).  Network operators SHOULD avoid\n                    specifying values of\n                    docsIetfQosServiceClassTosAndMask and\n                    docsIetfQosServiceClassTosOrMask that would result\n                    in the modification of the ECN bits.\n\n                    In particular, operators should not use values of\n                    docsIetfQosServiceClassTosAndMask that have either\n                    of the least-significant two bits set to 0.\n                    Similarly, operators should not use values of\n                    docsIetfQosServiceClassTosOrMask that have either\n                    of the least-significant two bits set to 1.')
docsIetfQosServiceClassDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 22), DocsIetfQosRfMacIfDirection().clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassDirection.setDescription('Specifies whether the service class template\n                    applies to upstream or downstream service flows.')
docsIetfQosServiceClassStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 23), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassStorageType.setDescription("This object defines whether this row is kept in\n                    volatile storage and lost upon reboot or whether\n                    it is backed up by non-volatile or permanent\n                    storage.  'permanent' entries need not allow\n                    writable access to any object.")
docsIetfQosServiceClassDSCPOverwrite = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 8, 1, 24), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassDSCPOverwrite.setDescription("This object allows the overwrite of the DSCP\n                    field per RFC 3260.\n\n                    If this object is -1, then the corresponding entry's\n                    docsIetfQosServiceClassTosAndMask value MUST be\n                    'FF'H and docsIetfQosServiceClassTosOrMask MUST be\n                    '00'H.  Otherwise, this object is in the range of\n                    0..63, and the corresponding entry's\n                    docsIetfQosServiceClassTosAndMask value MUST be\n                    '03'H and the docsIetfQosServiceClassTosOrMask MUST\n                    be this object's value shifted left by two bit\n                    positions.")
docsIetfQosServiceClassPolicyTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 9), )
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyTable.setDescription('This table describes the set of DOCSIS-QOS\n                    Service Class Policies.\n\n                    This table is an adjunct to the\n                    docsDevFilterPolicy table.   Entries in the\n                    docsDevFilterPolicy table can point to\n                    specific rows in this table.\n\n                    This table permits mapping a packet to a service\n                    class name of an active service flow so long as\n                    a classifier does not exist at a higher\n                    priority.')
docsIetfQosServiceClassPolicyEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 9, 1), ).setIndexNames((0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassPolicyIndex"))
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyEntry.setDescription('A service class name policy entry.')
docsIetfQosServiceClassPolicyIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyIndex.setDescription('Index value to identify an entry in\n                    this table uniquely.')
docsIetfQosServiceClassPolicyName = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 9, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyName.setDescription('Service Class Name to identify the name of the\n                    service class flow to which the packet should be\n                    directed.')
docsIetfQosServiceClassPolicyRulePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyRulePriority.setDescription('Service Class Policy rule priority for the\n                    entry.')
docsIetfQosServiceClassPolicyStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyStatus.setDescription('Used to create or delete rows in this table.\n                    This object should not be deleted if it is\n                    referenced by an entry in docsDevFilterPolicy.\n                    The reference should be deleted first.\n                    There is no restriction on the ability\n                    to change values in this row while the row is\n                    active.  Inactive rows need not be timed out.')
docsIetfQosServiceClassPolicyStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 9, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIetfQosServiceClassPolicyStorageType.setDescription("This object defines whether this row is kept in\n                    volatile storage and lost upon reboot or whether\n                    it is backed up by non-volatile or permanent\n                    storage.  'permanent' entries need not allow\n                    writable access to any object.")
docsIetfQosPHSTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 10), )
if mibBuilder.loadTexts: docsIetfQosPHSTable.setDescription('This table describes the set of payload header\n                    suppression entries.')
docsIetfQosPHSEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowId"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosPktClassId"))
if mibBuilder.loadTexts: docsIetfQosPHSEntry.setDescription('A payload header suppression entry.\n\n                    The ifIndex is an ifType of docsCableMaclayer(127).\n                    The index docsIetfQosServiceFlowId selects one\n                    service flow from the cable MAC layer interface.\n                    The docsIetfQosPktClassId index matches an\n                    index of the docsIetfQosPktClassTable.')
docsIetfQosPHSField = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPHSField.setDescription('Payload header suppression field defines the\n                    bytes of the header that must be\n                    suppressed/restored by the sending/receiving\n                    device.\n\n                    The number of octets in this object should be\n                    the same as the value of docsIetfQosPHSSize.')
docsIetfQosPHSMask = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPHSMask.setDescription("Payload header suppression mask defines the\n                    bit mask that is used in combination with the\n                    docsIetfQosPHSField.  It defines which bytes in\n                    the header must be suppressed/restored by the\n                    sending or receiving device.\n\n                    Each bit of this bit mask corresponds to a byte\n                    in the docsIetfQosPHSField, with the least\n                    significant bit corresponding to the first byte\n                    of the docsIetfQosPHSField.\n\n                    Each bit of the bit mask specifies whether\n                    the corresponding byte should be suppressed\n                    in the packet.  A bit value of '1' indicates that\n                    the byte should be suppressed by the sending\n                    device and restored by the receiving device.\n                    A bit value of '0' indicates that\n                    the byte should not be suppressed by the sending\n                    device or restored by the receiving device.\n\n                    If the bit mask does not contain a bit for each\n                    byte in the docsIetfQosPHSField, then the bit mask\n                    is extended with bit values of '1' to be the\n                    necessary length.")
docsIetfQosPHSSize = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPHSSize.setDescription('Payload header suppression size specifies the\n                    number of bytes in the header to be suppressed\n                    and restored.\n\n                    The value of this object must match the number\n                    of bytes in the docsIetfQosPHSField.')
docsIetfQosPHSVerify = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPHSVerify.setDescription("Payload header suppression verification value.  If\n                    'true', the sender must verify docsIetfQosPHSField\n                    is the same as what is contained in the packet\n                    to be suppressed.")
docsIetfQosPHSIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosPHSIndex.setDescription('Payload header suppression index uniquely\n                    references the PHS rule for a given service flow.')
docsIetfQosCmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 2, 1, 127, 1, 11), )
if mibBuilder.loadTexts: docsIetfQosCmtsMacToSrvFlowTable.setDescription('This table provides for referencing the service\n                    flows associated with a particular cable modem.\n                    This allows indexing into other docsIetfQos\n                    tables that are indexed by docsIetfQosServiceFlowId\n                    and ifIndex.')
docsIetfQosCmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 127, 1, 11, 1), ).setIndexNames((0, "DOCS-IETF-QOS-MIB", "docsIetfQosCmtsCmMac"), (0, "DOCS-IETF-QOS-MIB", "docsIetfQosCmtsServiceFlowId"))
if mibBuilder.loadTexts: docsIetfQosCmtsMacToSrvFlowEntry.setDescription('An entry is created by CMTS for each service flow\n                    connected to this CMTS.')
docsIetfQosCmtsCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsIetfQosCmtsCmMac.setDescription('The MAC address for the referenced CM.')
docsIetfQosCmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: docsIetfQosCmtsServiceFlowId.setDescription('An index assigned to a service flow by CMTS.')
docsIetfQosCmtsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 127, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIetfQosCmtsIfIndex.setDescription('The ifIndex of ifType docsCableMacLayer(127)\n                    on the CMTS that is connected to the Cable Modem.')
docsIetfQosConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 127, 2))
docsIetfQosGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 127, 2, 1))
docsIetfQosCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 127, 2, 2))
docsIetfQosCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 127, 2, 2, 1)).setObjects(*(("DOCS-IETF-QOS-MIB", "docsIetfQosBaseGroup"), ("DOCS-IETF-QOS-MIB", "docsIetfQosCmtsGroup"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetGroup"), ("DOCS-IETF-QOS-MIB", "docsIetfQosSrvClassPolicyGroup"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassGroup"),))
if mibBuilder.loadTexts: docsIetfQosCompliance.setDescription('The compliance statement for MCNS Cable Modems and\n         Cable Modem Termination Systems that implement DOCSIS\n         Service Flows.')
docsIetfQosBaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 127, 2, 1, 1)).setObjects(*(("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassDirection"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassPriority"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassIpTosLow"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassIpTosHigh"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassIpTosMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassIpProtocol"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassSourcePortStart"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassSourcePortEnd"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassDestPortStart"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassDestPortEnd"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassDestMacAddr"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassDestMacMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassSourceMacAddr"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassEnetProtocolType"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassEnetProtocol"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassUserPriLow"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassUserPriHigh"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassVlanId"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassStateActive"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassBitMap"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassInetAddressType"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassInetSourceAddr"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassInetSourceMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassInetDestAddr"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPktClassInetDestMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowSID"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowDirection"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowPrimary"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowOctets"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowTimeCreated"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowTimeActive"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowPHSUnknowns"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowPolicedDropPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowPolicedDelayPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSAReqs"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSARsps"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSAAcks"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSCReqs"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSCRsps"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSCAcks"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSDReqs"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDSDRsps"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDynamicAdds"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDynamicAddFails"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDynamicChanges"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDynamicChangeFails"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDynamicDeletes"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDynamicDeleteFails"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDCCReqs"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDCCRsps"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDCCAcks"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDCCs"), ("DOCS-IETF-QOS-MIB", "docsIetfQosDCCFails"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPHSField"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPHSMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPHSSize"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPHSVerify"), ("DOCS-IETF-QOS-MIB", "docsIetfQosPHSIndex"),))
if mibBuilder.loadTexts: docsIetfQosBaseGroup.setDescription('Group of objects implemented in both Cable Modems and\n         Cable Modem Termination Systems.')
docsIetfQosParamSetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 127, 2, 1, 2)).setObjects(*(("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetServiceClassName"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetPriority"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetMaxTrafficRate"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetMaxTrafficBurst"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetMinReservedRate"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetMinReservedPkt"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetActiveTimeout"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetAdmittedTimeout"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetMaxConcatBurst"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetSchedulingType"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetNomPollInterval"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetTolPollJitter"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetUnsolicitGrantSize"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetNomGrantInterval"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetTolGrantJitter"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetGrantsPerInterval"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetTosAndMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetTosOrMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetMaxLatency"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetRequestPolicyOct"), ("DOCS-IETF-QOS-MIB", "docsIetfQosParamSetBitMap"),))
if mibBuilder.loadTexts: docsIetfQosParamSetGroup.setDescription('Group of objects implemented in both Cable Modems and\n         Cable Modem Termination Systems for QOS Parameter Sets.')
docsIetfQosCmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 127, 2, 1, 3)).setObjects(*(("DOCS-IETF-QOS-MIB", "docsIetfQosUpstreamFragments"), ("DOCS-IETF-QOS-MIB", "docsIetfQosUpstreamFragDiscards"), ("DOCS-IETF-QOS-MIB", "docsIetfQosUpstreamConcatBursts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogIfIndex"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogSFID"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogCmMac"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogOctets"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogTimeDeleted"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogTimeCreated"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogTimeActive"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogDirection"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogPrimary"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogServiceClassName"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogPolicedDropPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogPolicedDelayPkts"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceFlowLogControl"), ("DOCS-IETF-QOS-MIB", "docsIetfQosCmtsIfIndex"),))
if mibBuilder.loadTexts: docsIetfQosCmtsGroup.setDescription('Group of objects implemented only in the CMTS.')
docsIetfQosSrvClassPolicyGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 127, 2, 1, 4)).setObjects(*(("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassPolicyName"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassPolicyRulePriority"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassPolicyStatus"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassPolicyStorageType"),))
if mibBuilder.loadTexts: docsIetfQosSrvClassPolicyGroup.setDescription('Group of objects implemented in both Cable Modems and\n         Cable Modem Termination Systems when supporting policy-based\n         service flows.')
docsIetfQosServiceClassGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 127, 2, 1, 5)).setObjects(*(("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassStatus"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassPriority"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassMaxTrafficRate"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassMaxTrafficBurst"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassMinReservedRate"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassMinReservedPkt"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassMaxConcatBurst"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassNomPollInterval"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassTolPollJitter"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassUnsolicitGrantSize"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassNomGrantInterval"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassTolGrantJitter"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassGrantsPerInterval"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassMaxLatency"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassActiveTimeout"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassAdmittedTimeout"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassSchedulingType"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassRequestPolicy"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassTosAndMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassTosOrMask"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassDirection"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassStorageType"), ("DOCS-IETF-QOS-MIB", "docsIetfQosServiceClassDSCPOverwrite"),))
if mibBuilder.loadTexts: docsIetfQosServiceClassGroup.setDescription('Group of objects implemented only in Cable Modem\n         Termination Systems when supporting expansion of Service\n         Class Names in a QOS Parameter Set')
mibBuilder.exportSymbols("DOCS-IETF-QOS-MIB", docsIetfQosDCCFails=docsIetfQosDCCFails, docsIetfQosParamSetTosOrMask=docsIetfQosParamSetTosOrMask, docsIetfQosDynamicAddFails=docsIetfQosDynamicAddFails, docsIetfQosServiceFlowTable=docsIetfQosServiceFlowTable, docsIetfQosDSCReqs=docsIetfQosDSCReqs, docsIetfQosServiceFlowLogTable=docsIetfQosServiceFlowLogTable, docsIetfQosCmtsMacToSrvFlowTable=docsIetfQosCmtsMacToSrvFlowTable, docsIetfQosParamSetActiveTimeout=docsIetfQosParamSetActiveTimeout, docsIetfQosParamSetNomGrantInterval=docsIetfQosParamSetNomGrantInterval, docsIetfQosPktClassDestPortStart=docsIetfQosPktClassDestPortStart, docsIetfQosDCCAcks=docsIetfQosDCCAcks, docsIetfQosPktClassBitMap=docsIetfQosPktClassBitMap, docsIetfQosServiceClassPriority=docsIetfQosServiceClassPriority, docsIetfQosParamSetMaxLatency=docsIetfQosParamSetMaxLatency, docsIetfQosServiceFlowDirection=docsIetfQosServiceFlowDirection, docsIetfQosSrvClassPolicyGroup=docsIetfQosSrvClassPolicyGroup, docsIetfQosServiceClassStorageType=docsIetfQosServiceClassStorageType, docsIetfQosDynamicDeleteFails=docsIetfQosDynamicDeleteFails, docsIetfQosServiceFlowPkts=docsIetfQosServiceFlowPkts, docsIetfQosServiceClassPolicyStatus=docsIetfQosServiceClassPolicyStatus, docsIetfQosPktClassInetDestMask=docsIetfQosPktClassInetDestMask, docsIetfQosServiceFlowLogControl=docsIetfQosServiceFlowLogControl, docsIetfQosSID=docsIetfQosSID, docsIetfQosServiceFlowLogPrimary=docsIetfQosServiceFlowLogPrimary, docsIetfQosCmtsCmMac=docsIetfQosCmtsCmMac, docsIetfQosCmtsMacToSrvFlowEntry=docsIetfQosCmtsMacToSrvFlowEntry, docsIetfQosServiceFlowPHSUnknowns=docsIetfQosServiceFlowPHSUnknowns, docsIetfQosServiceClassRequestPolicy=docsIetfQosServiceClassRequestPolicy, docsIetfQosParamSetTolPollJitter=docsIetfQosParamSetTolPollJitter, docsIetfQosServiceClassTosAndMask=docsIetfQosServiceClassTosAndMask, docsIetfQosGroups=docsIetfQosGroups, docsIetfQosServiceClassGroup=docsIetfQosServiceClassGroup, docsIetfQosParamSetNomPollInterval=docsIetfQosParamSetNomPollInterval, docsIetfQosServiceClassPolicyName=docsIetfQosServiceClassPolicyName, docsIetfQosDCCReqs=docsIetfQosDCCReqs, docsIetfQosServiceClassPolicyTable=docsIetfQosServiceClassPolicyTable, docsIetfQosServiceFlowPrimary=docsIetfQosServiceFlowPrimary, docsIetfQosPktClassPkts=docsIetfQosPktClassPkts, docsIetfQosServiceClassNomGrantInterval=docsIetfQosServiceClassNomGrantInterval, docsIetfQosDSCRsps=docsIetfQosDSCRsps, docsIetfQosUpstreamStatsEntry=docsIetfQosUpstreamStatsEntry, docsIetfQosIfDirection=docsIetfQosIfDirection, docsIetfQosServiceFlowStatsTable=docsIetfQosServiceFlowStatsTable, docsIetfQosPHSVerify=docsIetfQosPHSVerify, docsIetfQosConformance=docsIetfQosConformance, docsIetfQosPktClassDestMacMask=docsIetfQosPktClassDestMacMask, docsIetfQosParamSetAdmittedTimeout=docsIetfQosParamSetAdmittedTimeout, docsIetfQosServiceFlowTimeCreated=docsIetfQosServiceFlowTimeCreated, docsIetfQosMIBObjects=docsIetfQosMIBObjects, docsIetfQosParamSetMaxTrafficRate=docsIetfQosParamSetMaxTrafficRate, docsIetfQosServiceClassMaxTrafficRate=docsIetfQosServiceClassMaxTrafficRate, docsIetfQosCompliance=docsIetfQosCompliance, docsIetfQosServiceClassNomPollInterval=docsIetfQosServiceClassNomPollInterval, docsIetfQosServiceClassSchedulingType=docsIetfQosServiceClassSchedulingType, docsIetfQosServiceFlowLogCmMac=docsIetfQosServiceFlowLogCmMac, docsIetfQosServiceClassStatus=docsIetfQosServiceClassStatus, docsIetfQosCompliances=docsIetfQosCompliances, docsIetfQosPktClassTable=docsIetfQosPktClassTable, docsIetfQosPktClassPriority=docsIetfQosPktClassPriority, docsIetfQosPHSMask=docsIetfQosPHSMask, docsIetfQosPktClassId=docsIetfQosPktClassId, docsIetfQosDCCs=docsIetfQosDCCs, docsIetfQosDSCAcks=docsIetfQosDSCAcks, docsIetfQosDynamicChanges=docsIetfQosDynamicChanges, docsIetfQosServiceFlowLogIndex=docsIetfQosServiceFlowLogIndex, docsIetfQosServiceFlowLogPolicedDropPkts=docsIetfQosServiceFlowLogPolicedDropPkts, docsIetfQosBaseGroup=docsIetfQosBaseGroup, docsIetfQosPktClassIpTosMask=docsIetfQosPktClassIpTosMask, docsIetfQosServiceClassMaxLatency=docsIetfQosServiceClassMaxLatency, docsIetfQosMIB=docsIetfQosMIB, docsIetfQosPktClassEnetProtocol=docsIetfQosPktClassEnetProtocol, docsIetfQosParamSetBitMap=docsIetfQosParamSetBitMap, docsIetfQosParamSetUnsolicitGrantSize=docsIetfQosParamSetUnsolicitGrantSize, docsIetfQosServiceFlowLogDirection=docsIetfQosServiceFlowLogDirection, docsIetfQosServiceFlowStatsEntry=docsIetfQosServiceFlowStatsEntry, docsIetfQosDynamicDeletes=docsIetfQosDynamicDeletes, docsIetfQosUpstreamFragDiscards=docsIetfQosUpstreamFragDiscards, docsIetfQosServiceClassDSCPOverwrite=docsIetfQosServiceClassDSCPOverwrite, docsIetfQosParamSetType=docsIetfQosParamSetType, docsIetfQosDSARsps=docsIetfQosDSARsps, docsIetfQosServiceFlowLogIfIndex=docsIetfQosServiceFlowLogIfIndex, docsIetfQosPktClassIpProtocol=docsIetfQosPktClassIpProtocol, docsIetfQosParamSetMaxConcatBurst=docsIetfQosParamSetMaxConcatBurst, docsIetfQosServiceFlowSID=docsIetfQosServiceFlowSID, docsIetfQosServiceClassMaxTrafficBurst=docsIetfQosServiceClassMaxTrafficBurst, DocsIetfQosSchedulingType=DocsIetfQosSchedulingType, docsIetfQosPktClassIpTosHigh=docsIetfQosPktClassIpTosHigh, docsIetfQosParamSetTolGrantJitter=docsIetfQosParamSetTolGrantJitter, docsIetfQosServiceFlowPolicedDelayPkts=docsIetfQosServiceFlowPolicedDelayPkts, docsIetfQosServiceClassAdmittedTimeout=docsIetfQosServiceClassAdmittedTimeout, docsIetfQosDynamicServiceStatsTable=docsIetfQosDynamicServiceStatsTable, docsIetfQosPktClassEnetProtocolType=docsIetfQosPktClassEnetProtocolType, docsIetfQosServiceClassUnsolicitGrantSize=docsIetfQosServiceClassUnsolicitGrantSize, docsIetfQosPktClassInetSourceAddr=docsIetfQosPktClassInetSourceAddr, docsIetfQosPktClassDirection=docsIetfQosPktClassDirection, docsIetfQosCmtsGroup=docsIetfQosCmtsGroup, docsIetfQosParamSetSchedulingType=docsIetfQosParamSetSchedulingType, docsIetfQosPktClassIpTosLow=docsIetfQosPktClassIpTosLow, docsIetfQosServiceFlowId=docsIetfQosServiceFlowId, docsIetfQosDynamicAdds=docsIetfQosDynamicAdds, docsIetfQosUpstreamConcatBursts=docsIetfQosUpstreamConcatBursts, docsIetfQosCmtsIfIndex=docsIetfQosCmtsIfIndex, docsIetfQosParamSetEntry=docsIetfQosParamSetEntry, docsIetfQosPktClassSourceMacAddr=docsIetfQosPktClassSourceMacAddr, docsIetfQosServiceClassTable=docsIetfQosServiceClassTable, docsIetfQosParamSetTable=docsIetfQosParamSetTable, docsIetfQosUpstreamStatsTable=docsIetfQosUpstreamStatsTable, docsIetfQosServiceClassTolPollJitter=docsIetfQosServiceClassTolPollJitter, docsIetfQosParamSetPriority=docsIetfQosParamSetPriority, docsIetfQosPktClassUserPriLow=docsIetfQosPktClassUserPriLow, docsIetfQosPktClassStateActive=docsIetfQosPktClassStateActive, docsIetfQosPktClassInetDestAddr=docsIetfQosPktClassInetDestAddr, docsIetfQosPktClassInetAddressType=docsIetfQosPktClassInetAddressType, docsIetfQosParamSetMaxTrafficBurst=docsIetfQosParamSetMaxTrafficBurst, docsIetfQosServiceClassGrantsPerInterval=docsIetfQosServiceClassGrantsPerInterval, docsIetfQosServiceClassMinReservedRate=docsIetfQosServiceClassMinReservedRate, docsIetfQosServiceFlowLogOctets=docsIetfQosServiceFlowLogOctets, DocsIetfQosBitRate=DocsIetfQosBitRate, docsIetfQosServiceFlowLogPolicedDelayPkts=docsIetfQosServiceFlowLogPolicedDelayPkts, docsIetfQosServiceFlowLogTimeCreated=docsIetfQosServiceFlowLogTimeCreated, docsIetfQosServiceFlowOctets=docsIetfQosServiceFlowOctets, docsIetfQosDSDReqs=docsIetfQosDSDReqs, docsIetfQosServiceFlowLogSFID=docsIetfQosServiceFlowLogSFID, docsIetfQosServiceFlowLogTimeDeleted=docsIetfQosServiceFlowLogTimeDeleted, docsIetfQosNotifications=docsIetfQosNotifications, docsIetfQosPktClassVlanId=docsIetfQosPktClassVlanId, docsIetfQosPktClassUserPriHigh=docsIetfQosPktClassUserPriHigh, docsIetfQosServiceClassTosOrMask=docsIetfQosServiceClassTosOrMask, docsIetfQosServiceClassEntry=docsIetfQosServiceClassEntry, docsIetfQosPHSIndex=docsIetfQosPHSIndex, docsIetfQosServiceFlowLogEntry=docsIetfQosServiceFlowLogEntry, docsIetfQosServiceFlowLogServiceClassName=docsIetfQosServiceFlowLogServiceClassName, docsIetfQosServiceClassPolicyIndex=docsIetfQosServiceClassPolicyIndex, docsIetfQosServiceClassPolicyStorageType=docsIetfQosServiceClassPolicyStorageType, docsIetfQosUpstreamFragments=docsIetfQosUpstreamFragments, docsIetfQosDSAAcks=docsIetfQosDSAAcks, docsIetfQosPktClassDestMacAddr=docsIetfQosPktClassDestMacAddr, docsIetfQosServiceClassTolGrantJitter=docsIetfQosServiceClassTolGrantJitter, docsIetfQosServiceClassActiveTimeout=docsIetfQosServiceClassActiveTimeout, docsIetfQosPktClassSourcePortEnd=docsIetfQosPktClassSourcePortEnd, docsIetfQosPHSTable=docsIetfQosPHSTable, docsIetfQosPHSEntry=docsIetfQosPHSEntry, docsIetfQosDSAReqs=docsIetfQosDSAReqs, docsIetfQosPktClassDestPortEnd=docsIetfQosPktClassDestPortEnd, docsIetfQosPktClassEntry=docsIetfQosPktClassEntry, docsIetfQosDCCRsps=docsIetfQosDCCRsps, docsIetfQosParamSetTosAndMask=docsIetfQosParamSetTosAndMask, docsIetfQosParamSetGrantsPerInterval=docsIetfQosParamSetGrantsPerInterval, docsIetfQosServiceClassPolicyRulePriority=docsIetfQosServiceClassPolicyRulePriority, docsIetfQosPHSField=docsIetfQosPHSField, docsIetfQosParamSetMinReservedPkt=docsIetfQosParamSetMinReservedPkt, DocsIetfQosRfMacIfDirection=DocsIetfQosRfMacIfDirection, docsIetfQosParamSetMinReservedRate=docsIetfQosParamSetMinReservedRate, docsIetfQosCmtsServiceFlowId=docsIetfQosCmtsServiceFlowId, docsIetfQosServiceFlowTimeActive=docsIetfQosServiceFlowTimeActive, docsIetfQosServiceFlowPolicedDropPkts=docsIetfQosServiceFlowPolicedDropPkts, docsIetfQosPHSSize=docsIetfQosPHSSize, docsIetfQosServiceClassMinReservedPkt=docsIetfQosServiceClassMinReservedPkt, docsIetfQosServiceClassDirection=docsIetfQosServiceClassDirection, docsIetfQosDynamicChangeFails=docsIetfQosDynamicChangeFails, docsIetfQosDSDRsps=docsIetfQosDSDRsps, docsIetfQosParamSetGroup=docsIetfQosParamSetGroup, docsIetfQosParamSetServiceClassName=docsIetfQosParamSetServiceClassName, PYSNMP_MODULE_ID=docsIetfQosMIB, docsIetfQosParamSetRequestPolicyOct=docsIetfQosParamSetRequestPolicyOct, docsIetfQosServiceFlowEntry=docsIetfQosServiceFlowEntry, docsIetfQosServiceClassPolicyEntry=docsIetfQosServiceClassPolicyEntry, docsIetfQosPktClassInetSourceMask=docsIetfQosPktClassInetSourceMask, docsIetfQosPktClassSourcePortStart=docsIetfQosPktClassSourcePortStart, docsIetfQosDynamicServiceStatsEntry=docsIetfQosDynamicServiceStatsEntry, docsIetfQosServiceFlowLogTimeActive=docsIetfQosServiceFlowLogTimeActive, docsIetfQosServiceFlowLogPkts=docsIetfQosServiceFlowLogPkts, docsIetfQosServiceClassMaxConcatBurst=docsIetfQosServiceClassMaxConcatBurst, docsIetfQosServiceClassName=docsIetfQosServiceClassName)
