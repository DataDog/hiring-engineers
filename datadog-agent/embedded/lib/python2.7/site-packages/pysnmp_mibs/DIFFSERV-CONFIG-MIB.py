#
# PySNMP MIB module DIFFSERV-CONFIG-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/DIFFSERV-CONFIG-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:07:26 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( Integer, OctetString, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
( Counter64, IpAddress, TimeTicks, Counter32, iso, zeroDotZero, Unsigned32, mib_2, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Bits, Gauge32, ObjectIdentity, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "TimeTicks", "Counter32", "iso", "zeroDotZero", "Unsigned32", "mib-2", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Bits", "Gauge32", "ObjectIdentity")
( StorageType, DateAndTime, RowPointer, TextualConvention, DisplayString, RowStatus, ) = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DateAndTime", "RowPointer", "TextualConvention", "DisplayString", "RowStatus")
diffServConfigMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 108)).setRevisions(("2004-01-22 00:00",))
if mibBuilder.loadTexts: diffServConfigMib.setLastUpdated('200401220000Z')
if mibBuilder.loadTexts: diffServConfigMib.setOrganization('SNMPCONF WG')
if mibBuilder.loadTexts: diffServConfigMib.setContactInfo('SNMPCONF Working Group\n        http://www.ietf.org/html.charters/snmpconf-charter.html\n        WG mailing list: snmpconf@snmp.com\n\n        Editors:\n        Harrie Hazewinkel\n        I.Net\n        via Darwin 85\n        20019 - Settimo Milanese (MI)\n        Italy\n        EMail: harrie@inet.it\n\n        David Partain\n        Ericsson AB\n        P.O. Box 1248\n        SE-581 12 Linkoping\n        Sweden\n        E-mail: David.Partain@ericsson.com')
if mibBuilder.loadTexts: diffServConfigMib.setDescription("This MIB module contains differentiated services\n        specific managed objects to perform higher-level\n        configuration management.  This MIB allows policies\n        to use 'templates' to instantiate Differentiated\n        Services functional datapath configurations to\n        be assigned (associated with an interface and\n        direction) when a policy is activated.\n\n        Copyright (C) The Internet Society (2004).  This version\n        of this MIB module is part of RFC 3747;  see the RFC\n        itself for full legal notices.")
diffServConfigMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 1))
diffServConfigMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 2))
diffServConfigTable = MibTable((1, 3, 6, 1, 2, 1, 108, 1, 2), )
if mibBuilder.loadTexts: diffServConfigTable.setDescription("A table which defines the various per-hop-behaviors\n       for which the system has default 'templates'.")
diffServConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 108, 1, 2, 1), ).setIndexNames((0, "DIFFSERV-CONFIG-MIB", "diffServConfigId"))
if mibBuilder.loadTexts: diffServConfigEntry.setDescription('An entry defining a per-hop-behavior.  Each entry in\n       this table combines the various parameters (entries)\n       into a specific per-hop-behavior.  Entries in this\n       table might be defined by a vendor (pre-configured)\n       or defined by a management application.')
diffServConfigId = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1,116)))
if mibBuilder.loadTexts: diffServConfigId.setDescription('A unique id for the per-hop-behavior policy for at\n       least the SNMP agent.  For ease of administration the\n       value may be unique within an administrative domain,\n       but this is not required.\n\n       The range of up to 116 octets is chosen to stay within\n       the SMI limit of 128 sub-identifiers in an object\n       identifier.')
diffServConfigDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigDescr.setDescription("A human-readable description to identify this defined\n       per-hop-behavior.  Note that this is an SnmpAdminString,\n       which permits UTF-8 strings.  An administratively assigned\n       identifier for a template that would be unique within\n       an administrative domain.  It is up to the management\n       applications to agree how these are assigned within the\n       administrative domain.  Once a description, such as\n       'EF' is assigned, that has a certain set of parameters\n       that achieve 'EF' from box to box. Management\n       application code or script code can then scan\n       the table to find the proper template and then\n       assign it.")
diffServConfigOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigOwner.setDescription('The owner who created this entry.')
diffServConfigLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServConfigLastChange.setDescription('The date and time when this entry was last changed.')
diffServConfigStart = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 5), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigStart.setDescription('The pointer to a functional datapath configuration template as\n       set up in the DIFFSERV-MIB.  This RowPointer should\n       point to an instance of one of:\n         diffServClfrEntry\n         diffServMeterEntry\n         diffServActionEntry\n         diffServAlgDropEntry\n         diffServQEntry\n\n\n       A value of zeroDotZero in this attribute indicates no\n       further Diffserv treatment is performed on traffic of\n       this functional datapath.  This also means that the\n       template described by this row is not defined.\n\n       If the row pointed to does not exist, the treatment\n       is as if this attribute contains a value of zeroDotZero.')
diffServConfigStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigStorage.setDescription("The type of storage used for this row.\n\n       Since an entry in this table serves as a starting\n       point for a configuration, it is recommended that\n       all entries comprising the configuration started by\n       diffServConfigStart follow the storage type of this\n       entry.  Otherwise, after agent reboots a configuration\n       may differ.  It may very well be that the agent is\n       not capable of detecting such changes and therefore,\n       the management application should verify the correct\n       configuration after a reboot.  Rows with a StorageType\n       of 'permanent' do not need to allow write access to\n       any of the columnar objects in that row.")
diffServConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigStatus.setDescription('RowStatus object used for creation and deletion of\n       rows in this table.  All writable objects in this row\n       may be modified at any time.')
diffServConfigMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 2, 1))
diffServConfigMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 2, 2))
diffServConfigMIBFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 108, 2, 1, 1)).setObjects(*(("DIFFSERV-CONFIG-MIB", "diffServConfigMIBConfigGroup"),))
if mibBuilder.loadTexts: diffServConfigMIBFullCompliance.setDescription("The full compliance for this MIB module.\n\n       For this compliance level the 'diffServMIBFullCompliance'\n       must be met, since this MIB module depends on it in order\n       to provide the configuration entries.\n       ")
diffServConfigMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 108, 2, 2, 1)).setObjects(*(("DIFFSERV-CONFIG-MIB", "diffServConfigDescr"), ("DIFFSERV-CONFIG-MIB", "diffServConfigOwner"), ("DIFFSERV-CONFIG-MIB", "diffServConfigLastChange"), ("DIFFSERV-CONFIG-MIB", "diffServConfigStart"), ("DIFFSERV-CONFIG-MIB", "diffServConfigStorage"), ("DIFFSERV-CONFIG-MIB", "diffServConfigStatus"),))
if mibBuilder.loadTexts: diffServConfigMIBConfigGroup.setDescription('The per-hop-behavior Group defines the MIB objects that\n       describe the configuration template for the per-hop-behavior.')
mibBuilder.exportSymbols("DIFFSERV-CONFIG-MIB", diffServConfigOwner=diffServConfigOwner, diffServConfigMIBConfigGroup=diffServConfigMIBConfigGroup, diffServConfigEntry=diffServConfigEntry, diffServConfigMib=diffServConfigMib, diffServConfigStatus=diffServConfigStatus, diffServConfigTable=diffServConfigTable, diffServConfigStart=diffServConfigStart, diffServConfigMIBGroups=diffServConfigMIBGroups, diffServConfigId=diffServConfigId, diffServConfigMIBConformance=diffServConfigMIBConformance, diffServConfigStorage=diffServConfigStorage, diffServConfigMIBCompliances=diffServConfigMIBCompliances, diffServConfigDescr=diffServConfigDescr, PYSNMP_MODULE_ID=diffServConfigMib, diffServConfigMIBFullCompliance=diffServConfigMIBFullCompliance, diffServConfigMIBObjects=diffServConfigMIBObjects, diffServConfigLastChange=diffServConfigLastChange)
