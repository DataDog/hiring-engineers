#
# PySNMP MIB module RADIUS-AUTH-SERVER-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/RADIUS-AUTH-SERVER-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:25:34 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( OctetString, Integer, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Counter64, Counter32, iso, MibIdentifier, TimeTicks, NotificationType, IpAddress, mib_2, Gauge32, ModuleIdentity, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Counter64", "Counter32", "iso", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "mib-2", "Gauge32", "ModuleIdentity")
( TextualConvention, DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
radiusAuthServMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 67, 1, 1)).setRevisions(("2006-08-21 00:00", "1999-06-11 00:00",))
if mibBuilder.loadTexts: radiusAuthServMIB.setLastUpdated('200608210000Z')
if mibBuilder.loadTexts: radiusAuthServMIB.setOrganization('IETF RADIUS Extensions Working Group.')
if mibBuilder.loadTexts: radiusAuthServMIB.setContactInfo(' Bernard Aboba\n                Microsoft\n                One Microsoft Way\n                Redmond, WA  98052\n                US\n                Phone: +1 425 936 6605\n\n                EMail: bernarda@microsoft.com')
if mibBuilder.loadTexts: radiusAuthServMIB.setDescription('The MIB module for entities implementing the server\n              side of the Remote Authentication Dial-In User\n              Service (RADIUS) authentication protocol.  Copyright\n              (C) The Internet Society (2006).  This version of this\n              MIB module is part of RFC 4669; see the RFC itself for\n              full legal notices.')
radiusMIB = ObjectIdentity((1, 3, 6, 1, 2, 1, 67))
if mibBuilder.loadTexts: radiusMIB.setDescription('The OID assigned to RADIUS MIB work by the IANA.')
radiusAuthentication = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1))
radiusAuthServMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 1, 1))
radiusAuthServ = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1))
radiusAuthServIdent = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServIdent.setDescription("The implementation identification string for the\n              RADIUS authentication server software in use on the\n              system, for example, 'FNS-2.1'.")
radiusAuthServUpTime = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServUpTime.setDescription('If the server has a persistent state (e.g., a\n              process), this value will be the time elapsed (in\n              hundredths of a second) since the server process\n              was started.  For software without persistent state,\n              this value will be zero.')
radiusAuthServResetTime = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServResetTime.setDescription("If the server has a persistent state (e.g., a process)\n              and supports a 'reset' operation (e.g., can be told to\n              re-read configuration files), this value will be the\n              time elapsed (in hundredths of a second) since the\n              server was 'reset.'  For software that does not\n              have persistence or does not support a 'reset'\n              operation, this value will be zero.")
radiusAuthServConfigReset = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("initializing", 3), ("running", 4),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthServConfigReset.setDescription('Status/action object to reinitialize any persistent\n               server state.  When set to reset(2), any persistent\n               server state (such as a process) is reinitialized as\n               if the server had just been started.  This value will\n               never be returned by a read operation.  When read,\n               one of the following values will be returned:\n                   other(1) - server in some unknown state;\n                   initializing(3) - server (re)initializing;\n                   running(4) - server currently running.')
radiusAuthServTotalAccessRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalAccessRequests.setDescription('The number of packets received on the\n\n                authentication port.')
radiusAuthServTotalInvalidRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalInvalidRequests.setDescription('The number of RADIUS Access-Request packets\n               received from unknown addresses.')
radiusAuthServTotalDupAccessRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalDupAccessRequests.setDescription('The number of duplicate RADIUS Access-Request\n              packets received.')
radiusAuthServTotalAccessAccepts = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalAccessAccepts.setDescription('The number of RADIUS Access-Accept packets sent.')
radiusAuthServTotalAccessRejects = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalAccessRejects.setDescription('The number of RADIUS Access-Reject packets sent.')
radiusAuthServTotalAccessChallenges = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets sent.')
radiusAuthServTotalMalformedAccessRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalMalformedAccessRequests.setDescription('The number of malformed RADIUS Access-Request\n             packets received.  Bad authenticators\n             and unknown types are not included as\n             malformed Access-Requests.')
radiusAuthServTotalBadAuthenticators = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalBadAuthenticators.setDescription('The number of RADIUS Authentication-Request packets\n             that contained invalid Message Authenticator\n             attributes received.')
radiusAuthServTotalPacketsDropped = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalPacketsDropped.setDescription('The number of incoming packets\n             silently discarded for some reason other\n             than malformed, bad authenticators or\n             unknown types.')
radiusAuthServTotalUnknownTypes = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServTotalUnknownTypes.setDescription('The number of RADIUS packets of unknown type that\n             were received.')
radiusAuthClientTable = MibTable((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15), )
if mibBuilder.loadTexts: radiusAuthClientTable.setDescription('The (conceptual) table listing the RADIUS\n              authentication clients with which the server shares\n              a secret.')
radiusAuthClientEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1), ).setIndexNames((0, "RADIUS-AUTH-SERVER-MIB", "radiusAuthClientIndex"))
if mibBuilder.loadTexts: radiusAuthClientEntry.setDescription('An entry (conceptual row) representing a RADIUS\n              authentication client with which the server shares a\n              secret.')
radiusAuthClientIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
if mibBuilder.loadTexts: radiusAuthClientIndex.setDescription('A number uniquely identifying each RADIUS\n              authentication client with which this server\n              communicates.')
radiusAuthClientAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientAddress.setDescription('The NAS-IP-Address of the RADIUS authentication client\n              referred to in this table entry.')
radiusAuthClientID = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientID.setDescription('The NAS-Identifier of the RADIUS authentication client\n              referred to in this table entry.  This is not\n              necessarily the same as sysName in MIB II.')
radiusAuthServAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServAccessRequests.setDescription('The number of packets received on the authentication\n\n              port from this client.')
radiusAuthServDupAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServDupAccessRequests.setDescription('The number of duplicate RADIUS Access-Request\n              packets received from this client.')
radiusAuthServAccessAccepts = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServAccessAccepts.setDescription('The number of RADIUS Access-Accept packets\n              sent to this client.')
radiusAuthServAccessRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServAccessRejects.setDescription('The number of RADIUS Access-Reject packets\n              sent to this client.')
radiusAuthServAccessChallenges = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets\n              sent to this client.')
radiusAuthServMalformedAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServMalformedAccessRequests.setDescription('The number of malformed RADIUS Access-Request\n              packets received from this client.\n              Bad authenticators and unknown types are not included\n              as malformed Access-Requests.')
radiusAuthServBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServBadAuthenticators.setDescription('The number of RADIUS Authentication-Request packets\n              that contained invalid Message Authenticator\n              attributes received from this client.')
radiusAuthServPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServPacketsDropped.setDescription('The number of incoming packets from this\n               client silently discarded for some reason other\n               than malformed, bad authenticators or\n               unknown types.')
radiusAuthServUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 15, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServUnknownTypes.setDescription('The number of RADIUS packets of unknown type that\n              were received from this client.')
radiusAuthClientExtTable = MibTable((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16), )
if mibBuilder.loadTexts: radiusAuthClientExtTable.setDescription('The (conceptual) table listing the RADIUS\n              authentication clients with which the server shares\n              a secret.')
radiusAuthClientExtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1), ).setIndexNames((0, "RADIUS-AUTH-SERVER-MIB", "radiusAuthClientExtIndex"))
if mibBuilder.loadTexts: radiusAuthClientExtEntry.setDescription('An entry (conceptual row) representing a RADIUS\n              authentication client with which the server shares a\n              secret.')
radiusAuthClientExtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
if mibBuilder.loadTexts: radiusAuthClientExtIndex.setDescription('A number uniquely identifying each RADIUS\n              authentication client with which this server\n              communicates.')
radiusAuthClientInetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientInetAddressType.setDescription('The type of address format used for the\n                radiusAuthClientInetAddress object.')
radiusAuthClientInetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientInetAddress.setDescription('The IP address of the RADIUS authentication\n                client referred to in this table entry, using\n                the version-neutral IP address format.')
radiusAuthClientExtID = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientExtID.setDescription('The NAS-Identifier of the RADIUS authentication client\n              referred to in this table entry.  This is not\n              necessarily the same as sysName in MIB II.')
radiusAuthServExtAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtAccessRequests.setDescription('The number of packets received on the authentication\n              port from this client.  This counter may experience a\n              discontinuity when the RADIUS Server module within the\n              managed entity is reinitialized, as indicated by the\n              current value of radiusAuthServCounterDiscontinuity.')
radiusAuthServExtDupAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtDupAccessRequests.setDescription('The number of duplicate RADIUS Access-Request\n              packets received from this client.  This counter may\n              experience a discontinuity when the RADIUS Server\n              module within the managed entity is reinitialized, as\n              indicated by the current value of\n              radiusAuthServCounterDiscontinuity.')
radiusAuthServExtAccessAccepts = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtAccessAccepts.setDescription('The number of RADIUS Access-Accept packets\n              sent to this client.  This counter may experience a\n              discontinuity when the RADIUS Server module within the\n              managed entity is reinitialized, as indicated by the\n              current value of radiusAuthServCounterDiscontinuity.')
radiusAuthServExtAccessRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtAccessRejects.setDescription('The number of RADIUS Access-Reject packets\n              sent to this client.  This counter may experience a\n              discontinuity when the RADIUS Server module within the\n\n              managed entity is reinitialized, as indicated by the\n              current value of radiusAuthServCounterDiscontinuity.')
radiusAuthServExtAccessChallenges = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets\n              sent to this client.  This counter may experience a\n              discontinuity when the RADIUS Server module within the\n              managed entity is reinitialized, as indicated by the\n              current value of radiusAuthServCounterDiscontinuity.')
radiusAuthServExtMalformedAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtMalformedAccessRequests.setDescription('The number of malformed RADIUS Access-Request\n              packets received from this client.  Bad authenticators\n              and unknown types are not included as malformed\n              Access-Requests.  This counter may experience a\n              discontinuity when the RADIUS Server module within the\n              managed entity is reinitialized, as indicated by the\n              current value of radiusAuthServCounterDiscontinuity.')
radiusAuthServExtBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtBadAuthenticators.setDescription('The number of RADIUS Authentication-Request packets\n              that contained invalid Message Authenticator\n              attributes received from this client.  This counter\n              may experience a discontinuity when the RADIUS Server\n              module within the managed entity is reinitialized, as\n              indicated by the current value of\n              radiusAuthServCounterDiscontinuity.')
radiusAuthServExtPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtPacketsDropped.setDescription('The number of incoming packets from this client\n              silently discarded for some reason other than\n              malformed, bad authenticators or unknown types.\n              This counter may experience a discontinuity when the\n              RADIUS Server module within the managed entity is\n              reinitialized, as indicated by the current value of\n              radiusAuthServCounterDiscontinuity.')
radiusAuthServExtUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServExtUnknownTypes.setDescription('The number of RADIUS packets of unknown type that\n              were received from this client.  This counter may\n              experience a discontinuity when the RADIUS Server\n              module within the managed entity is reinitialized, as\n              indicated by the current value of\n              radiusAuthServCounterDiscontinuity.')
radiusAuthServCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 1, 1, 1, 16, 1, 14), TimeTicks()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServCounterDiscontinuity.setDescription('The number of centiseconds since the last\n                discontinuity in the RADIUS Server counters.\n                A discontinuity may be the result of a\n                reinitialization of the RADIUS Server module\n                within the managed entity.')
radiusAuthServMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 1, 2))
radiusAuthServMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 1, 2, 1))
radiusAuthServMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 1, 2, 2))
radiusAuthServMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 1, 1, 2, 1, 1)).setObjects(*(("RADIUS-AUTH-SERVER-MIB", "radiusAuthServMIBGroup"),))
if mibBuilder.loadTexts: radiusAuthServMIBCompliance.setDescription('The compliance statement for authentication\n                   servers implementing the RADIUS Authentication\n                   Server MIB.  Implementation of this module is for\n                   IPv4-only entities, or for backwards compatibility\n                   use with entities that support both IPv4 and\n                   IPv6.')
radiusAuthServMIBExtCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 1, 1, 2, 1, 2)).setObjects(*(("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtMIBGroup"),))
if mibBuilder.loadTexts: radiusAuthServMIBExtCompliance.setDescription('The compliance statement for authentication\n                   servers implementing the RADIUS Authentication\n                   Server IPv6 Extensions MIB.  Implementation of\n                   this module is for entities that support IPv6,\n                   or support IPv4 and IPv6.')
radiusAuthServMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 1, 1, 2, 2, 1)).setObjects(*(("RADIUS-AUTH-SERVER-MIB", "radiusAuthServIdent"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServUpTime"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServResetTime"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServConfigReset"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalInvalidRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalDupAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessAccepts"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessRejects"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessChallenges"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalMalformedAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalBadAuthenticators"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalPacketsDropped"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalUnknownTypes"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthClientAddress"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthClientID"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServDupAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServAccessAccepts"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServAccessRejects"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServAccessChallenges"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServMalformedAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServBadAuthenticators"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServPacketsDropped"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServUnknownTypes"),))
if mibBuilder.loadTexts: radiusAuthServMIBGroup.setDescription('The collection of objects providing management of\n             a RADIUS Authentication Server.')
radiusAuthServExtMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 1, 1, 2, 2, 2)).setObjects(*(("RADIUS-AUTH-SERVER-MIB", "radiusAuthServIdent"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServUpTime"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServResetTime"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServConfigReset"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalInvalidRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalDupAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessAccepts"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessRejects"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalAccessChallenges"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalMalformedAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalBadAuthenticators"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalPacketsDropped"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServTotalUnknownTypes"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthClientInetAddressType"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthClientInetAddress"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthClientExtID"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtDupAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtAccessAccepts"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtAccessRejects"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtAccessChallenges"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtMalformedAccessRequests"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtBadAuthenticators"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtPacketsDropped"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServExtUnknownTypes"), ("RADIUS-AUTH-SERVER-MIB", "radiusAuthServCounterDiscontinuity"),))
if mibBuilder.loadTexts: radiusAuthServExtMIBGroup.setDescription('The collection of objects providing management of\n             a RADIUS Authentication Server.')
mibBuilder.exportSymbols("RADIUS-AUTH-SERVER-MIB", PYSNMP_MODULE_ID=radiusAuthServMIB, radiusAuthServExtMalformedAccessRequests=radiusAuthServExtMalformedAccessRequests, radiusAuthServAccessRejects=radiusAuthServAccessRejects, radiusAuthServMIB=radiusAuthServMIB, radiusAuthClientExtIndex=radiusAuthClientExtIndex, radiusAuthServMIBCompliances=radiusAuthServMIBCompliances, radiusAuthServTotalBadAuthenticators=radiusAuthServTotalBadAuthenticators, radiusAuthServCounterDiscontinuity=radiusAuthServCounterDiscontinuity, radiusAuthServMIBObjects=radiusAuthServMIBObjects, radiusAuthServTotalAccessRejects=radiusAuthServTotalAccessRejects, radiusAuthServTotalMalformedAccessRequests=radiusAuthServTotalMalformedAccessRequests, radiusAuthClientID=radiusAuthClientID, radiusAuthServUnknownTypes=radiusAuthServUnknownTypes, radiusAuthClientInetAddressType=radiusAuthClientInetAddressType, radiusAuthServTotalInvalidRequests=radiusAuthServTotalInvalidRequests, radiusAuthServTotalPacketsDropped=radiusAuthServTotalPacketsDropped, radiusAuthServAccessChallenges=radiusAuthServAccessChallenges, radiusAuthClientExtTable=radiusAuthClientExtTable, radiusAuthServExtAccessAccepts=radiusAuthServExtAccessAccepts, radiusAuthServMIBCompliance=radiusAuthServMIBCompliance, radiusAuthServExtAccessRequests=radiusAuthServExtAccessRequests, radiusAuthServExtUnknownTypes=radiusAuthServExtUnknownTypes, radiusAuthServTotalAccessChallenges=radiusAuthServTotalAccessChallenges, radiusAuthServResetTime=radiusAuthServResetTime, radiusAuthClientIndex=radiusAuthClientIndex, radiusAuthServBadAuthenticators=radiusAuthServBadAuthenticators, radiusAuthServExtPacketsDropped=radiusAuthServExtPacketsDropped, radiusAuthServConfigReset=radiusAuthServConfigReset, radiusAuthServMIBGroup=radiusAuthServMIBGroup, radiusAuthServTotalUnknownTypes=radiusAuthServTotalUnknownTypes, radiusAuthServUpTime=radiusAuthServUpTime, radiusAuthClientAddress=radiusAuthClientAddress, radiusAuthServExtAccessRejects=radiusAuthServExtAccessRejects, radiusAuthServDupAccessRequests=radiusAuthServDupAccessRequests, radiusAuthServPacketsDropped=radiusAuthServPacketsDropped, radiusAuthClientExtEntry=radiusAuthClientExtEntry, radiusAuthClientInetAddress=radiusAuthClientInetAddress, radiusAuthServExtMIBGroup=radiusAuthServExtMIBGroup, radiusAuthServ=radiusAuthServ, radiusAuthServMIBGroups=radiusAuthServMIBGroups, radiusAuthServMIBConformance=radiusAuthServMIBConformance, radiusAuthServMIBExtCompliance=radiusAuthServMIBExtCompliance, radiusAuthServTotalAccessAccepts=radiusAuthServTotalAccessAccepts, radiusAuthServAccessRequests=radiusAuthServAccessRequests, radiusAuthServTotalDupAccessRequests=radiusAuthServTotalDupAccessRequests, radiusAuthClientTable=radiusAuthClientTable, radiusAuthClientEntry=radiusAuthClientEntry, radiusAuthClientExtID=radiusAuthClientExtID, radiusAuthServExtBadAuthenticators=radiusAuthServExtBadAuthenticators, radiusAuthServMalformedAccessRequests=radiusAuthServMalformedAccessRequests, radiusAuthServExtDupAccessRequests=radiusAuthServExtDupAccessRequests, radiusAuthServExtAccessChallenges=radiusAuthServExtAccessChallenges, radiusMIB=radiusMIB, radiusAuthServTotalAccessRequests=radiusAuthServTotalAccessRequests, radiusAuthServAccessAccepts=radiusAuthServAccessAccepts, radiusAuthentication=radiusAuthentication, radiusAuthServIdent=radiusAuthServIdent)
