#
# PySNMP MIB module EtherLike-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/EtherLike-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:11:58 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( ObjectIdentifier, OctetString, Integer, ) = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
( ifIndex, InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
( ObjectGroup, NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
( transmission, iso, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, mib_2, TimeTicks, ObjectIdentity, Gauge32, Counter32, NotificationType, MibIdentifier, Integer32, Bits, ) = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "iso", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "mib-2", "TimeTicks", "ObjectIdentity", "Gauge32", "Counter32", "NotificationType", "MibIdentifier", "Integer32", "Bits")
( TextualConvention, DisplayString, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
etherMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 35)).setRevisions(("2003-09-19 00:00", "1999-08-24 04:00", "1998-06-03 21:50", "1994-02-03 04:00",))
if mibBuilder.loadTexts: etherMIB.setLastUpdated('200309190000Z')
if mibBuilder.loadTexts: etherMIB.setOrganization('IETF Ethernet Interfaces and Hub MIB\n                        Working Group')
if mibBuilder.loadTexts: etherMIB.setContactInfo('WG E-mail: hubmib@ietf.org\n             To subscribe: hubmib-request@ietf.org\n\n                    Chair: Dan Romascanu\n                   Postal: Avaya Inc.\n                           Atidum Technology Park, Bldg. 3\n                           Tel Aviv 61131\n                           Israel\n                      Tel: +972 3 645 8414\n                   E-mail: dromasca@avaya.com\n\n                  Editor: John Flick\n                  Postal: Hewlett-Packard Company\n                          8000 Foothills Blvd. M/S 5557\n                          Roseville, CA 95747-5557\n                          USA\n                     Tel: +1 916 785 4018\n                     Fax: +1 916 785 1199\n                  E-mail: johnf@rose.hp.com')
if mibBuilder.loadTexts: etherMIB.setDescription("The MIB module to describe generic objects for\n                       ethernet-like network interfaces.\n\n                       The following reference is used throughout this\n                       MIB module:\n\n                       [IEEE 802.3 Std] refers to:\n                          IEEE Std 802.3, 2002 Edition: 'IEEE Standard\n                          for Information technology -\n                          Telecommunications and information exchange\n                          between systems - Local and metropolitan\n                          area networks - Specific requirements -\n                          Part 3: Carrier sense multiple access with\n                          collision detection (CSMA/CD) access method\n                          and physical layer specifications', as\n                          amended by IEEE Std 802.3ae-2002:\n                          'Amendment: Media Access Control (MAC)\n                          Parameters, Physical Layer, and Management\n                          Parameters for 10 Gb/s Operation', August,\n                          2002.\n\n                       Of particular interest is Clause 30, '10 Mb/s,\n                       100 Mb/s, 1000 Mb/s, and 10 Gb/s Management'.\n\n                       Copyright (C) The Internet Society (2003).  This\n                       version of this MIB module is part of RFC 3635;\n                       see the RFC itself for full legal notices.")
etherMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 35, 1))
dot3 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7))
dot3StatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 2), )
if mibBuilder.loadTexts: dot3StatsTable.setDescription('Statistics for a collection of ethernet-like\n                       interfaces attached to a particular system.\n                       There will be one row in this table for each\n                       ethernet-like interface in the system.')
dot3StatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 2, 1), ).setIndexNames((0, "EtherLike-MIB", "dot3StatsIndex"))
if mibBuilder.loadTexts: dot3StatsEntry.setDescription('Statistics for a particular interface to an\n                       ethernet-like medium.')
dot3StatsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsIndex.setDescription('An index value that uniquely identifies an\n                       interface to an ethernet-like medium.  The\n                       interface identified by a particular value of\n                       this index is the same interface as identified\n                       by the same value of ifIndex.')
dot3StatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsAlignmentErrors.setDescription("A count of frames received on a particular\n                       interface that are not an integral number of\n                       octets in length and do not pass the FCS check.\n\n                       The count represented by an instance of this\n                       object is incremented when the alignmentError\n                       status is returned by the MAC service to the\n                       LLC (or other MAC user). Received frames for\n                       which multiple error conditions pertain are,\n                       according to the conventions of IEEE 802.3\n                       Layer Management, counted exclusively according\n                       to the error status presented to the LLC.\n\n                       This counter does not increment for group\n                       encoding schemes greater than 4 bits per group.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCStatsAlignmentErrors object for 10 Gb/s\n                       or faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3StatsFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFCSErrors.setDescription("A count of frames received on a particular\n                       interface that are an integral number of octets\n                       in length but do not pass the FCS check.  This\n                       count does not include frames received with\n                       frame-too-long or frame-too-short error.\n\n                       The count represented by an instance of this\n                       object is incremented when the frameCheckError\n                       status is returned by the MAC service to the\n                       LLC (or other MAC user). Received frames for\n                       which multiple error conditions pertain are,\n                       according to the conventions of IEEE 802.3\n                       Layer Management, counted exclusively according\n                       to the error status presented to the LLC.\n\n                       Note:  Coding errors detected by the physical\n                       layer for speeds above 10 Mb/s will cause the\n                       frame to fail the FCS check.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCStatsFCSErrors object for 10 Gb/s or\n                       faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3StatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSingleCollisionFrames.setDescription('A count of frames that are involved in a single\n                       collision, and are subsequently transmitted\n                       successfully.\n\n                       A frame that is counted by an instance of this\n                       object is also counted by the corresponding\n                       instance of either the ifOutUcastPkts,\n                       ifOutMulticastPkts, or ifOutBroadcastPkts,\n                       and is not counted by the corresponding\n                       instance of the dot3StatsMultipleCollisionFrames\n                       object.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsMultipleCollisionFrames.setDescription('A count of frames that are involved in more\n                       than one collision and are subsequently\n                       transmitted successfully.\n\n                       A frame that is counted by an instance of this\n                       object is also counted by the corresponding\n                       instance of either the ifOutUcastPkts,\n                       ifOutMulticastPkts, or ifOutBroadcastPkts,\n                       and is not counted by the corresponding\n                       instance of the dot3StatsSingleCollisionFrames\n                       object.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsSQETestErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSQETestErrors.setDescription('A count of times that the SQE TEST ERROR\n                       is received on a particular interface. The\n                       SQE TEST ERROR is set in accordance with the\n                       rules for verification of the SQE detection\n                       mechanism in the PLS Carrier Sense Function as\n                       described in IEEE Std. 802.3, 2000 Edition,\n                       section 7.2.4.6.\n\n                       This counter does not increment on interfaces\n                       operating at speeds greater than 10 Mb/s, or on\n                       interfaces operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsDeferredTransmissions.setDescription('A count of frames for which the first\n                       transmission attempt on a particular interface\n                       is delayed because the medium is busy.\n\n                       The count represented by an instance of this\n                       object does not include frames involved in\n                       collisions.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsLateCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsLateCollisions.setDescription('The number of times that a collision is\n                       detected on a particular interface later than\n                       one slotTime into the transmission of a packet.\n\n                       A (late) collision included in a count\n                       represented by an instance of this object is\n                       also considered as a (generic) collision for\n                       purposes of other collision-related\n                       statistics.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsExcessiveCollisions.setDescription('A count of frames for which transmission on a\n                       particular interface fails due to excessive\n                       collisions.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsInternalMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsInternalMacTransmitErrors.setDescription("A count of frames for which transmission on a\n                       particular interface fails due to an internal\n                       MAC sublayer transmit error. A frame is only\n                       counted by an instance of this object if it is\n                       not counted by the corresponding instance of\n                       either the dot3StatsLateCollisions object, the\n                       dot3StatsExcessiveCollisions object, or the\n                       dot3StatsCarrierSenseErrors object.\n\n                       The precise meaning of the count represented by\n                       an instance of this object is implementation-\n                       specific.  In particular, an instance of this\n                       object may represent a count of transmission\n                       errors on a particular interface that are not\n                       otherwise counted.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCStatsInternalMacTransmitErrors object for\n                       10 Gb/s or faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3StatsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsCarrierSenseErrors.setDescription('The number of times that the carrier sense\n                       condition was lost or never asserted when\n                       attempting to transmit a frame on a particular\n                       interface.\n\n                       The count represented by an instance of this\n                       object is incremented at most once per\n                       transmission attempt, even if the carrier sense\n                       condition fluctuates during a transmission\n                       attempt.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3StatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsFrameTooLongs.setDescription("A count of frames received on a particular\n                       interface that exceed the maximum permitted\n                       frame size.\n\n                       The count represented by an instance of this\n                       object is incremented when the frameTooLong\n                       status is returned by the MAC service to the\n                       LLC (or other MAC user). Received frames for\n                       which multiple error conditions pertain are,\n                       according to the conventions of IEEE 802.3\n                       Layer Management, counted exclusively according\n                       to the error status presented to the LLC.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 80 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCStatsFrameTooLongs object for 10 Gb/s\n                       or faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3StatsInternalMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsInternalMacReceiveErrors.setDescription("A count of frames for which reception on a\n                       particular interface fails due to an internal\n                       MAC sublayer receive error. A frame is only\n                       counted by an instance of this object if it is\n                       not counted by the corresponding instance of\n                       either the dot3StatsFrameTooLongs object, the\n                       dot3StatsAlignmentErrors object, or the\n                       dot3StatsFCSErrors object.\n\n                       The precise meaning of the count represented by\n                       an instance of this object is implementation-\n                       specific.  In particular, an instance of this\n                       object may represent a count of receive errors\n                       on a particular interface that are not\n                       otherwise counted.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCStatsInternalMacReceiveErrors object for\n                       10 Gb/s or faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3StatsEtherChipSet = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 17), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsEtherChipSet.setDescription('******** THIS OBJECT IS DEPRECATED ********\n\n                       This object contains an OBJECT IDENTIFIER\n                       which identifies the chipset used to\n                       realize the interface. Ethernet-like\n                       interfaces are typically built out of\n                       several different chips. The MIB implementor\n                       is presented with a decision of which chip\n                       to identify via this object. The implementor\n                       should identify the chip which is usually\n                       called the Medium Access Control chip.\n                       If no such chip is easily identifiable,\n                       the implementor should identify the chip\n                       which actually gathers the transmit\n                       and receive statistics and error\n                       indications. This would allow a\n                       manager station to correlate the\n                       statistics and the chip generating\n                       them, giving it the ability to take\n                       into account any known anomalies\n                       in the chip.\n\n                       This object has been deprecated.  Implementation\n                       feedback indicates that it is of limited use for\n                       debugging network problems in the field, and\n                       the administrative overhead involved in\n                       maintaining a registry of chipset OIDs is not\n                       justified.')
dot3StatsSymbolErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsSymbolErrors.setDescription("For an interface operating at 100 Mb/s, the\n                       number of times there was an invalid data symbol\n                       when a valid carrier was present.\n\n                       For an interface operating in half-duplex mode\n                       at 1000 Mb/s, the number of times the receiving\n                       media is non-idle (a carrier event) for a period\n                       of time equal to or greater than slotTime, and\n                       during which there was at least one occurrence\n                       of an event that causes the PHY to indicate\n                       'Data reception error' or 'carrier extend error'\n                       on the GMII.\n\n                       For an interface operating in full-duplex mode\n                       at 1000 Mb/s, the number of times the receiving\n                       media is non-idle (a carrier event) for a period\n                       of time equal to or greater than minFrameSize,\n                       and during which there was at least one\n                       occurrence of an event that causes the PHY to\n                       indicate 'Data reception error' on the GMII.\n\n                       For an interface operating at 10 Gb/s, the\n                       number of times the receiving media is non-idle\n                       (a carrier event) for a period of time equal to\n                       or greater than minFrameSize, and during which\n                       there was at least one occurrence of an event\n                       that causes the PHY to indicate 'Receive Error'\n                       on the XGMII.\n\n                       The count represented by an instance of this\n                       object is incremented at most once per carrier\n                       event, even if multiple symbol errors occur\n                       during the carrier event.  This count does\n                       not increment if a collision is present.\n\n                       This counter does not increment when the\n                       interface is operating at 10 Mb/s.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCStatsSymbolErrors object for 10 Gb/s\n                       or faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3StatsDuplexStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("unknown", 1), ("halfDuplex", 2), ("fullDuplex", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsDuplexStatus.setDescription("The current mode of operation of the MAC\n                       entity.  'unknown' indicates that the current\n                       duplex mode could not be determined.\n\n                       Management control of the duplex mode is\n                       accomplished through the MAU MIB.  When\n                       an interface does not support autonegotiation,\n                       or when autonegotiation is not enabled, the\n                       duplex mode is controlled using\n                       ifMauDefaultType.  When autonegotiation is\n                       supported and enabled, duplex mode is controlled\n                       using ifMauAutoNegAdvertisedBits.  In either\n                       case, the currently operating duplex mode is\n                       reflected both in this object and in ifMauType.\n\n                       Note that this object provides redundant\n                       information with ifMauType.  Normally, redundant\n                       objects are discouraged.  However, in this\n                       instance, it allows a management application to\n                       determine the duplex status of an interface\n                       without having to know every possible value of\n                       ifMauType.  This was felt to be sufficiently\n                       valuable to justify the redundancy.")
dot3StatsRateControlAbility = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsRateControlAbility.setDescription("'true' for interfaces operating at speeds above\n                       1000 Mb/s that support Rate Control through\n                       lowering the average data rate of the MAC\n                       sublayer, with frame granularity, and 'false'\n                       otherwise.")
dot3StatsRateControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("rateControlOff", 1), ("rateControlOn", 2), ("unknown", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3StatsRateControlStatus.setDescription('The current Rate Control mode of operation of\n                       the MAC sublayer of this interface.')
dot3CollTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 5), )
if mibBuilder.loadTexts: dot3CollTable.setDescription('A collection of collision histograms for a\n                       particular set of interfaces.')
dot3CollEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EtherLike-MIB", "dot3CollCount"))
if mibBuilder.loadTexts: dot3CollEntry.setDescription('A cell in the histogram of per-frame\n                       collisions for a particular interface.  An\n                       instance of this object represents the\n                       frequency of individual MAC frames for which\n                       the transmission (successful or otherwise) on a\n                       particular interface is accompanied by a\n                       particular number of media collisions.')
dot3CollCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,16)))
if mibBuilder.loadTexts: dot3CollCount.setDescription('The number of per-frame media collisions for\n                       which a particular collision histogram cell\n                       represents the frequency on a particular\n                       interface.')
dot3CollFrequencies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollFrequencies.setDescription('A count of individual MAC frames for which the\n                       transmission (successful or otherwise) on a\n                       particular interface occurs after the\n                       frame has experienced exactly the number\n                       of collisions in the associated\n                       dot3CollCount object.\n\n                       For example, a frame which is transmitted\n                       on interface 77 after experiencing\n                       exactly 4 collisions would be indicated\n                       by incrementing only dot3CollFrequencies.77.4.\n                       No other instance of dot3CollFrequencies would\n                       be incremented in this example.\n\n                       This counter does not increment when the\n                       interface is operating in full-duplex mode.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3ControlTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 9), )
if mibBuilder.loadTexts: dot3ControlTable.setDescription('A table of descriptive and status information\n                       about the MAC Control sublayer on the\n                       ethernet-like interfaces attached to a\n                       particular system.  There will be one row in\n                       this table for each ethernet-like interface in\n                       the system which implements the MAC Control\n                       sublayer.  If some, but not all, of the\n                       ethernet-like interfaces in the system implement\n                       the MAC Control sublayer, there will be fewer\n                       rows in this table than in the dot3StatsTable.')
dot3ControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 9, 1), ).setIndexNames((0, "EtherLike-MIB", "dot3StatsIndex"))
if mibBuilder.loadTexts: dot3ControlEntry.setDescription('An entry in the table, containing information\n                       about the MAC Control sublayer on a single\n                       ethernet-like interface.')
dot3ControlFunctionsSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 9, 1, 1), Bits().clone(namedValues=NamedValues(("pause", 0),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ControlFunctionsSupported.setDescription('A list of the possible MAC Control functions\n                       implemented for this interface.')
dot3ControlInUnknownOpcodes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ControlInUnknownOpcodes.setDescription("A count of MAC Control frames received on this\n                       interface that contain an opcode that is not\n                       supported by this device.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCControlInUnknownOpcodes object for 10 Gb/s\n                       or faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3HCControlInUnknownOpcodes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCControlInUnknownOpcodes.setDescription('A count of MAC Control frames received on this\n                       interface that contain an opcode that is not\n                       supported by this device.\n\n                       This counter is a 64 bit version of\n                       dot3ControlInUnknownOpcodes.  It should be used\n                       on interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3PauseTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 10), )
if mibBuilder.loadTexts: dot3PauseTable.setDescription("A table of descriptive and status information\n                       about the MAC Control PAUSE function on the\n                       ethernet-like interfaces attached to a\n                       particular system. There will be one row in\n                       this table for each ethernet-like interface in\n                       the system which supports the MAC Control PAUSE\n                       function (i.e., the 'pause' bit in the\n                       corresponding instance of\n                       dot3ControlFunctionsSupported is set).  If some,\n                       but not all, of the ethernet-like interfaces in\n                       the system implement the MAC Control PAUSE\n                       function (for example, if some interfaces only\n                       support half-duplex), there will be fewer rows\n                       in this table than in the dot3StatsTable.")
dot3PauseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 10, 1), ).setIndexNames((0, "EtherLike-MIB", "dot3StatsIndex"))
if mibBuilder.loadTexts: dot3PauseEntry.setDescription('An entry in the table, containing information\n                       about the MAC Control PAUSE function on a single\n                       ethernet-like interface.')
dot3PauseAdminMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3PauseAdminMode.setDescription("This object is used to configure the default\n                       administrative PAUSE mode for this interface.\n\n                       This object represents the\n                       administratively-configured PAUSE mode for this\n                       interface.  If auto-negotiation is not enabled\n                       or is not implemented for the active MAU\n                       attached to this interface, the value of this\n                       object determines the operational PAUSE mode\n                       of the interface whenever it is operating in\n                       full-duplex mode.  In this case, a set to this\n                       object will force the interface into the\n                       specified mode.\n\n                       If auto-negotiation is implemented and enabled\n                       for the MAU attached to this interface, the\n                       PAUSE mode for this interface is determined by\n                       auto-negotiation, and the value of this object\n                       denotes the mode to which the interface will\n                       automatically revert if/when auto-negotiation is\n                       later disabled.  Note that when auto-negotiation\n                       is running, administrative control of the PAUSE\n                       mode may be accomplished using the\n                       ifMauAutoNegCapAdvertisedBits object in the\n                       MAU-MIB.\n\n                       Note that the value of this object is ignored\n                       when the interface is not operating in\n                       full-duplex mode.\n\n                       An attempt to set this object to\n                       'enabledXmit(2)' or 'enabledRcv(3)' will fail\n                       on interfaces that do not support operation\n                       at greater than 100 Mb/s.")
dot3PauseOperMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3PauseOperMode.setDescription("This object reflects the PAUSE mode currently\n                       in use on this interface, as determined by\n                       either (1) the result of the auto-negotiation\n                       function or (2) if auto-negotiation is not\n                       enabled or is not implemented for the active MAU\n                       attached to this interface, by the value of\n                       dot3PauseAdminMode.  Interfaces operating at\n                       100 Mb/s or less will never return\n                       'enabledXmit(2)' or 'enabledRcv(3)'.  Interfaces\n                       operating in half-duplex mode will always return\n                       'disabled(1)'.  Interfaces on which\n                       auto-negotiation is enabled but not yet\n                       completed should return the value\n                       'disabled(1)'.")
dot3InPauseFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3InPauseFrames.setDescription("A count of MAC Control frames received on this\n                       interface with an opcode indicating the PAUSE\n                       operation.\n\n                       This counter does not increment when the\n                       interface is operating in half-duplex mode.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCInPauseFrames object for 10 Gb/s or\n                       faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3OutPauseFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3OutPauseFrames.setDescription("A count of MAC Control frames transmitted on\n                       this interface with an opcode indicating the\n                       PAUSE operation.\n\n                       This counter does not increment when the\n                       interface is operating in half-duplex mode.\n\n                       For interfaces operating at 10 Gb/s, this\n                       counter can roll over in less than 5 minutes if\n                       it is incrementing at its maximum rate.  Since\n                       that amount of time could be less than a\n                       management station's poll cycle time, in order\n                       to avoid a loss of information, a management\n                       station is advised to poll the\n                       dot3HCOutPauseFrames object for 10 Gb/s or\n                       faster interfaces.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3HCInPauseFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCInPauseFrames.setDescription('A count of MAC Control frames received on this\n                       interface with an opcode indicating the PAUSE\n                       operation.\n\n                       This counter does not increment when the\n                       interface is operating in half-duplex mode.\n\n                       This counter is a 64 bit version of\n                       dot3InPauseFrames.  It should be used on\n                       interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCOutPauseFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCOutPauseFrames.setDescription('A count of MAC Control frames transmitted on\n                       this interface with an opcode indicating the\n                       PAUSE operation.\n\n                       This counter does not increment when the\n                       interface is operating in half-duplex mode.\n\n                       This counter is a 64 bit version of\n                       dot3OutPauseFrames.  It should be used on\n                       interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 7, 11), )
if mibBuilder.loadTexts: dot3HCStatsTable.setDescription('A table containing 64-bit versions of error\n                       counters from the dot3StatsTable.  The 32-bit\n                       versions of these counters may roll over quite\n                       quickly on higher speed ethernet interfaces.\n                       The counters that have 64-bit versions in this\n                       table are the counters that apply to full-duplex\n                       interfaces, since 10 Gb/s and faster\n                       ethernet-like interfaces do not support\n                       half-duplex, and very few 1000 Mb/s\n                       ethernet-like interfaces support half-duplex.\n\n                       Entries in this table are recommended for\n                       interfaces capable of operating at 1000 Mb/s or\n                       faster, and are required for interfaces capable\n                       of operating at 10 Gb/s or faster.  Lower speed\n                       ethernet-like interfaces do not need entries in\n                       this table, in which case there may be fewer\n                       entries in this table than in the\n                       dot3StatsTable. However, implementations\n                       containing interfaces with a mix of speeds may\n                       choose to implement entries in this table for\n                       all ethernet-like interfaces.')
dot3HCStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 7, 11, 1), ).setIndexNames((0, "EtherLike-MIB", "dot3StatsIndex"))
if mibBuilder.loadTexts: dot3HCStatsEntry.setDescription('An entry containing 64-bit statistics for a\n                       single ethernet-like interface.')
dot3HCStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCStatsAlignmentErrors.setDescription('A count of frames received on a particular\n                       interface that are not an integral number of\n                       octets in length and do not pass the FCS check.\n\n                       The count represented by an instance of this\n                       object is incremented when the alignmentError\n                       status is returned by the MAC service to the\n                       LLC (or other MAC user). Received frames for\n                       which multiple error conditions pertain are,\n                       according to the conventions of IEEE 802.3\n                       Layer Management, counted exclusively according\n                       to the error status presented to the LLC.\n\n                       This counter does not increment for group\n                       encoding schemes greater than 4 bits per group.\n\n                       This counter is a 64 bit version of\n                       dot3StatsAlignmentErrors.  It should be used\n                       on interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCStatsFCSErrors.setDescription('A count of frames received on a particular\n                       interface that are an integral number of octets\n                       in length but do not pass the FCS check.  This\n                       count does not include frames received with\n                       frame-too-long or frame-too-short error.\n\n                       The count represented by an instance of this\n                       object is incremented when the frameCheckError\n                       status is returned by the MAC service to the\n                       LLC (or other MAC user). Received frames for\n                       which multiple error conditions pertain are,\n                       according to the conventions of IEEE 802.3\n                       Layer Management, counted exclusively according\n                       to the error status presented to the LLC.\n\n                       Note:  Coding errors detected by the physical\n                       layer for speeds above 10 Mb/s will cause the\n                       frame to fail the FCS check.\n\n                       This counter is a 64 bit version of\n                       dot3StatsFCSErrors.  It should be used on\n                       interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCStatsInternalMacTransmitErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCStatsInternalMacTransmitErrors.setDescription('A count of frames for which transmission on a\n                       particular interface fails due to an internal\n                       MAC sublayer transmit error. A frame is only\n                       counted by an instance of this object if it is\n                       not counted by the corresponding instance of\n                       either the dot3StatsLateCollisions object, the\n                       dot3StatsExcessiveCollisions object, or the\n                       dot3StatsCarrierSenseErrors object.\n\n                       The precise meaning of the count represented by\n                       an instance of this object is implementation-\n                       specific.  In particular, an instance of this\n                       object may represent a count of transmission\n                       errors on a particular interface that are not\n                       otherwise counted.\n\n                       This counter is a 64 bit version of\n                       dot3StatsInternalMacTransmitErrors.  It should\n                       be used on interfaces operating at 10 Gb/s or\n                       faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCStatsFrameTooLongs.setDescription('A count of frames received on a particular\n                       interface that exceed the maximum permitted\n                       frame size.\n\n                       The count represented by an instance of this\n                       object is incremented when the frameTooLong\n                       status is returned by the MAC service to the\n                       LLC (or other MAC user). Received frames for\n                       which multiple error conditions pertain are,\n                       according to the conventions of IEEE 802.3\n                       Layer Management, counted exclusively according\n                       to the error status presented to the LLC.\n\n                       This counter is a 64 bit version of\n                       dot3StatsFrameTooLongs.  It should be used on\n                       interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCStatsInternalMacReceiveErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCStatsInternalMacReceiveErrors.setDescription('A count of frames for which reception on a\n                       particular interface fails due to an internal\n                       MAC sublayer receive error. A frame is only\n                       counted by an instance of this object if it is\n                       not counted by the corresponding instance of\n                       either the dot3StatsFrameTooLongs object, the\n                       dot3StatsAlignmentErrors object, or the\n                       dot3StatsFCSErrors object.\n\n                       The precise meaning of the count represented by\n                       an instance of this object is implementation-\n                       specific.  In particular, an instance of this\n                       object may represent a count of receive errors\n                       on a particular interface that are not\n                       otherwise counted.\n\n                       This counter is a 64 bit version of\n                       dot3StatsInternalMacReceiveErrors.  It should be\n                       used on interfaces operating at 10 Gb/s or\n                       faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.')
dot3HCStatsSymbolErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3HCStatsSymbolErrors.setDescription("For an interface operating at 100 Mb/s, the\n                       number of times there was an invalid data symbol\n                       when a valid carrier was present.\n                       For an interface operating in half-duplex mode\n                       at 1000 Mb/s, the number of times the receiving\n                       media is non-idle (a carrier event) for a period\n                       of time equal to or greater than slotTime, and\n                       during which there was at least one occurrence\n                       of an event that causes the PHY to indicate\n                       'Data reception error' or 'carrier extend error'\n                       on the GMII.\n\n                       For an interface operating in full-duplex mode\n                       at 1000 Mb/s, the number of times the receiving\n                       media is non-idle (a carrier event) for a period\n                       of time equal to or greater than minFrameSize,\n                       and during which there was at least one\n                       occurrence of an event that causes the PHY to\n                       indicate 'Data reception error' on the GMII.\n\n                       For an interface operating at 10 Gb/s, the\n                       number of times the receiving media is non-idle\n                       (a carrier event) for a period of time equal to\n                       or greater than minFrameSize, and during which\n                       there was at least one occurrence of an event\n                       that causes the PHY to indicate 'Receive Error'\n                       on the XGMII.\n\n                       The count represented by an instance of this\n                       object is incremented at most once per carrier\n                       event, even if multiple symbol errors occur\n                       during the carrier event.  This count does\n                       not increment if a collision is present.\n\n                       This counter is a 64 bit version of\n                       dot3StatsSymbolErrors.  It should be used on\n                       interfaces operating at 10 Gb/s or faster.\n\n                       Discontinuities in the value of this counter can\n                       occur at re-initialization of the management\n                       system, and at other times as indicated by the\n                       value of ifCounterDiscontinuityTime.")
dot3Tests = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 6))
dot3Errors = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 7))
dot3TestTdr = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 6, 1))
if mibBuilder.loadTexts: dot3TestTdr.setDescription('******** THIS IDENTITY IS DEPRECATED *******\n\n                       The Time-Domain Reflectometry (TDR) test is\n                       specific to ethernet-like interfaces of type\n                       10Base5 and 10Base2.  The TDR value may be\n                       useful in determining the approximate distance\n                       to a cable fault.  It is advisable to repeat\n                       this test to check for a consistent resulting\n                       TDR value, to verify that there is a fault.\n\n                       A TDR test returns as its result the time\n                       interval, measured in 10 MHz ticks or 100 nsec\n                       units, between the start of TDR test\n                       transmission and the subsequent detection of a\n                       collision or deassertion of carrier.  On\n                       successful completion of a TDR test, the result\n                       is stored as the value of an appropriate\n                       instance of an appropriate vendor specific MIB\n                       object, and the OBJECT IDENTIFIER of that\n                       instance is stored in the appropriate instance\n                       of the appropriate test result code object\n                       (thereby indicating where the result has been\n                       stored).\n\n                       This object identity has been deprecated, since\n                       the ifTestTable in the IF-MIB was deprecated,\n                       and there is no longer a standard mechanism for\n                       initiating an interface test.  This left no\n                       standard way of using this object identity.')
dot3TestLoopBack = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 6, 2))
if mibBuilder.loadTexts: dot3TestLoopBack.setDescription('******** THIS IDENTITY IS DEPRECATED *******\n\n                       This test configures the MAC chip and executes\n                       an internal loopback test of memory, data paths,\n                       and the MAC chip logic.  This loopback test can\n                       only be executed if the interface is offline.\n                       Once the test has completed, the MAC chip should\n                       be reinitialized for network operation, but it\n                       should remain offline.\n\n                       If an error occurs during a test, the\n                       appropriate test result object will be set\n                       to indicate a failure.  The two OBJECT\n                       IDENTIFIER values dot3ErrorInitError and\n                       dot3ErrorLoopbackError may be used to provided\n                       more information as values for an appropriate\n                       test result code object.\n\n                       This object identity has been deprecated, since\n                       the ifTestTable in the IF-MIB was deprecated,\n                       and there is no longer a standard mechanism for\n                       initiating an interface test.  This left no\n                       standard way of using this object identity.')
dot3ErrorInitError = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 7, 1))
if mibBuilder.loadTexts: dot3ErrorInitError.setDescription("******** THIS IDENTITY IS DEPRECATED *******\n\n                       Couldn't initialize MAC chip for test.\n\n                       This object identity has been deprecated, since\n                       the ifTestTable in the IF-MIB was deprecated,\n                       and there is no longer a standard mechanism for\n                       initiating an interface test.  This left no\n                       standard way of using this object identity.")
dot3ErrorLoopbackError = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 7, 2))
if mibBuilder.loadTexts: dot3ErrorLoopbackError.setDescription('******** THIS IDENTITY IS DEPRECATED *******\n\n                       Expected data not received (or not received\n                       correctly) in loopback test.\n\n                       This object identity has been deprecated, since\n                       the ifTestTable in the IF-MIB was deprecated,\n                       and there is no longer a standard mechanism for\n                       initiating an interface test.  This left no\n                       standard way of using this object identity.')
etherConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 35, 2))
etherGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 35, 2, 1))
etherCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 35, 2, 2))
etherCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 35, 2, 2, 1)).setObjects(*(("EtherLike-MIB", "etherStatsGroup"), ("EtherLike-MIB", "etherCollisionTableGroup"),))
if mibBuilder.loadTexts: etherCompliance.setDescription('******** THIS COMPLIANCE IS DEPRECATED ********\n\n                       The compliance statement for managed network\n                       entities which have ethernet-like network\n                       interfaces.\n\n                       This compliance is deprecated and replaced by\n                       dot3Compliance.')
ether100MbsCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 35, 2, 2, 2)).setObjects(*(("EtherLike-MIB", "etherStats100MbsGroup"), ("EtherLike-MIB", "etherCollisionTableGroup"),))
if mibBuilder.loadTexts: ether100MbsCompliance.setDescription('******** THIS COMPLIANCE IS DEPRECATED ********\n\n                       The compliance statement for managed network\n                       entities which have 100 Mb/sec ethernet-like\n                       network interfaces.\n\n                       This compliance is deprecated and replaced by\n                       dot3Compliance.')
dot3Compliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 35, 2, 2, 3)).setObjects(*(("EtherLike-MIB", "etherStatsBaseGroup"), ("EtherLike-MIB", "etherDuplexGroup"), ("EtherLike-MIB", "etherStatsLowSpeedGroup"), ("EtherLike-MIB", "etherStatsHighSpeedGroup"), ("EtherLike-MIB", "etherControlGroup"), ("EtherLike-MIB", "etherControlPauseGroup"), ("EtherLike-MIB", "etherCollisionTableGroup"),))
if mibBuilder.loadTexts: dot3Compliance.setDescription('******** THIS COMPLIANCE IS DEPRECATED ********\n\n                       The compliance statement for managed network\n                       entities which have ethernet-like network\n                       interfaces.\n\n                       This compliance is deprecated and replaced by\n                       dot3Compliance2.')
dot3Compliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 35, 2, 2, 4)).setObjects(*(("EtherLike-MIB", "etherStatsBaseGroup2"), ("EtherLike-MIB", "etherDuplexGroup"), ("EtherLike-MIB", "etherRateControlGroup"), ("EtherLike-MIB", "etherStatsLowSpeedGroup"), ("EtherLike-MIB", "etherStatsHighSpeedGroup"), ("EtherLike-MIB", "etherStatsHalfDuplexGroup"), ("EtherLike-MIB", "etherHCStatsGroup"), ("EtherLike-MIB", "etherControlGroup"), ("EtherLike-MIB", "etherHCControlGroup"), ("EtherLike-MIB", "etherControlPauseGroup"), ("EtherLike-MIB", "etherHCControlPauseGroup"), ("EtherLike-MIB", "etherCollisionTableGroup"),))
if mibBuilder.loadTexts: dot3Compliance2.setDescription('The compliance statement for managed network\n                           entities which have ethernet-like network\n                           interfaces.\n\n                           Note that compliance with this MIB module\n                           requires compliance with the ifCompliance3\n                           MODULE-COMPLIANCE statement of the IF-MIB\n                           (RFC2863).  In addition, compliance with this\n                           MIB module requires compliance  with the\n                           mauModIfCompl3 MODULE-COMPLIANCE statement of\n                           the MAU-MIB (RFC3636).')
etherStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 1)).setObjects(*(("EtherLike-MIB", "dot3StatsIndex"), ("EtherLike-MIB", "dot3StatsAlignmentErrors"), ("EtherLike-MIB", "dot3StatsFCSErrors"), ("EtherLike-MIB", "dot3StatsSingleCollisionFrames"), ("EtherLike-MIB", "dot3StatsMultipleCollisionFrames"), ("EtherLike-MIB", "dot3StatsSQETestErrors"), ("EtherLike-MIB", "dot3StatsDeferredTransmissions"), ("EtherLike-MIB", "dot3StatsLateCollisions"), ("EtherLike-MIB", "dot3StatsExcessiveCollisions"), ("EtherLike-MIB", "dot3StatsInternalMacTransmitErrors"), ("EtherLike-MIB", "dot3StatsCarrierSenseErrors"), ("EtherLike-MIB", "dot3StatsFrameTooLongs"), ("EtherLike-MIB", "dot3StatsInternalMacReceiveErrors"), ("EtherLike-MIB", "dot3StatsEtherChipSet"),))
if mibBuilder.loadTexts: etherStatsGroup.setDescription('********* THIS GROUP IS DEPRECATED **********\n\n                       A collection of objects providing information\n                       applicable to all ethernet-like network\n                       interfaces.\n\n                       This object group has been deprecated and\n                       replaced by etherStatsBaseGroup and\n                       etherStatsLowSpeedGroup.')
etherCollisionTableGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 2)).setObjects(*(("EtherLike-MIB", "dot3CollFrequencies"),))
if mibBuilder.loadTexts: etherCollisionTableGroup.setDescription('A collection of objects providing a histogram\n                       of packets successfully transmitted after\n                       experiencing exactly N collisions.')
etherStats100MbsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 3)).setObjects(*(("EtherLike-MIB", "dot3StatsIndex"), ("EtherLike-MIB", "dot3StatsAlignmentErrors"), ("EtherLike-MIB", "dot3StatsFCSErrors"), ("EtherLike-MIB", "dot3StatsSingleCollisionFrames"), ("EtherLike-MIB", "dot3StatsMultipleCollisionFrames"), ("EtherLike-MIB", "dot3StatsDeferredTransmissions"), ("EtherLike-MIB", "dot3StatsLateCollisions"), ("EtherLike-MIB", "dot3StatsExcessiveCollisions"), ("EtherLike-MIB", "dot3StatsInternalMacTransmitErrors"), ("EtherLike-MIB", "dot3StatsCarrierSenseErrors"), ("EtherLike-MIB", "dot3StatsFrameTooLongs"), ("EtherLike-MIB", "dot3StatsInternalMacReceiveErrors"), ("EtherLike-MIB", "dot3StatsEtherChipSet"), ("EtherLike-MIB", "dot3StatsSymbolErrors"),))
if mibBuilder.loadTexts: etherStats100MbsGroup.setDescription('********* THIS GROUP IS DEPRECATED **********\n\n                       A collection of objects providing information\n                       applicable to 100 Mb/sec ethernet-like network\n                       interfaces.\n\n                       This object group has been deprecated and\n                       replaced by etherStatsBaseGroup and\n                       etherStatsHighSpeedGroup.')
etherStatsBaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 4)).setObjects(*(("EtherLike-MIB", "dot3StatsIndex"), ("EtherLike-MIB", "dot3StatsAlignmentErrors"), ("EtherLike-MIB", "dot3StatsFCSErrors"), ("EtherLike-MIB", "dot3StatsSingleCollisionFrames"), ("EtherLike-MIB", "dot3StatsMultipleCollisionFrames"), ("EtherLike-MIB", "dot3StatsDeferredTransmissions"), ("EtherLike-MIB", "dot3StatsLateCollisions"), ("EtherLike-MIB", "dot3StatsExcessiveCollisions"), ("EtherLike-MIB", "dot3StatsInternalMacTransmitErrors"), ("EtherLike-MIB", "dot3StatsCarrierSenseErrors"), ("EtherLike-MIB", "dot3StatsFrameTooLongs"), ("EtherLike-MIB", "dot3StatsInternalMacReceiveErrors"),))
if mibBuilder.loadTexts: etherStatsBaseGroup.setDescription('********* THIS GROUP IS DEPRECATED **********\n\n                       A collection of objects providing information\n                       applicable to all ethernet-like network\n                       interfaces.\n\n                       This object group has been deprecated and\n                       replaced by etherStatsBaseGroup2 and\n                       etherStatsHalfDuplexGroup, to separate\n                       objects which must be implemented by all\n                       ethernet-like network interfaces from\n                       objects that need only be implemented on\n                       ethernet-like network interfaces that are\n                       capable of half-duplex operation.')
etherStatsLowSpeedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 5)).setObjects(*(("EtherLike-MIB", "dot3StatsSQETestErrors"),))
if mibBuilder.loadTexts: etherStatsLowSpeedGroup.setDescription('A collection of objects providing information\n                       applicable to ethernet-like network interfaces\n                       capable of operating at 10 Mb/s or slower in\n                       half-duplex mode.')
etherStatsHighSpeedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 6)).setObjects(*(("EtherLike-MIB", "dot3StatsSymbolErrors"),))
if mibBuilder.loadTexts: etherStatsHighSpeedGroup.setDescription('A collection of objects providing information\n                       applicable to ethernet-like network interfaces\n                       capable of operating at 100 Mb/s or faster.')
etherDuplexGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 7)).setObjects(*(("EtherLike-MIB", "dot3StatsDuplexStatus"),))
if mibBuilder.loadTexts: etherDuplexGroup.setDescription('A collection of objects providing information\n                       about the duplex mode of an ethernet-like\n                       network interface.')
etherControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 8)).setObjects(*(("EtherLike-MIB", "dot3ControlFunctionsSupported"), ("EtherLike-MIB", "dot3ControlInUnknownOpcodes"),))
if mibBuilder.loadTexts: etherControlGroup.setDescription('A collection of objects providing information\n                       about the MAC Control sublayer on ethernet-like\n                       network interfaces.')
etherControlPauseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 9)).setObjects(*(("EtherLike-MIB", "dot3PauseAdminMode"), ("EtherLike-MIB", "dot3PauseOperMode"), ("EtherLike-MIB", "dot3InPauseFrames"), ("EtherLike-MIB", "dot3OutPauseFrames"),))
if mibBuilder.loadTexts: etherControlPauseGroup.setDescription('A collection of objects providing information\n                       about and control of the MAC Control PAUSE\n                       function on ethernet-like network interfaces.')
etherStatsBaseGroup2 = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 10)).setObjects(*(("EtherLike-MIB", "dot3StatsIndex"), ("EtherLike-MIB", "dot3StatsAlignmentErrors"), ("EtherLike-MIB", "dot3StatsFCSErrors"), ("EtherLike-MIB", "dot3StatsInternalMacTransmitErrors"), ("EtherLike-MIB", "dot3StatsFrameTooLongs"), ("EtherLike-MIB", "dot3StatsInternalMacReceiveErrors"),))
if mibBuilder.loadTexts: etherStatsBaseGroup2.setDescription('A collection of objects providing information\n                       applicable to all ethernet-like network\n                       interfaces.')
etherStatsHalfDuplexGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 11)).setObjects(*(("EtherLike-MIB", "dot3StatsSingleCollisionFrames"), ("EtherLike-MIB", "dot3StatsMultipleCollisionFrames"), ("EtherLike-MIB", "dot3StatsDeferredTransmissions"), ("EtherLike-MIB", "dot3StatsLateCollisions"), ("EtherLike-MIB", "dot3StatsExcessiveCollisions"), ("EtherLike-MIB", "dot3StatsCarrierSenseErrors"),))
if mibBuilder.loadTexts: etherStatsHalfDuplexGroup.setDescription('A collection of objects providing information\n                       applicable only to half-duplex ethernet-like\n                       network interfaces.')
etherHCStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 12)).setObjects(*(("EtherLike-MIB", "dot3HCStatsAlignmentErrors"), ("EtherLike-MIB", "dot3HCStatsFCSErrors"), ("EtherLike-MIB", "dot3HCStatsInternalMacTransmitErrors"), ("EtherLike-MIB", "dot3HCStatsFrameTooLongs"), ("EtherLike-MIB", "dot3HCStatsInternalMacReceiveErrors"), ("EtherLike-MIB", "dot3HCStatsSymbolErrors"),))
if mibBuilder.loadTexts: etherHCStatsGroup.setDescription('A collection of objects providing high-capacity\n                       statistics applicable to higher-speed\n                       ethernet-like network interfaces.')
etherHCControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 13)).setObjects(*(("EtherLike-MIB", "dot3HCControlInUnknownOpcodes"),))
if mibBuilder.loadTexts: etherHCControlGroup.setDescription('A collection of objects providing high-capacity\n                       statistics for the MAC Control sublayer on\n                       higher-speed ethernet-like network interfaces.')
etherHCControlPauseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 14)).setObjects(*(("EtherLike-MIB", "dot3HCInPauseFrames"), ("EtherLike-MIB", "dot3HCOutPauseFrames"),))
if mibBuilder.loadTexts: etherHCControlPauseGroup.setDescription('A collection of objects providing high-capacity\n                       statistics for the MAC Control PAUSE function on\n                       higher-speed ethernet-like network interfaces.')
etherRateControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 35, 2, 1, 15)).setObjects(*(("EtherLike-MIB", "dot3StatsRateControlAbility"), ("EtherLike-MIB", "dot3StatsRateControlStatus"),))
if mibBuilder.loadTexts: etherRateControlGroup.setDescription('A collection of objects providing information\n                       about the Rate Control function on ethernet-like\n                       interfaces.')
mibBuilder.exportSymbols("EtherLike-MIB", dot3CollEntry=dot3CollEntry, dot3StatsAlignmentErrors=dot3StatsAlignmentErrors, dot3StatsCarrierSenseErrors=dot3StatsCarrierSenseErrors, dot3HCControlInUnknownOpcodes=dot3HCControlInUnknownOpcodes, dot3PauseEntry=dot3PauseEntry, dot3ErrorLoopbackError=dot3ErrorLoopbackError, etherStats100MbsGroup=etherStats100MbsGroup, etherStatsHighSpeedGroup=etherStatsHighSpeedGroup, dot3InPauseFrames=dot3InPauseFrames, dot3StatsExcessiveCollisions=dot3StatsExcessiveCollisions, dot3Compliance=dot3Compliance, etherStatsGroup=etherStatsGroup, dot3StatsDeferredTransmissions=dot3StatsDeferredTransmissions, etherRateControlGroup=etherRateControlGroup, dot3PauseTable=dot3PauseTable, dot3HCOutPauseFrames=dot3HCOutPauseFrames, dot3PauseAdminMode=dot3PauseAdminMode, etherMIBObjects=etherMIBObjects, etherDuplexGroup=etherDuplexGroup, etherCompliance=etherCompliance, etherConformance=etherConformance, dot3TestLoopBack=dot3TestLoopBack, dot3StatsMultipleCollisionFrames=dot3StatsMultipleCollisionFrames, etherControlGroup=etherControlGroup, etherControlPauseGroup=etherControlPauseGroup, dot3Errors=dot3Errors, etherCompliances=etherCompliances, etherCollisionTableGroup=etherCollisionTableGroup, etherStatsLowSpeedGroup=etherStatsLowSpeedGroup, dot3HCStatsEntry=dot3HCStatsEntry, dot3HCStatsInternalMacTransmitErrors=dot3HCStatsInternalMacTransmitErrors, dot3HCStatsFrameTooLongs=dot3HCStatsFrameTooLongs, ether100MbsCompliance=ether100MbsCompliance, dot3CollTable=dot3CollTable, dot3StatsIndex=dot3StatsIndex, dot3StatsEntry=dot3StatsEntry, dot3HCStatsAlignmentErrors=dot3HCStatsAlignmentErrors, dot3ControlTable=dot3ControlTable, etherStatsBaseGroup2=etherStatsBaseGroup2, etherHCControlPauseGroup=etherHCControlPauseGroup, dot3HCStatsTable=dot3HCStatsTable, dot3StatsEtherChipSet=dot3StatsEtherChipSet, dot3ControlEntry=dot3ControlEntry, dot3ErrorInitError=dot3ErrorInitError, dot3StatsFCSErrors=dot3StatsFCSErrors, dot3StatsRateControlAbility=dot3StatsRateControlAbility, dot3ControlFunctionsSupported=dot3ControlFunctionsSupported, dot3CollFrequencies=dot3CollFrequencies, dot3StatsTable=dot3StatsTable, dot3HCStatsInternalMacReceiveErrors=dot3HCStatsInternalMacReceiveErrors, dot3TestTdr=dot3TestTdr, dot3StatsSingleCollisionFrames=dot3StatsSingleCollisionFrames, dot3StatsLateCollisions=dot3StatsLateCollisions, etherStatsBaseGroup=etherStatsBaseGroup, dot3Tests=dot3Tests, etherStatsHalfDuplexGroup=etherStatsHalfDuplexGroup, dot3ControlInUnknownOpcodes=dot3ControlInUnknownOpcodes, dot3StatsInternalMacReceiveErrors=dot3StatsInternalMacReceiveErrors, dot3StatsDuplexStatus=dot3StatsDuplexStatus, PYSNMP_MODULE_ID=etherMIB, dot3HCStatsSymbolErrors=dot3HCStatsSymbolErrors, dot3HCStatsFCSErrors=dot3HCStatsFCSErrors, dot3StatsInternalMacTransmitErrors=dot3StatsInternalMacTransmitErrors, dot3CollCount=dot3CollCount, dot3Compliance2=dot3Compliance2, dot3StatsSQETestErrors=dot3StatsSQETestErrors, etherHCControlGroup=etherHCControlGroup, etherHCStatsGroup=etherHCStatsGroup, dot3=dot3, dot3StatsRateControlStatus=dot3StatsRateControlStatus, dot3PauseOperMode=dot3PauseOperMode, dot3StatsSymbolErrors=dot3StatsSymbolErrors, etherMIB=etherMIB, etherGroups=etherGroups, dot3HCInPauseFrames=dot3HCInPauseFrames, dot3StatsFrameTooLongs=dot3StatsFrameTooLongs, dot3OutPauseFrames=dot3OutPauseFrames)
