#
# PySNMP MIB module TOKEN-RING-RMON-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/TOKEN-RING-RMON-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:04:40 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( ObjectIdentifier, Integer, OctetString, ) = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
( statistics, history, rmon, OwnerString, ) = mibBuilder.importSymbols("RFC1271-MIB", "statistics", "history", "rmon", "OwnerString")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity, MibIdentifier, iso, IpAddress, Integer32, Gauge32, NotificationType, Unsigned32, Bits, ModuleIdentity, Counter64, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity", "MibIdentifier", "iso", "IpAddress", "Integer32", "Gauge32", "NotificationType", "Unsigned32", "Bits", "ModuleIdentity", "Counter64")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class OwnerString(OctetString, TextualConvention):
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(6,6)
    fixedLength = 6

class TimeInterval(Integer32):
    pass

tokenRing = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 10))
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4),)

tokenRingMLStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 2), )
if mibBuilder.loadTexts: tokenRingMLStatsTable.setDescription('A list of Mac-Layer Token Ring statistics\n\n\n\n\n\n                      entries.')
tokenRingMLStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 2, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingMLStatsIndex"))
if mibBuilder.loadTexts: tokenRingMLStatsEntry.setDescription('A collection of Mac-Layer statistics kept for a\n                      particular Token Ring interface.')
tokenRingMLStatsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsIndex.setDescription('The value of this object uniquely identifies this\n                      tokenRingMLStats entry.')
tokenRingMLStatsDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingMLStatsDataSource.setDescription('This object identifies the source of the data\n                      that this tokenRingMLStats entry is configured to\n                      analyze.  This source can be any tokenRing\n                      interface on this device.  In order to identify a\n                      particular interface, this object shall identify\n                      the instance of the ifIndex object, defined in\n                      MIB-II [3], for the desired interface.  For\n                      example, if an entry were to receive data from\n                      interface #1, this object would be set to\n                      ifIndex.1.\n\n                      The statistics in this group reflect all error\n                      reports on the local network segment attached to\n                      the identified interface.\n\n                      This object may not be modified if the associated\n                      tokenRingMLStatsStatus object is equal to\n                      valid(1).')
tokenRingMLStatsDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsDropEvents.setDescription('The total number of events in which packets were\n                      dropped by the probe due to lack of resources.\n                      Note that this number is not necessarily the\n                      number of packets dropped; it is just the number\n                      of times this condition has been detected.  This\n                      value is the same as the corresponding\n                      tokenRingPStatsDropEvents.')
tokenRingMLStatsMacOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsMacOctets.setDescription('The total number of octets of data in MAC packets\n                      (excluding those that were not good frames)\n                      received on the network (excluding framing bits\n                      but including FCS octets).')
tokenRingMLStatsMacPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsMacPkts.setDescription('The total number of MAC packets (excluding\n                      packets that were not good frames) received.')
tokenRingMLStatsRingPurgeEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsRingPurgeEvents.setDescription('The total number of times that the ring enters\n                      the ring purge state from normal ring state.  The\n                      ring purge state that comes in response to the\n                      claim token or beacon state is not counted.')
tokenRingMLStatsRingPurgePkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsRingPurgePkts.setDescription('The total number of ring purge MAC packets\n                      detected by probe.')
tokenRingMLStatsBeaconEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBeaconEvents.setDescription('The total number of times that the ring enters a\n                      beaconing state (beaconFrameStreamingState,\n                      beaconBitStreamingState,\n\n\n\n\n\n                      beaconSetRecoveryModeState, or\n                      beaconRingSignalLossState) from a non-beaconing\n                      state.  Note that a change of the source address\n                      of the beacon packet does not constitute a new\n                      beacon event.')
tokenRingMLStatsBeaconTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBeaconTime.setDescription('The total amount of time that the ring has been\n                      in the beaconing state.')
tokenRingMLStatsBeaconPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBeaconPkts.setDescription('The total number of beacon MAC packets detected\n                      by the probe.')
tokenRingMLStatsClaimTokenEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsClaimTokenEvents.setDescription('The total number of times that the ring enters\n                      the claim token state from normal ring state or\n                      ring purge state.  The claim token state that\n                      comes in response to a beacon state is not\n                      counted.')
tokenRingMLStatsClaimTokenPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsClaimTokenPkts.setDescription('The total number of claim token MAC packets\n                      detected by the probe.')
tokenRingMLStatsNAUNChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsNAUNChanges.setDescription('The total number of NAUN changes detected by the\n                      probe.')
tokenRingMLStatsLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsLineErrors.setDescription('The total number of line errors reported in error\n                      reporting packets detected by the probe.')
tokenRingMLStatsInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsInternalErrors.setDescription('The total number of adapter internal errors\n                      reported in error reporting packets detected by\n                      the probe.')
tokenRingMLStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsBurstErrors.setDescription('The total number of burst errors reported in\n                      error reporting packets detected by the probe.')
tokenRingMLStatsACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsACErrors.setDescription('The total number of AC (Address Copied)  errors\n                      reported in error reporting packets detected by\n                      the probe.')
tokenRingMLStatsAbortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsAbortErrors.setDescription('The total number of abort delimiters reported in\n                      error reporting packets detected by the probe.')
tokenRingMLStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsLostFrameErrors.setDescription('The total number of lost frame errors reported in\n                      error reporting packets detected by the probe.')
tokenRingMLStatsCongestionErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsCongestionErrors.setDescription('The total number of receive congestion errors\n                      reported in error reporting packets detected by\n                      the probe.')
tokenRingMLStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsFrameCopiedErrors.setDescription('The total number of frame copied errors reported\n                      in error reporting packets detected by the probe.')
tokenRingMLStatsFrequencyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsFrequencyErrors.setDescription('The total number of frequency errors reported in\n                      error reporting packets detected by the probe.')
tokenRingMLStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsTokenErrors.setDescription('The total number of token errors reported in\n                      error reporting packets detected by the probe.')
tokenRingMLStatsSoftErrorReports = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsSoftErrorReports.setDescription('The total number of soft error report frames\n                      detected by the probe.')
tokenRingMLStatsRingPollEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLStatsRingPollEvents.setDescription('The total number of ring poll events detected by\n                      the probe (i.e. the number of ring polls initiated\n                      by the active monitor that were detected).')
tokenRingMLStatsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 26), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingMLStatsOwner.setDescription('The entity that configured this entry and is\n                      therefore using the resources assigned to it.')
tokenRingMLStatsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 2, 1, 27), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingMLStatsStatus.setDescription('The status of this tokenRingMLStats entry.')
tokenRingPStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 3), )
if mibBuilder.loadTexts: tokenRingPStatsTable.setDescription('A list of promiscuous Token Ring statistics\n                      entries.')
tokenRingPStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 3, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingPStatsIndex"))
if mibBuilder.loadTexts: tokenRingPStatsEntry.setDescription('A collection of promiscuous statistics kept for\n                      non-MAC packets on a particular Token Ring\n                      interface.')
tokenRingPStatsIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsIndex.setDescription('The value of this object uniquely identifies this\n                      tokenRingPStats entry.')
tokenRingPStatsDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPStatsDataSource.setDescription('This object identifies the source of the data\n                      that this tokenRingPStats entry is configured to\n                      analyze.  This source can be any tokenRing\n                      interface on this device.  In order to identify a\n                      particular interface, this object shall identify\n                      the instance of the ifIndex object, defined in\n                      MIB-II [3], for the desired interface.  For\n                      example, if an entry were to receive data from\n                      interface #1, this object would be set to\n                      ifIndex.1.\n\n                      The statistics in this group reflect all non-MAC\n                      packets on the local network segment attached to\n                      the identified interface.\n\n                      This object may not be modified if the associated\n                      tokenRingPStatsStatus object is equal to\n                      valid(1).')
tokenRingPStatsDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDropEvents.setDescription('The total number of events in which packets were\n                      dropped by the probe due to lack of resources.\n                      Note that this number is not necessarily the\n                      number of packets dropped; it is just the number\n                      of times this condition has been detected.  This\n                      value is the same as the corresponding\n                      tokenRingMLStatsDropEvents')
tokenRingPStatsDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataOctets.setDescription('The total number of octets of data in good frames\n                      received on the network (excluding framing bits\n                      but including FCS octets) in non-MAC packets.')
tokenRingPStatsDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts.setDescription('The total number of non-MAC packets in good\n                      frames.  received.')
tokenRingPStatsDataBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataBroadcastPkts.setDescription('The total number of good non-MAC frames received\n                      that were directed to an LLC broadcast address\n                      (0xFFFFFFFFFFFF or 0xC000FFFFFFFF).')
tokenRingPStatsDataMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataMulticastPkts.setDescription('The total number of good non-MAC frames received\n                      that were directed to a local or global multicast\n                      or functional address.  Note that this number does\n                      not include packets directed to the broadcast\n                      address.')
tokenRingPStatsDataPkts18to63Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts18to63Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 18 and 63 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts64to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts64to127Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 64 and 127 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts128to255Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 128 and 255 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts256to511Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 256 and 511 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts512to1023Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 512 and 1023 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts1024to2047Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts1024to2047Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 1024 and 2047 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts2048to4095Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 2048 and 4095 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts4096to8191Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts4096to8191Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 4096 and 8191 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPkts8192to18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPkts8192to18000Octets.setDescription('The total number of good non-MAC frames received\n                      that were between 8192 and 18000 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets.')
tokenRingPStatsDataPktsGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPStatsDataPktsGreaterThan18000Octets.setDescription('The total number of good non-MAC frames received\n                      that were greater than 18000 octets in length,\n                      excluding framing bits but including FCS octets.')
tokenRingPStatsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 18), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPStatsOwner.setDescription('The entity that configured this entry and is\n                      therefore using the resources assigned to it.')
tokenRingPStatsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 3, 1, 19), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPStatsStatus.setDescription('The status of this tokenRingPStats entry.')
tokenRingMLHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 3), )
if mibBuilder.loadTexts: tokenRingMLHistoryTable.setDescription('A list of Mac-Layer Token Ring statistics\n\n\n\n\n\n                      entries.')
tokenRingMLHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 3, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingMLHistoryIndex"), (0, "TOKEN-RING-RMON-MIB", "tokenRingMLHistorySampleIndex"))
if mibBuilder.loadTexts: tokenRingMLHistoryEntry.setDescription('A collection of Mac-Layer statistics kept for a\n                      particular Token Ring interface.')
tokenRingMLHistoryIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryIndex.setDescription('The history of which this entry is a part.  The\n                      history identified by a particular value of this\n                      index is the same history as identified by the\n                      same value of historyControlIndex.')
tokenRingMLHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistorySampleIndex.setDescription('An index that uniquely identifies the particular\n                      Mac-Layer sample this entry represents among all\n                      Mac-Layer samples associated with the same\n                      historyControlEntry.  This index starts at 1 and\n                      increases by one as each new sample is taken.')
tokenRingMLHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the\n                      interval over which this sample was measured.  If\n                      the probe keeps track of the time of day, it\n                      should start the first sample of the history at a\n                      time such that when the next hour of the day\n                      begins, a sample is started at that instant.  Note\n                      that following this rule may require the probe to\n                      delay collecting the first sample of the history,\n                      as each sample must be of the same interval.  Also\n                      note that the sample which is currently being\n                      collected is not accessible in this table until\n                      the end of its interval.')
tokenRingMLHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryDropEvents.setDescription('The total number of events in which packets were\n\n\n\n\n\n                      dropped by the probe due to lack of resources\n                      during this sampling interval.  Note that this\n                      number is not necessarily the number of packets\n                      dropped, it is just the number of times this\n                      condition has been detected.')
tokenRingMLHistoryMacOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryMacOctets.setDescription('The total number of octets of data in MAC packets\n                      (excluding those that were not good frames)\n                      received on the network during this sampling\n                      interval (excluding framing bits but including FCS\n                      octets).')
tokenRingMLHistoryMacPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryMacPkts.setDescription('The total number of MAC packets (excluding those\n                      that were not good frames) received during this\n                      sampling interval.')
tokenRingMLHistoryRingPurgeEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryRingPurgeEvents.setDescription('The total number of times that the ring entered\n                      the ring purge state from normal ring state during\n                      this sampling interval.  The ring purge state that\n                      comes from the claim token or beacon state is not\n                      counted.')
tokenRingMLHistoryRingPurgePkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryRingPurgePkts.setDescription('The total number of Ring Purge MAC packets\n                      detected by the probe during this sampling\n\n\n\n\n\n                      interval.')
tokenRingMLHistoryBeaconEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBeaconEvents.setDescription('The total number of times that the ring enters a\n                      beaconing state (beaconFrameStreamingState,\n                      beaconBitStreamingState,\n                      beaconSetRecoveryModeState, or\n                      beaconRingSignalLossState) during this sampling\n                      interval.  Note that a change of the source\n                      address of the beacon packet does not constitute a\n                      new beacon event.')
tokenRingMLHistoryBeaconTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBeaconTime.setDescription('The amount of time that the ring has been in the\n                      beaconing state during this sampling interval.')
tokenRingMLHistoryBeaconPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBeaconPkts.setDescription('The total number of beacon MAC packets detected\n                      by the probe during this sampling interval.')
tokenRingMLHistoryClaimTokenEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryClaimTokenEvents.setDescription('The total number of times that the ring enters\n                      the claim token state from normal ring state or\n                      ring purge state during this sampling interval.\n                      The claim token state that comes from the beacon\n                      state is not counted.')
tokenRingMLHistoryClaimTokenPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryClaimTokenPkts.setDescription('The total number of claim token MAC packets\n                      detected by the probe during this sampling\n                      interval.')
tokenRingMLHistoryNAUNChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryNAUNChanges.setDescription('The total number of NAUN changes detected by the\n                      probe during this sampling interval.')
tokenRingMLHistoryLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryLineErrors.setDescription('The total number of line errors reported in error\n                      reporting packets detected by the probe during\n                      this sampling interval.')
tokenRingMLHistoryInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryInternalErrors.setDescription('The total number of adapter internal errors\n                      reported in error reporting packets detected by\n                      the probe during this sampling interval.')
tokenRingMLHistoryBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryBurstErrors.setDescription('The total number of burst errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval.')
tokenRingMLHistoryACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryACErrors.setDescription('The total number of AC (Address Copied) errors\n                      reported in error reporting packets detected by\n                      the probe during this sampling interval.')
tokenRingMLHistoryAbortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryAbortErrors.setDescription('The total number of abort delimiters reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval.')
tokenRingMLHistoryLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryLostFrameErrors.setDescription('The total number of lost frame errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval.')
tokenRingMLHistoryCongestionErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryCongestionErrors.setDescription('The total number of receive congestion errors\n                      reported in error reporting packets detected by\n                      the probe during this sampling interval.')
tokenRingMLHistoryFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryFrameCopiedErrors.setDescription('The total number of frame copied errors reported\n                      in error reporting packets detected by the probe\n                      during this sampling interval.')
tokenRingMLHistoryFrequencyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryFrequencyErrors.setDescription('The total number of frequency errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval.')
tokenRingMLHistoryTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryTokenErrors.setDescription('The total number of token errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval.')
tokenRingMLHistorySoftErrorReports = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistorySoftErrorReports.setDescription('The total number of soft error report frames\n                      detected by the probe during this sampling\n                      interval.')
tokenRingMLHistoryRingPollEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryRingPollEvents.setDescription('The total number of ring poll events detected by\n                      the probe during this sampling interval.')
tokenRingMLHistoryActiveStations = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingMLHistoryActiveStations.setDescription('The maximum number of active stations on the ring\n                      detected by the probe during this sampling\n\n\n\n\n\n                      interval.')
tokenRingPHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 4), )
if mibBuilder.loadTexts: tokenRingPHistoryTable.setDescription('A list of promiscuous Token Ring statistics\n                      entries.')
tokenRingPHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 4, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "tokenRingPHistoryIndex"), (0, "TOKEN-RING-RMON-MIB", "tokenRingPHistorySampleIndex"))
if mibBuilder.loadTexts: tokenRingPHistoryEntry.setDescription('A collection of promiscuous statistics kept for a\n                      particular Token Ring interface.')
tokenRingPHistoryIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryIndex.setDescription('The history of which this entry is a part.  The\n                      history identified by a particular value of this\n                      index is the same history as identified by the\n                      same value of historyControlIndex.')
tokenRingPHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistorySampleIndex.setDescription('An index that uniquely identifies the particular\n                      sample this entry represents among all samples\n                      associated with the same historyControlEntry.\n                      This index starts at 1 and increases by one as\n                      each new sample is taken.')
tokenRingPHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the\n                      interval over which this sample was measured.  If\n                      the probe keeps track of the time of day, it\n                      should start the first sample of the history at a\n                      time such that when the next hour of the day\n                      begins, a sample is started at that instant.  Note\n                      that following this rule may require the probe to\n                      delay collecting the first sample of the history,\n                      as each sample must be of the same interval.  Also\n                      note that the sample which is currently being\n                      collected is not accessible in this table until\n                      the end of its interval.')
tokenRingPHistoryDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDropEvents.setDescription('The total number of events in which packets were\n                      dropped by the probe due to lack of resources\n                      during this sampling interval.  Note that this\n                      number is not necessarily the number of packets\n                      dropped, it is just the number of times this\n                      condition has been detected.')
tokenRingPHistoryDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataOctets.setDescription('The total number of octets of data in good frames\n                      received on the network (excluding framing bits\n                      but including FCS octets) in non-MAC packets\n                      during this sampling interval.')
tokenRingPHistoryDataPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval.')
tokenRingPHistoryDataBroadcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataBroadcastPkts.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were directed\n                      to an LLC broadcast address (0xFFFFFFFFFFFF or\n                      0xC000FFFFFFFF).')
tokenRingPHistoryDataMulticastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataMulticastPkts.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were directed\n                      to a local or global multicast or functional\n                      address.  Note that this number does not include\n                      packets directed to the broadcast address.')
tokenRingPHistoryDataPkts18to63Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts18to63Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between 18\n                      and 63 octets in length inclusive, excluding\n                      framing bits but including FCS octets.')
tokenRingPHistoryDataPkts64to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts64to127Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between 64\n                      and 127 octets in length inclusive, excluding\n                      framing bits but including FCS octets.')
tokenRingPHistoryDataPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts128to255Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      128 and 255 octets in length inclusive, excluding\n                      framing bits but including FCS octets.')
tokenRingPHistoryDataPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts256to511Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n\n\n\n\n\n                      256 and 511 octets in length inclusive, excluding\n                      framing bits but including FCS octets.')
tokenRingPHistoryDataPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts512to1023Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      512 and 1023 octets in length inclusive, excluding\n                      framing bits but including FCS octets.')
tokenRingPHistoryDataPkts1024to2047Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts1024to2047Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      1024 and 2047 octets in length inclusive,\n                      excluding framing bits but including FCS octets.')
tokenRingPHistoryDataPkts2048to4095Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts2048to4095Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      2048 and 4095 octets in length inclusive,\n                      excluding framing bits but including FCS octets.')
tokenRingPHistoryDataPkts4096to8191Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts4096to8191Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      4096 and 8191 octets in length inclusive,\n                      excluding framing bits but including FCS octets.')
tokenRingPHistoryDataPkts8192to18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPkts8192to18000Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      8192 and 18000 octets in length inclusive,\n                      excluding framing bits but including FCS octets.')
tokenRingPHistoryDataPktsGreaterThan18000Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPHistoryDataPktsGreaterThan18000Octets.setDescription('The total number of good non-MAC frames received\n                      during this sampling interval that were greater\n                      than 18000 octets in length, excluding framing\n                      bits but including FCS octets.')
ringStationControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 1), )
if mibBuilder.loadTexts: ringStationControlTable.setDescription('A list of ringStation table control entries.')
ringStationControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 1, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationControlIfIndex"))
if mibBuilder.loadTexts: ringStationControlEntry.setDescription('A list of parameters that set up the discovery of\n                      stations on a particular interface and the\n                      collection of statistics about these stations.')
ringStationControlIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlIfIndex.setDescription('The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      from which ringStation data is collected.  The\n                      interface identified by a particular value of this\n                      object is the same interface as identified by the\n                      same value of the ifIndex object, defined in MIB-\n                      II [3].')
ringStationControlTableSize = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlTableSize.setDescription('The number of ringStationEntries in the\n                      ringStationTable associated with this\n                      ringStationControlEntry.')
ringStationControlActiveStations = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlActiveStations.setDescription('The number of active ringStationEntries in the\n                      ringStationTable associated with this\n                      ringStationControlEntry.')
ringStationControlRingState = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("normalOperation", 1), ("ringPurgeState", 2), ("claimTokenState", 3), ("beaconFrameStreamingState", 4), ("beaconBitStreamingState", 5), ("beaconRingSignalLossState", 6), ("beaconSetRecoveryModeState", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlRingState.setDescription('The current status of this ring.')
ringStationControlBeaconSender = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlBeaconSender.setDescription('The address of the sender of the last beacon\n                      frame received by the probe on this ring.  If no\n                      beacon frames have been received, this object\n                      shall be equal to six octets of zero.')
ringStationControlBeaconNAUN = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlBeaconNAUN.setDescription('The address of the NAUN in the last beacon frame\n                      received by the probe on this ring.  If no beacon\n                      frames have been received, this object shall be\n                      equal to six octets of zero.')
ringStationControlActiveMonitor = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlActiveMonitor.setDescription('The address of the Active Monitor on this\n                      segment.  If this address is unknown, this object\n                      shall be equal to six octets of zero.')
ringStationControlOrderChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationControlOrderChanges.setDescription('The number of add and delete events in the\n                      ringStationOrderTable optionally associated with\n                      this ringStationControlEntry.')
ringStationControlOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 9), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationControlOwner.setDescription('The entity that configured this entry and is\n                      therefore using the resources assigned to it.')
ringStationControlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 1, 1, 10), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationControlStatus.setDescription('The status of this ringStationControl entry.\n\n                      If this object is not equal to valid(1), all\n                      associated entries in the ringStationTable shall\n                      be deleted by the agent.')
ringStationTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 2), )
if mibBuilder.loadTexts: ringStationTable.setDescription('A list of ring station entries.  An entry will\n                      exist for each station that is now or has\n\n\n\n\n\n                      previously been detected as physically present on\n                      this ring.')
ringStationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 2, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationMacAddress"))
if mibBuilder.loadTexts: ringStationEntry.setDescription('A collection of statistics for a particular\n                      station that has been discovered on a ring\n                      monitored by this device.')
ringStationIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationIfIndex.setDescription('The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3].')
ringStationMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationMacAddress.setDescription('The physical address of this station.')
ringStationLastNAUN = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLastNAUN.setDescription('The physical address of last known NAUN of this\n                      station.')
ringStationStationStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("forcedRemoval", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationStationStatus.setDescription('The status of this station on the ring.')
ringStationLastEnterTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLastEnterTime.setDescription('The value of sysUpTime at the time this station\n                      last entered the ring.  If the time is unknown,\n                      this value shall be zero.')
ringStationLastExitTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLastExitTime.setDescription('The value of sysUpTime at the time the probe\n                      detected that this station last exited the ring.\n                      If the time is unknown, this value shall be zero.')
ringStationDuplicateAddresses = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationDuplicateAddresses.setDescription('The number of times this station experienced a\n                      duplicate address error.')
ringStationInLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInLineErrors.setDescription('The total number of line errors reported by this\n                      station in error reporting packets detected by the\n                      probe.')
ringStationOutLineErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOutLineErrors.setDescription('The total number of line errors reported in error\n                      reporting packets sent by the nearest active\n                      downstream neighbor of this station and detected\n                      by the probe.')
ringStationInternalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInternalErrors.setDescription('The total number of adapter internal errors\n                      reported by this station in error reporting\n                      packets detected by the probe.')
ringStationInBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInBurstErrors.setDescription('The total number of burst errors reported by this\n                      station in error reporting packets detected by the\n                      probe.')
ringStationOutBurstErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOutBurstErrors.setDescription('The total number of burst errors reported in\n                      error reporting packets sent by the nearest active\n                      downstream neighbor of this station and detected\n                      by the probe.')
ringStationACErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationACErrors.setDescription('The total number of AC (Address Copied) errors\n                      reported in error reporting packets sent by the\n                      nearest active downstream neighbor of this station\n                      and detected by the probe.')
ringStationAbortErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationAbortErrors.setDescription('The total number of abort delimiters reported by\n                      this station in error reporting packets detected\n                      by the probe.')
ringStationLostFrameErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationLostFrameErrors.setDescription('The total number of lost frame errors reported by\n                      this station in error reporting packets detected\n                      by the probe.')
ringStationCongestionErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationCongestionErrors.setDescription('The total number of receive congestion errors\n                      reported by this station in error reporting\n                      packets detected by the probe.')
ringStationFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationFrameCopiedErrors.setDescription('The total number of frame copied errors reported\n                      by this station in error reporting packets\n                      detected by the probe.')
ringStationFrequencyErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationFrequencyErrors.setDescription('The total number of frequency errors reported by\n                      this station in error reporting packets detected\n                      by the probe.')
ringStationTokenErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationTokenErrors.setDescription('The total number of token errors reported by this\n                      station in error reporting frames detected by the\n                      probe.')
ringStationInBeaconErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInBeaconErrors.setDescription('The total number of beacon frames sent by this\n                      station and detected by the probe.')
ringStationOutBeaconErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOutBeaconErrors.setDescription('The total number of beacon frames detected by the\n                      probe that name this station as the NAUN.')
ringStationInsertions = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationInsertions.setDescription('The number of times the probe detected this\n                      station inserting onto the ring.')
ringStationOrderTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 3), )
if mibBuilder.loadTexts: ringStationOrderTable.setDescription('A list of ring station entries for stations in\n                      the ring poll, ordered by their ring-order.')
ringStationOrderEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 3, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationOrderIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationOrderOrderIndex"))
if mibBuilder.loadTexts: ringStationOrderEntry.setDescription('A collection of statistics for a particular\n\n\n\n\n\n                      station that is active on a ring monitored by this\n                      device.  This table will contain information for\n                      every interface that has a\n                      ringStationControlStatus equal to valid.')
ringStationOrderIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOrderIfIndex.setDescription('The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3].')
ringStationOrderOrderIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOrderOrderIndex.setDescription('This index denotes the location of this station\n                      with respect to other stations on the ring.  This\n                      index is one more than the number of hops\n                      downstream that this station is from the rmon\n                      probe.  The rmon probe itself gets the value one.')
ringStationOrderMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationOrderMacAddress.setDescription('The physical address of this station.')
ringStationConfigControlTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 4), )
if mibBuilder.loadTexts: ringStationConfigControlTable.setDescription('A list of ring station configuration control\n                      entries.')
ringStationConfigControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 4, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationConfigControlIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationConfigControlMacAddress"))
if mibBuilder.loadTexts: ringStationConfigControlEntry.setDescription('This entry controls active management of stations\n                      by the probe.  One entry exists in this table for\n                      each active station in the ringStationTable.')
ringStationConfigControlIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigControlIfIndex.setDescription('The value of this object uniquely identifies the\n\n\n\n\n\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3].')
ringStationConfigControlMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigControlMacAddress.setDescription('The physical address of this station.')
ringStationConfigControlRemove = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("stable", 1), ("removing", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationConfigControlRemove.setDescription("Setting this object to `removing(2)' causes a\n                      Remove Station MAC frame to be sent.  The agent\n                      will set this object to `stable(1)' after\n                      processing the request.")
ringStationConfigControlUpdateStats = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("stable", 1), ("updating", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringStationConfigControlUpdateStats.setDescription("Setting this object to `updating(2)' causes the\n                      configuration information associate with this\n                      entry to be updated.  The agent will set this\n                      object to `stable(1)' after processing the\n                      request.")
ringStationConfigTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 5), )
if mibBuilder.loadTexts: ringStationConfigTable.setDescription('A list of configuration entries for stations on a\n                      ring monitored by this probe.')
ringStationConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 5, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "ringStationConfigIfIndex"), (0, "TOKEN-RING-RMON-MIB", "ringStationConfigMacAddress"))
if mibBuilder.loadTexts: ringStationConfigEntry.setDescription('A collection of statistics for a particular\n                      station that has been discovered on a ring\n                      monitored by this probe.')
ringStationConfigIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigIfIndex.setDescription('The value of this object uniquely identifies the\n\n\n\n\n\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3].')
ringStationConfigMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigMacAddress.setDescription('The physical address of this station.')
ringStationConfigUpdateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigUpdateTime.setDescription('The value of sysUpTime at the time this\n                      configuration information was last updated\n                      (completely).')
ringStationConfigLocation = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigLocation.setDescription('The assigned physical location of this station.')
ringStationConfigMicrocode = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10,10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigMicrocode.setDescription('The microcode EC level of this station.')
ringStationConfigGroupAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigGroupAddress.setDescription('The low-order 4 octets of the group address\n                      recognized by this station.')
ringStationConfigFunctionalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4,4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStationConfigFunctionalAddress.setDescription('the functional addresses recognized by this\n                      station.')
sourceRoutingStatsTable = MibTable((1, 3, 6, 1, 2, 1, 16, 10, 6), )
if mibBuilder.loadTexts: sourceRoutingStatsTable.setDescription('A list of source routing statistics entries.')
sourceRoutingStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 10, 6, 1), ).setIndexNames((0, "TOKEN-RING-RMON-MIB", "sourceRoutingStatsIfIndex"))
if mibBuilder.loadTexts: sourceRoutingStatsEntry.setDescription('A collection of source routing statistics kept\n                      for a particular Token Ring interface.')
sourceRoutingStatsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsIfIndex.setDescription('The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      on which source routing statistics will be\n                      detected.  The interface identified by a\n                      particular value of this object is the same\n                      interface as identified by the same value of the\n                      ifIndex object, defined in MIB-II [3].')
sourceRoutingStatsRingNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsRingNumber.setDescription('The ring number of the ring monitored by this\n                      entry.  When any object in this entry is created,\n                      the probe will attempt to discover the ring\n                      number.  Only after the ring number is discovered\n                      will this object be created.  After creating an\n                      object in this entry, the management station\n                      should poll this object to detect when it is\n                      created.  Only after this object is created can\n                      the management station set the\n                      sourceRoutingStatsStatus entry to valid(1).')
sourceRoutingStatsInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsInFrames.setDescription('The count of frames sent into this ring from\n                      another ring.')
sourceRoutingStatsOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsOutFrames.setDescription('The count of frames sent from this ring to\n                      another ring.')
sourceRoutingStatsThroughFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsThroughFrames.setDescription('The count of frames sent from another ring,\n                      through this ring, to another ring.')
sourceRoutingStatsAllRoutesBroadcastFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsAllRoutesBroadcastFrames.setDescription('The total number of good frames received that\n                      were All Routes Broadcast.')
sourceRoutingStatsSingleRouteBroadcastFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsSingleRouteBroadcastFrames.setDescription('The total number of good frames received that\n                      were Single Route Broadcast.')
sourceRoutingStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsInOctets.setDescription('The count of octets in good frames sent into this\n                      ring from another ring.')
sourceRoutingStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsOutOctets.setDescription('The count of octets in good frames sent from this\n                      ring to another ring.')
sourceRoutingStatsThroughOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsThroughOctets.setDescription('The count of octets in good frames sent another\n                      ring, through this ring, to another ring.')
sourceRoutingStatsAllRoutesBroadcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsAllRoutesBroadcastOctets.setDescription('The total number of octets in good frames\n                      received that were All Routes Broadcast.')
sourceRoutingStatsSingleRoutesBroadcastOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsSingleRoutesBroadcastOctets.setDescription('The total number of octets in good frames\n                      received that were Single Route Broadcast.')
sourceRoutingStatsLocalLLCFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsLocalLLCFrames.setDescription("The total number of frames received who had no\n                      RIF field (or had a RIF field that only included\n                      the local ring's number) and were not All Route\n                      Broadcast Frames.")
sourceRoutingStats1HopFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats1HopFrames.setDescription('The total number of frames received whose route\n                      had 1 hop, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats2HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats2HopsFrames.setDescription('The total number of frames received whose route\n                      had 2 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats3HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats3HopsFrames.setDescription('The total number of frames received whose route\n                      had 3 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats4HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats4HopsFrames.setDescription('The total number of frames received whose route\n                      had 4 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats5HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats5HopsFrames.setDescription('The total number of frames received whose route\n                      had 5 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats6HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats6HopsFrames.setDescription('The total number of frames received whose route\n                      had 6 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats7HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats7HopsFrames.setDescription('The total number of frames received whose route\n                      had 7 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStats8HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStats8HopsFrames.setDescription('The total number of frames received whose route\n                      had 8 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field).')
sourceRoutingStatsMoreThan8HopsFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceRoutingStatsMoreThan8HopsFrames.setDescription('The total number of frames received whose route\n                      had more than 8 hops, were not All Route Broadcast\n                      Frames, and whose source or destination were on\n                      this ring (i.e. frames that had a RIF field and\n                      had this ring number in the first or last entry of\n                      the RIF field).')
sourceRoutingStatsOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 23), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceRoutingStatsOwner.setDescription('The entity that configured this entry and is\n                      therefore using the resources assigned to it.')
sourceRoutingStatsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 10, 6, 1, 24), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceRoutingStatsStatus.setDescription('The status of this sourceRoutingStats entry.')
mibBuilder.exportSymbols("TOKEN-RING-RMON-MIB", tokenRingMLHistoryBurstErrors=tokenRingMLHistoryBurstErrors, ringStationTable=ringStationTable, ringStationConfigGroupAddress=ringStationConfigGroupAddress, tokenRingPStatsDataPkts2048to4095Octets=tokenRingPStatsDataPkts2048to4095Octets, tokenRingPHistoryDropEvents=tokenRingPHistoryDropEvents, tokenRingMLHistoryInternalErrors=tokenRingMLHistoryInternalErrors, ringStationLostFrameErrors=ringStationLostFrameErrors, tokenRingMLHistoryIntervalStart=tokenRingMLHistoryIntervalStart, tokenRingMLStatsClaimTokenPkts=tokenRingMLStatsClaimTokenPkts, ringStationLastNAUN=ringStationLastNAUN, ringStationOutLineErrors=ringStationOutLineErrors, tokenRingPHistoryDataPkts128to255Octets=tokenRingPHistoryDataPkts128to255Octets, sourceRoutingStatsSingleRouteBroadcastFrames=sourceRoutingStatsSingleRouteBroadcastFrames, tokenRingMLStatsSoftErrorReports=tokenRingMLStatsSoftErrorReports, tokenRingPStatsDataPkts512to1023Octets=tokenRingPStatsDataPkts512to1023Octets, ringStationMacAddress=ringStationMacAddress, ringStationControlBeaconNAUN=ringStationControlBeaconNAUN, tokenRingMLStatsLostFrameErrors=tokenRingMLStatsLostFrameErrors, sourceRoutingStats3HopsFrames=sourceRoutingStats3HopsFrames, tokenRingMLStatsNAUNChanges=tokenRingMLStatsNAUNChanges, ringStationLastEnterTime=ringStationLastEnterTime, EntryStatus=EntryStatus, ringStationConfigControlIfIndex=ringStationConfigControlIfIndex, tokenRingMLHistoryRingPurgePkts=tokenRingMLHistoryRingPurgePkts, tokenRingPHistoryDataMulticastPkts=tokenRingPHistoryDataMulticastPkts, tokenRingMLHistoryRingPurgeEvents=tokenRingMLHistoryRingPurgeEvents, ringStationOrderMacAddress=ringStationOrderMacAddress, tokenRingMLStatsCongestionErrors=tokenRingMLStatsCongestionErrors, tokenRingPStatsEntry=tokenRingPStatsEntry, sourceRoutingStats2HopsFrames=sourceRoutingStats2HopsFrames, tokenRingMLHistoryBeaconTime=tokenRingMLHistoryBeaconTime, ringStationInternalErrors=ringStationInternalErrors, ringStationLastExitTime=ringStationLastExitTime, tokenRingPHistoryDataPkts512to1023Octets=tokenRingPHistoryDataPkts512to1023Octets, tokenRingPHistoryDataPkts4096to8191Octets=tokenRingPHistoryDataPkts4096to8191Octets, tokenRingPStatsDataPkts=tokenRingPStatsDataPkts, tokenRingMLStatsEntry=tokenRingMLStatsEntry, tokenRingPStatsDropEvents=tokenRingPStatsDropEvents, ringStationControlTable=ringStationControlTable, ringStationConfigControlRemove=ringStationConfigControlRemove, ringStationConfigLocation=ringStationConfigLocation, tokenRingMLStatsIndex=tokenRingMLStatsIndex, sourceRoutingStatsLocalLLCFrames=sourceRoutingStatsLocalLLCFrames, tokenRingPHistoryDataPkts8192to18000Octets=tokenRingPHistoryDataPkts8192to18000Octets, sourceRoutingStatsInOctets=sourceRoutingStatsInOctets, tokenRingMLHistoryBeaconEvents=tokenRingMLHistoryBeaconEvents, tokenRingMLStatsFrameCopiedErrors=tokenRingMLStatsFrameCopiedErrors, ringStationTokenErrors=ringStationTokenErrors, tokenRingMLStatsLineErrors=tokenRingMLStatsLineErrors, sourceRoutingStatsIfIndex=sourceRoutingStatsIfIndex, OwnerString=OwnerString, ringStationIfIndex=ringStationIfIndex, sourceRoutingStatsThroughOctets=sourceRoutingStatsThroughOctets, ringStationOrderOrderIndex=ringStationOrderOrderIndex, ringStationConfigMacAddress=ringStationConfigMacAddress, tokenRingPStatsTable=tokenRingPStatsTable, tokenRingMLHistoryLostFrameErrors=tokenRingMLHistoryLostFrameErrors, sourceRoutingStats1HopFrames=sourceRoutingStats1HopFrames, sourceRoutingStatsEntry=sourceRoutingStatsEntry, ringStationOrderIfIndex=ringStationOrderIfIndex, tokenRingPHistoryDataPktsGreaterThan18000Octets=tokenRingPHistoryDataPktsGreaterThan18000Octets, tokenRingMLStatsMacPkts=tokenRingMLStatsMacPkts, tokenRingPStatsDataSource=tokenRingPStatsDataSource, tokenRingMLStatsBeaconEvents=tokenRingMLStatsBeaconEvents, tokenRingMLStatsAbortErrors=tokenRingMLStatsAbortErrors, sourceRoutingStatsSingleRoutesBroadcastOctets=sourceRoutingStatsSingleRoutesBroadcastOctets, sourceRoutingStats5HopsFrames=sourceRoutingStats5HopsFrames, ringStationACErrors=ringStationACErrors, tokenRingPHistoryDataPkts1024to2047Octets=tokenRingPHistoryDataPkts1024to2047Octets, tokenRingMLStatsClaimTokenEvents=tokenRingMLStatsClaimTokenEvents, tokenRingMLHistoryLineErrors=tokenRingMLHistoryLineErrors, sourceRoutingStatsOutFrames=sourceRoutingStatsOutFrames, ringStationControlBeaconSender=ringStationControlBeaconSender, tokenRingPStatsDataPktsGreaterThan18000Octets=tokenRingPStatsDataPktsGreaterThan18000Octets, ringStationControlStatus=ringStationControlStatus, tokenRingMLHistoryBeaconPkts=tokenRingMLHistoryBeaconPkts, tokenRingMLHistoryFrameCopiedErrors=tokenRingMLHistoryFrameCopiedErrors, ringStationControlIfIndex=ringStationControlIfIndex, tokenRingPStatsDataPkts256to511Octets=tokenRingPStatsDataPkts256to511Octets, ringStationConfigIfIndex=ringStationConfigIfIndex, ringStationFrameCopiedErrors=ringStationFrameCopiedErrors, tokenRingMLStatsBeaconTime=tokenRingMLStatsBeaconTime, ringStationConfigEntry=ringStationConfigEntry, tokenRingMLHistoryMacOctets=tokenRingMLHistoryMacOctets, tokenRingPStatsOwner=tokenRingPStatsOwner, tokenRingMLStatsTable=tokenRingMLStatsTable, tokenRingMLStatsACErrors=tokenRingMLStatsACErrors, tokenRingMLHistoryCongestionErrors=tokenRingMLHistoryCongestionErrors, ringStationOutBurstErrors=ringStationOutBurstErrors, ringStationFrequencyErrors=ringStationFrequencyErrors, ringStationConfigControlEntry=ringStationConfigControlEntry, tokenRingPStatsDataPkts1024to2047Octets=tokenRingPStatsDataPkts1024to2047Octets, tokenRingPStatsDataMulticastPkts=tokenRingPStatsDataMulticastPkts, tokenRingMLHistoryClaimTokenEvents=tokenRingMLHistoryClaimTokenEvents, ringStationConfigMicrocode=ringStationConfigMicrocode, tokenRingPStatsDataPkts4096to8191Octets=tokenRingPStatsDataPkts4096to8191Octets, tokenRingMLStatsOwner=tokenRingMLStatsOwner, tokenRingMLHistoryEntry=tokenRingMLHistoryEntry, tokenRingPHistoryTable=tokenRingPHistoryTable, tokenRingPHistoryDataPkts64to127Octets=tokenRingPHistoryDataPkts64to127Octets, tokenRingPHistoryIndex=tokenRingPHistoryIndex, tokenRingMLHistoryTokenErrors=tokenRingMLHistoryTokenErrors, tokenRingPHistoryDataOctets=tokenRingPHistoryDataOctets, sourceRoutingStatsTable=sourceRoutingStatsTable, sourceRoutingStats7HopsFrames=sourceRoutingStats7HopsFrames, ringStationControlOwner=ringStationControlOwner, sourceRoutingStatsInFrames=sourceRoutingStatsInFrames, tokenRingPStatsDataPkts128to255Octets=tokenRingPStatsDataPkts128to255Octets, tokenRingPHistorySampleIndex=tokenRingPHistorySampleIndex, tokenRingPHistoryDataPkts=tokenRingPHistoryDataPkts, sourceRoutingStats4HopsFrames=sourceRoutingStats4HopsFrames, tokenRingMLStatsRingPollEvents=tokenRingMLStatsRingPollEvents, tokenRingMLHistoryIndex=tokenRingMLHistoryIndex, ringStationOrderEntry=ringStationOrderEntry, tokenRingMLHistoryAbortErrors=tokenRingMLHistoryAbortErrors, sourceRoutingStatsRingNumber=sourceRoutingStatsRingNumber, tokenRingMLStatsRingPurgePkts=tokenRingMLStatsRingPurgePkts, tokenRingMLHistoryRingPollEvents=tokenRingMLHistoryRingPollEvents, ringStationOutBeaconErrors=ringStationOutBeaconErrors, tokenRingMLStatsDataSource=tokenRingMLStatsDataSource, ringStationCongestionErrors=ringStationCongestionErrors, sourceRoutingStats6HopsFrames=sourceRoutingStats6HopsFrames, ringStationConfigControlTable=ringStationConfigControlTable, tokenRingMLStatsBeaconPkts=tokenRingMLStatsBeaconPkts, ringStationInBeaconErrors=ringStationInBeaconErrors, tokenRingMLHistoryFrequencyErrors=tokenRingMLHistoryFrequencyErrors, tokenRingPStatsDataOctets=tokenRingPStatsDataOctets, ringStationAbortErrors=ringStationAbortErrors, ringStationEntry=ringStationEntry, tokenRingPHistoryEntry=tokenRingPHistoryEntry, sourceRoutingStatsAllRoutesBroadcastFrames=sourceRoutingStatsAllRoutesBroadcastFrames, tokenRingMLStatsMacOctets=tokenRingMLStatsMacOctets, tokenRingPStatsDataPkts8192to18000Octets=tokenRingPStatsDataPkts8192to18000Octets, tokenRingMLStatsStatus=tokenRingMLStatsStatus, tokenRingMLHistorySampleIndex=tokenRingMLHistorySampleIndex, ringStationConfigControlUpdateStats=ringStationConfigControlUpdateStats, ringStationConfigUpdateTime=ringStationConfigUpdateTime, ringStationInLineErrors=ringStationInLineErrors, tokenRingMLStatsBurstErrors=tokenRingMLStatsBurstErrors, sourceRoutingStatsOwner=sourceRoutingStatsOwner, tokenRingMLHistoryDropEvents=tokenRingMLHistoryDropEvents, tokenRingPHistoryIntervalStart=tokenRingPHistoryIntervalStart, MacAddress=MacAddress, ringStationInBurstErrors=ringStationInBurstErrors, tokenRingMLStatsInternalErrors=tokenRingMLStatsInternalErrors, ringStationControlRingState=ringStationControlRingState, ringStationOrderTable=ringStationOrderTable, ringStationControlEntry=ringStationControlEntry, ringStationConfigTable=ringStationConfigTable, ringStationConfigFunctionalAddress=ringStationConfigFunctionalAddress, tokenRingMLHistoryTable=tokenRingMLHistoryTable, ringStationInsertions=ringStationInsertions, tokenRingMLStatsDropEvents=tokenRingMLStatsDropEvents, sourceRoutingStatsAllRoutesBroadcastOctets=sourceRoutingStatsAllRoutesBroadcastOctets, sourceRoutingStats8HopsFrames=sourceRoutingStats8HopsFrames, tokenRing=tokenRing, tokenRingPHistoryDataPkts2048to4095Octets=tokenRingPHistoryDataPkts2048to4095Octets, ringStationControlTableSize=ringStationControlTableSize, tokenRingPHistoryDataPkts256to511Octets=tokenRingPHistoryDataPkts256to511Octets, ringStationDuplicateAddresses=ringStationDuplicateAddresses, tokenRingMLStatsRingPurgeEvents=tokenRingMLStatsRingPurgeEvents, ringStationStationStatus=ringStationStationStatus, tokenRingMLHistoryActiveStations=tokenRingMLHistoryActiveStations, tokenRingMLHistoryClaimTokenPkts=tokenRingMLHistoryClaimTokenPkts, tokenRingMLStatsFrequencyErrors=tokenRingMLStatsFrequencyErrors, tokenRingPStatsStatus=tokenRingPStatsStatus, sourceRoutingStatsMoreThan8HopsFrames=sourceRoutingStatsMoreThan8HopsFrames, TimeInterval=TimeInterval, sourceRoutingStatsOutOctets=sourceRoutingStatsOutOctets, tokenRingMLHistorySoftErrorReports=tokenRingMLHistorySoftErrorReports, sourceRoutingStatsStatus=sourceRoutingStatsStatus, sourceRoutingStatsThroughFrames=sourceRoutingStatsThroughFrames, tokenRingPHistoryDataPkts18to63Octets=tokenRingPHistoryDataPkts18to63Octets, tokenRingMLHistoryACErrors=tokenRingMLHistoryACErrors, tokenRingMLHistoryMacPkts=tokenRingMLHistoryMacPkts, tokenRingMLHistoryNAUNChanges=tokenRingMLHistoryNAUNChanges, tokenRingMLStatsTokenErrors=tokenRingMLStatsTokenErrors, ringStationConfigControlMacAddress=ringStationConfigControlMacAddress, ringStationControlActiveMonitor=ringStationControlActiveMonitor, tokenRingPStatsDataBroadcastPkts=tokenRingPStatsDataBroadcastPkts, ringStationControlOrderChanges=ringStationControlOrderChanges, tokenRingPStatsDataPkts64to127Octets=tokenRingPStatsDataPkts64to127Octets, tokenRingPHistoryDataBroadcastPkts=tokenRingPHistoryDataBroadcastPkts, ringStationControlActiveStations=ringStationControlActiveStations, tokenRingPStatsIndex=tokenRingPStatsIndex, tokenRingPStatsDataPkts18to63Octets=tokenRingPStatsDataPkts18to63Octets)
