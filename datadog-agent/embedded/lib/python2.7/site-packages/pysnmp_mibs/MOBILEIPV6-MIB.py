#
# PySNMP MIB module MOBILEIPV6-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/MOBILEIPV6-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:20:23 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( OctetString, ObjectIdentifier, Integer, ) = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( ipv6InterfaceIfIndex, ) = mibBuilder.importSymbols("IP-MIB", "ipv6InterfaceIfIndex")
( NotificationGroup, ObjectGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
( MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, mib_2, Integer32, TimeTicks, Bits, Unsigned32, NotificationType, ObjectIdentity, IpAddress, iso, Counter64, ModuleIdentity, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "mib-2", "Integer32", "TimeTicks", "Bits", "Unsigned32", "NotificationType", "ObjectIdentity", "IpAddress", "iso", "Counter64", "ModuleIdentity", "Counter32")
( DisplayString, DateAndTime, TextualConvention, TruthValue, TimeStamp, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "TruthValue", "TimeStamp")
mip6MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 133)).setRevisions(("2006-02-01 00:00",))
if mibBuilder.loadTexts: mip6MIB.setLastUpdated('200602010000Z')
if mibBuilder.loadTexts: mip6MIB.setOrganization('IETF mip6 Working Group')
if mibBuilder.loadTexts: mip6MIB.setContactInfo('                      Glenn Mansfield Keeni\n                        Postal: Cyber Solutions Inc.\n                                6-6-3, Minami Yoshinari\n                                Aoba-ku, Sendai, Japan 989-3204.\n                           Tel: +81-22-303-4012\n                           Fax: +81-22-303-4015\n                        E-mail: glenn@cysols.com\n\n                                Kenichi Nagami\n                        Postal: INTEC NetCore Inc.\n                                1-3-3, Shin-suna\n                                Koto-ku, Tokyo, 135-0075\n                                Japan\n\n                           Tel: +81-3-5665-5069\n                        E-mail: nagami@inetcore.com\n\n                                Kazuhide Koide\n                        Postal: Tohoku University\n                                2-1-1, Katahira\n                                Aoba-ku, Sendai, 980-8577\n                                Japan\n\n                           Tel: +81-22-217-5454\n                        E-mail: koide@shiratori.riec.tohoku.ac.jp\n                                Sri Gundavelli\n                        Postal: Cisco Systems\n                                170 W.Tasman Drive,\n                                San Jose, CA 95134\n                                USA\n\n                           Tel: +1-408-527-6109\n                        E-mail: sgundave@cisco.com\n\n             Support Group E-mail: mip6@ietf.org')
if mibBuilder.loadTexts: mip6MIB.setDescription('The MIB module for monitoring Mobile-IPv6\n                      entities.\n\n                      Copyright (C) The Internet Society 2006.  This\n                      version of this MIB module is part of RFC 4295;\n                      see the RFC itself for full legal notices.\n                     ')
mip6Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 0))
mip6Objects = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1))
mip6Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 2))
mip6Core = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1))
mip6Mn = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2))
mip6Cn = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3))
mip6Ha = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4))
mip6System = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 1))
mip6Bindings = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 2))
mip6Stats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 3))
mip6MnSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 1))
mip6MnConf = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 2))
mip6MnRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 3))
mip6CnSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3, 1))
mip6CnStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3, 2))
mip6HaAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4, 1))
mip6HaStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4, 2))
class Mip6BURequestRejectionCode(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,))
    namedValues = NamedValues(("reasonUnspecified", 1), ("admProhibited", 2), ("insufficientResource", 3), ("homeRegistrationNotSupported", 4), ("notHomeSubnet", 5), ("notHomeAgentForThisMobileNode", 6), ("duplicateAddressDetectionFailed", 7), ("sequenceNumberOutOfWindow", 8), ("expiredHomeNonceIndex", 9), ("expiredCareofNonceIndex", 10), ("expiredNonces", 11), ("registrationTypeChangeDisallowed", 12),)

mip6Capabilities = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("mobileNode", 0), ("homeAgent", 1), ("correspondentNode", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6Capabilities.setDescription('This object indicates the Mobile IPv6 functions that\n                    are supported by this managed entity.  Multiple\n                    Mobile IPv6 functions may be supported by a single\n                    entity.\n                   ')
mip6Status = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6Status.setDescription('This object indicates whether the Mobile IPv6\n                    function is enabled for the managed entity.  If it\n                    is enabled, the agent discovery and registration\n                    functions will be operational.\n                    Changing the status from enabled(1) to disabled(2)\n                    will terminate the agent discovery and registration\n                    functions.  On the other hand, changing the status\n                    from disabled(2) to enabled(1) will start the agent\n                    discovery and registration functions.\n\n                    The value of this object SHOULD remain unchanged\n                    across reboots of the managed entity.\n                   ')
mip6BindingCacheTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1), )
if mibBuilder.loadTexts: mip6BindingCacheTable.setDescription('This table models the Binding Cache on the\n                    managed entity.  The cache is maintained by home\n                    agents and correspondent nodes.  It contains\n                    both correspondent registration entries and home\n                    registration entries.\n\n                    Entries in this table are not required to survive\n                    a reboot of the managed entity.\n                   ')
mip6BindingCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6BindingCacheEntry.setDescription('This entry represents a conceptual row in the\n                    binding cache table.  It represents a single Binding\n                    Update.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6BindingHomeAddress\n                    exceeds 113, then OIDs of column\n                    instances in this row will have more than 128\n                    sub-identifiers and cannot be accessed using\n                    SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6BindingHomeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6BindingHomeAddressType.setDescription('The InetAddressType of the mip6BindingHomeAddress\n                    that follows.\n                   ')
mip6BindingHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6BindingHomeAddress.setDescription("The home address of the mobile node corresponding\n                    to the Binding Cache entry.  This field is used as\n                    the key for searching the mobile node's current\n                    care-of address in the Binding Cache.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding\n                    mip6BindingHomeAddressType object.\n                   ")
mip6BindingCOAType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingCOAType.setDescription('The InetAddressType of the mip6BindingCOA that\n                    follows.\n                   ')
mip6BindingCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingCOA.setDescription('The care-of address of the mobile node indicated by\n                    the home address field (mip6BindingHomeAddress) in\n                    this Binding Cache entry.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding mip6BindingCOAType\n                    object.\n                   ')
mip6BindingTimeRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingTimeRegistered.setDescription('The timestamp when this Binding Cache entry was\n                    created.\n                   ')
mip6BindingTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 6), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingTimeGranted.setDescription('The lifetime in seconds granted to the mobile node\n                    for this registration.\n                   ')
mip6BindingTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 7), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingTimeRemaining.setDescription('The lifetime in seconds remaining for this\n                    registration.\n                   ')
mip6BindingHomeRegn = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHomeRegn.setDescription('This object indicates whether or not this Binding\n                    Cache entry is a home registration entry (applicable\n                    only on nodes that support home agent\n                    functionality).\n                   ')
mip6BindingMaxSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingMaxSeq.setDescription('The maximum value of the Sequence Number field\n                    received in previous Binding Updates for this home\n                    address (mip6BindingHomeAddress).\n                   ')
mip6BindingUsageTS = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingUsageTS.setDescription('The timestamp when this entry was last looked up.\n                   ')
mip6BindingUsageCount = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingUsageCount.setDescription('The number of times this entry was looked up.\n                   ')
mip6BindingAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6BindingAdminStatus.setDescription("This is an administrative object used to control\n                    the status of a binding cache entry.  By default\n                    the value will be 'active'(1).\n                    A value of 'inactive'(2) will indicate that the\n                    validity of the entry is suspended.  It does not\n                    exist in the binding cache for all practical\n                    purposes.\n                    The state can be changed from 'active' to\n                    'inactive' by operator intervention.\n                    Causing the state to change to 'inactive' results\n                    in the entry being deleted from the cache.\n                    Attempts to change the status from 'inactive'\n                    to 'active' will be rejected.\n                   ")
mip6BindingHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2), )
if mibBuilder.loadTexts: mip6BindingHistoryTable.setDescription('A table containing a record of the bindings.\n                   ')
mip6BindingHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHstHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHstHomeAddress"), (0, "MOBILEIPV6-MIB", "mip6BindingHstIndex"))
if mibBuilder.loadTexts: mip6BindingHistoryEntry.setDescription('The record of a binding.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6BindingHstHomeAddress\n                    exceeds 112, then OIDs of column\n                    instances in this row will have more than 128\n                    sub-identifiers and cannot be accessed using\n                    SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6BindingHstHomeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6BindingHstHomeAddressType.setDescription('The InetAddressType of the\n                    mip6BindingHstHomeAddress that follows.\n                   ')
mip6BindingHstHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6BindingHstHomeAddress.setDescription("Mobile node's home address.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding\n                    mip6BindingHstHomeAddressType object.\n                   ")
mip6BindingHstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: mip6BindingHstIndex.setDescription("The index to uniquely identify this record along\n                    with the mobile node's HomeAddress type and\n                    HomeAddress.  It should be monotonically increasing.\n                    It may wrap after reaching its max value.")
mip6BindingHstCOAType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstCOAType.setDescription('The InetAddressType of the mip6BindingHstCOA that\n                    follows.\n                   ')
mip6BindingHstCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstCOA.setDescription("Mobile node's care-of address.  One mobile node can\n                    have multiple bindings with different\n                    care-of addresses.\n                    The type of the address represented by this object\n                    is specified by the corresponding\n                    mip6BindingHstCOAType object.\n                   ")
mip6BindingHstTimeRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstTimeRegistered.setDescription('The timestamp when this Binding Cache entry was\n                    created.\n                   ')
mip6BindingHstTimeExpired = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstTimeExpired.setDescription('The timestamp when this Binding Cache entry expired.\n                   ')
mip6BindingHstHomeRegn = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstHomeRegn.setDescription('This object indicates whether or not this Binding\n                    Cache entry is a home registration entry (applicable\n                    only on nodes that support home agent\n                    functionality).\n                   ')
mip6BindingHstUsageTS = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstUsageTS.setDescription('The timestamp when this entry was last looked up.\n                   ')
mip6BindingHstUsageCount = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstUsageCount.setDescription('The number of times this entry was looked up.\n                   ')
mip6TotalTraffic = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1))
mip6InOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6InOctets.setDescription("The total number of octets in the MIPv6 datagrams\n                   received by the MIPv6 entity.  This will include\n                   datagrams with the Mobility Header, the Home Address\n                   option in the Destination Option extension header\n                   (Next Header value = 60), or the type 2 Routing\n                   Header.  It will also include the IPv6 datagrams that\n                   are reverse tunneled to a home agent from a mobile\n                   node's home address.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6CounterDiscontinuityTime.\n                  ")
mip6HCInOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCInOctets.setDescription("The total number of octets in the MIPv6 datagrams\n                   received by the MIPv6 entity.  This will include\n                   datagrams with the Mobility Header, the Home Address\n                   option in the Destination Option extension header\n                   (Next Header value = 60), or the type 2 Routing\n                   Header.  It will also include the IPv6 datagrams that\n                   are reverse tunneled to a home agent from a mobile\n                   node's home address.\n                   This object is a 64-bit version of mip6InOctets.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6CounterDiscontinuityTime.\n                  ")
mip6InPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6InPkts.setDescription("The number of MIPv6 datagrams received by the MIPv6\n                    entity.  This will include datagrams with the\n                    Mobility Header, the Home Address option in the\n                    Destination Option extension header (Next Header\n                    value = 60), or the type 2 Routing Header.\n                    It will also include the IPv6 datagrams that are\n                    reverse tunneled to a home agent from a mobile\n                    node's home address.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HCInPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCInPkts.setDescription("The number of MIPv6 datagrams received by the MIPv6\n                    entity.  This will include datagrams with the\n                    Mobility Header, the Home Address option in the\n                    Destination Option extension header (Next Header\n                    value = 60), or the type 2 Routing Header.  It will\n                    also include the IPv6 datagrams that are reverse\n                    tunneled to a home agent from a mobile node's home\n                    address.\n                    This object is a 64-bit version of mip6InPkts.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6OutOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6OutOctets.setDescription("The total number of octets in the MIPv6 datagrams\n                   sent by the MIPv6 entity.  This will include\n                   datagrams with the Mobility Header, the Home Address\n                   option in the Destination Option extension header\n                   (Next Header value = 60), or the type 2 Routing\n                   Header.  It will also include the IPv6 datagrams that\n                   are reverse tunneled to a home agent from a mobile\n                   node's home address.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6CounterDiscontinuityTime.\n                  ")
mip6HCOutOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCOutOctets.setDescription("The total number of octets in the MIPv6 datagrams\n                   sent by the MIPv6 entity.  This will include\n                   datagrams with the Mobility Header, the Home Address\n                   option in the Destination Option extension header\n                   (Next Header value = 60), or the type 2 Routing\n                   Header.  It will also include the IPv6 datagrams that\n                   are reverse tunneled to a home agent from a mobile\n                   node's home address.\n                   This object is a 64-bit version of mip6OutOctets.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6CounterDiscontinuityTime.\n                  ")
mip6OutPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6OutPkts.setDescription("The number of MIPv6 datagrams sent by the MIPv6\n                    entity.  This will include the datagrams with\n                    Mobility Header, the Home Address option in the\n                    Destination Option extension header (Next Header\n                    value = 60), or the type 2 Routing Header.  It will\n                    also include the IPv6 datagrams that are reverse\n                    tunneled to a home agent from a mobile node's home\n                    address.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HCOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCOutPkts.setDescription("The number of MIPv6 datagrams sent by the MIPv6\n                    entity.  This will include datagrams with the\n                    Mobility Header, the Home Address option in the\n                    Destination Option extension header (Next Header\n                    value = 60), or the type 2 Routing Header.  It will\n                    also include the IPv6 datagrams that are reverse\n                    tunneled to a home agent from a mobile node's home\n                    address.\n                    This object is a 64-bit version of mip6OutPkts.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CounterDiscontinuityTime = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\n                    at which any one or more of this MIPv6 entities\n                    global counters, viz., counters with OID prefix\n                    'mip6TotalTraffic' or 'mip6CnGlobalStats' or\n                    'mip6HaGlobalStats' suffered a discontinuity.\n                    If no such discontinuities have occurred since the\n                    last re-initialization of the local management\n                    subsystem, then this object will have a zero value.\n                   ")
mip6NodeTrafficTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2), )
if mibBuilder.loadTexts: mip6NodeTrafficTable.setDescription('A table containing MIPv6 traffic counters per mobile\n                    node.\n                   ')
mip6NodeTrafficEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6NodeTrafficEntry.setDescription('The MIPv6 traffic statistics for a mobile node.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6BindingHomeAddress\n                    exceeds 113, then OIDs of column\n                    instances in this row will have more than 128\n                    sub-identifiers and cannot be accessed using\n                    SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6NodeInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeInOctets.setDescription("The total number of octets in the MIPv6 datagrams\n                    received from the mobile node by the MIPv6 entity.\n                    This will include datagrams with the Mobility\n                    Header or the Home Address option in the Destination\n                    Option extension header (Next Header value = 60).\n                    It will also include the IPv6 datagrams that are\n                    reverse tunneled to a home agent from the mobile\n                    node's home address.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6NodeCtrDiscontinuityTime.\n                   ")
mip6HCNodeInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeInOctets.setDescription("The total number of octets in the MIPv6 datagrams\n                    received from the mobile node by the MIPv6 entity.\n                    This will include datagrams with the Mobility\n                    Header or the Home Address option in the Destination\n                    Option extension header (Next Header value = 60).\n                    It will also include the IPv6 datagrams that are\n                    reverse tunneled to a home agent from the mobile\n                    node's home address.\n                    This object is a 64-bit version of mip6NodeInOctets.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6NodeCtrDiscontinuityTime.\n                   ")
mip6NodeInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeInPkts.setDescription("The number of MIPv6 datagrams received from the\n                    mobile node by the MIPv6 entity.  This will include\n                    the datagrams with the Mobility Header or\n                    the Home Address option in the Destination\n                    Option extension header (Next Header value = 60).\n                    It will also include the IPv6 datagrams that are\n                    reverse tunneled to a home agent from the mobile\n                    node's home address.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6NodeCtrDiscontinuityTime.\n                   ")
mip6HCNodeInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeInPkts.setDescription("The number of MIPv6 datagrams received from the\n                    mobile node by the MIPv6 entity.  This will include\n                    datagrams with the Mobility Header or the Home\n                    Address option in the Destination Option extension\n                    header (Next Header value = 60).  It will also\n                    include the IPv6 datagrams that are reverse tunneled\n                    to a home agent from the mobile node's home address.\n                    This object is a 64-bit version of mip6NodeInPkts.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6NodeCtrDiscontinuityTime.\n                   ")
mip6NodeOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeOutOctets.setDescription('The total number of octets in the MIPv6 datagrams\n                    sent to the mobile node by the MIPv6 entity.  This\n                    will include datagrams with the Mobility Header\n                    or the type 2 Routing Header.  It will also include\n                    the IPv6 datagrams that are tunneled by a home agent\n                    to the mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6NodeCtrDiscontinuityTime.\n                   ')
mip6HCNodeOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeOutOctets.setDescription('The total number of octets in the MIPv6 datagrams\n                   sent to the mobile node by the MIPv6 entity.  This\n                   will include datagrams with the Mobility Header\n                   or the type 2 Routing Header.  It will also include\n                   the IPv6 datagrams that are tunneled by a home agent\n                   to the mobile node.\n                   This object is a 64-bit version of mip6NodeOutOctets.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6NodeCtrDiscontinuityTime.\n                  ')
mip6NodeOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeOutPkts.setDescription('The number of MIPv6 datagrams sent to the mobile\n                    node by the MIPv6 entity.  This will include\n                    datagrams with the Mobility Header or the type 2\n                    Routing Header.  It will also include the IPv6\n                    datagrams that are tunneled by a home agent to the\n                    mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6NodeCtrDiscontinuityTime.\n                   ')
mip6HCNodeOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeOutPkts.setDescription('The number of MIPv6 datagrams sent to the mobile\n                   node by the MIPv6 entity.  This will include\n                   datagrams with the Mobility Header or the type 2\n                   Routing Header.  It will also include the IPv6\n                   datagrams that are tunneled by a home agent to the\n                   mobile node.\n                   This object is a 64-bit version of mip6NodeOutOctets.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6NodeCtrDiscontinuityTime.\n                  ')
mip6NodeCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeCtrDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion\n                    at which any one or more of the counters in this row\n                    suffered a discontinuity.  The relevant counters are\n                    the specific instances of any Counter32 or Counter64\n                    objects in this row.\n                    If no such discontinuities have occurred since the\n                    last re-initialization of the local management\n                    subsystem, then this object contains a zero value.\n                   ')
mip6MnHomeAddressTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1), )
if mibBuilder.loadTexts: mip6MnHomeAddressTable.setDescription('A table containing registration status for all the\n                    home addresses pertaining to the mobile node.\n                   ')
mip6MnHomeAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6MnHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6MnHomeAddress"))
if mibBuilder.loadTexts: mip6MnHomeAddressEntry.setDescription('The registration status for a home address.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6MnHomeAddress\n                    exceeds 113, then OIDs of column instances in\n                    this row will have more than 128 sub-identifiers and\n                    cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6MnHomeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6MnHomeAddressType.setDescription('The InetAddressType of the mip6MnHomeAddress that\n                    follows.\n                   ')
mip6MnHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6MnHomeAddress.setDescription("A unicast routable address assigned to the mobile\n                   node.  This is used as the 'permanent address' of the\n                   mobile node in the sense that it remains unchanged\n                   regardless of the mobile node's current point of\n                   attachment.  If mobile node doesn't have a home\n                   address assigned yet, then this object will take the\n                   default 'unspecified' value ::0.\n\n                   The type of the address represented by this object\n                   is specified by the corresponding\n                   mip6MnHomeAddressType object.\n                  ")
mip6MnHomeAddressState = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5,))).clone(namedValues=NamedValues(("unknown", 1), ("home", 2), ("registered", 3), ("pending", 4), ("isolated", 5),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnHomeAddressState.setDescription('This object indicates the state of the mobile node:\n                    unknown     -- The state of the mobile node\n                                   cannot be determined.\n                    home        -- mobile node is on the home network.\n                    registered  -- mobile node is on a foreign network\n                                   and is registered with the home\n                                   agent.\n                    pending     -- mobile node has sent registration\n                                   request to the home agent and is\n                                   waiting for the reply.\n                    isolated    -- mobile node is isolated from network,\n                                   i.e., it is not in its home network,\n                                   it is not registered, and no\n                                   registration ack is pending.\n                   ')
mip6MnDiscoveryRequests = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnDiscoveryRequests.setDescription('Total number of ICMP Dynamic Home Agent Address\n                    Discovery Requests sent by the mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnDiscoveryReplies = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnDiscoveryReplies.setDescription('Total number of ICMP Dynamic Home Agent Address\n                    Discovery Replies received by the mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnDiscoveryTimeouts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnDiscoveryTimeouts.setDescription('Total number of ICMP Dynamic Home Agent Address\n                    Discovery Requests that timed out.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnPrefixSolicitationsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnPrefixSolicitationsSent.setDescription('Total number of ICMP Mobile Prefix Solicitations\n                    sent by the mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnPrefixAdvsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnPrefixAdvsRecd.setDescription('Total number of ICMP Mobile Prefix Advertisements\n                    received by the mobile node.  This will include the\n                    ICMP Mobile Prefix Advertisements that failed the\n                    validity checks.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnPrefixAdvsIgnored = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnPrefixAdvsIgnored.setDescription('Total number of Mobile Prefix Advertisements\n                    discarded by the validity check.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnMovedToFN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMovedToFN.setDescription('Number of times the mobile node has detected\n                    movement to a foreign network from another\n                    foreign network or from the home network, has\n                    reconstructed its care-of address and has initiated\n                    the care-of address registration process.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnMovedToHN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMovedToHN.setDescription('Number of times the mobile node has detected\n                    movement from a foreign network to its home\n                    network.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnBLTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1), )
if mibBuilder.loadTexts: mip6MnBLTable.setDescription('This table corresponds to the Binding Update List\n                   (BL) that is maintained by the mobile node.  The list\n                   holds an item for every binding that the mobile node\n                   has established or is trying to establish.  Both\n                   correspondent and home registrations are included in\n                   this table.  Entries from the table are deleted as\n                   the lifetime of the binding expires.\n                  ')
mip6MnBLEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6MnHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6MnHomeAddress"), (0, "MOBILEIPV6-MIB", "mip6MnBLNodeAddressType"), (0, "MOBILEIPV6-MIB", "mip6MnBLNodeAddress"))
if mibBuilder.loadTexts: mip6MnBLEntry.setDescription('Information about a Binding Update sent by the\n                    mobile node either to its home agent or to one of\n                    its correspondent nodes.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6MnHomeAddress and\n                    mip6MnBLNodeAddress exceeds 111, then OIDs of column\n                    instances in this row will have more than 128\n                    sub-identifiers and cannot be accessed using\n                    SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6MnBLNodeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6MnBLNodeAddressType.setDescription('The InetAddressType of the mip6MnBLNodeAddress\n                     that follows.\n                    ')
mip6MnBLNodeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6MnBLNodeAddress.setDescription('The address of the agent as used in the destination\n                    address of the Binding Update.  The agent\n                    may be a home agent or a correspondent node.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding\n                    mip6MnBLNodeAddressType object.\n\n                    ')
mip6MnBLCOAType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLCOAType.setDescription('The InetAddressType of the mip6MnBLCOA that follows.\n                   ')
mip6MnBLCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLCOA.setDescription('Care-of address that the mobile node intends to\n                    register in the Binding Update request.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding mip6MnBLCOAType\n                    object.\n                   ')
mip6MnBLLifeTimeRequested = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLLifeTimeRequested.setDescription('The lifetime requested by the mobile node (in\n                    seconds) in the Binding Update.\n                   ')
mip6MnBLLifeTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLLifeTimeGranted.setDescription('The lifetime granted to the mobile node for this\n                    binding.  This field will be inaccessible if the\n                    Binding Update request has not been accepted.\n                    The lifetime remaining (lR) can be calculated using\n                    the current time (cT), mip6MnBLAcceptedTime (aT) and\n                    mip6MnBLLifeTimeGranted (lG) as follows:\n                            lR  = lG - (cT - aT).\n                    When lR is zero, this entry will be deleted from the\n                    Binding Update List and consequently from this\n                    table.\n                   ')
mip6MnBLMaxSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLMaxSeq.setDescription('The maximum value of the Sequence Number field sent\n                    in previous Binding Updates to this destination.\n                   ')
mip6MnBLTimeSent = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLTimeSent.setDescription('The time when the last (re-)transmission occurred.')
mip6MnBLAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLAccepted.setDescription('true(1) if the mobile node has received a\n                    binding acknowledgment indicating that service has\n                    been accepted (status code 0 or 1); false(2)\n                    otherwise.  false(2) implies that the registration\n                    is still pending.\n                   ')
mip6MnBLAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLAcceptedTime.setDescription('The time at which the mobile node receives a binding\n                    acknowledgment indicating that Binding Update has\n                    been accepted (status code 0 or 1);\n                    This object will be inaccessible if the Binding\n                    Update request is still pending.\n                   ')
mip6MnBLRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLRetransmissions.setDescription('The number of Binding Update retransmissions.\n                   ')
mip6MnBLDontSendBUFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLDontSendBUFlag.setDescription('true(1) indicates that future binding updates\n                    will not be sent to mip6MnBLNodeAddress.\n                    false(2) implies that binding updates will be\n                    sent to mip6MnBLNodeAddress.\n                    The mobile node sets this flag in the when it\n                    receives an ICMP Parameter Problem, Code 1,\n                    error message in response to a return\n                    routability message or Binding Update sent to\n                    mip6MnBLNodeAddress.\n                   ')
mip6MnRegnCounters = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2))
mip6MnMobilityMessagesSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMobilityMessagesSent.setDescription('The total number of mobility messages, i.e., IPv6\n                    datagrams with Mobility Header, sent by the mobile\n                    node.  There are 3 types of mobility messages, viz.,\n                    Home Test Init, Care-of Test Init, and Binding\n                    Updates, that are sent by mobile nodes.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnMobilityMessagesRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMobilityMessagesRecd.setDescription('The total number of mobility messages, i.e., IPv6\n                    datagrams with Mobility Header, received by the\n                    mobile node.  There are 5 types of mobility\n                    messages, viz., Home Test, Care-of Test, Binding\n                    Acknowledgment, Binding Refresh Request, and Binding\n                    Error, that are sent to mobile nodes.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnBUsToHA = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUsToHA.setDescription("Total number of Binding Updates sent to the mobile\n                    node's home agent(s).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6MnBUAcksFromHA = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUAcksFromHA.setDescription("Total number of valid binding acknowledgments\n                    received from the mobile node's home agent(s).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6MnBUsToCN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUsToCN.setDescription('Total number of Binding Updates sent to\n                    correspondent nodes by the mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnBUAcksFromCN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUAcksFromCN.setDescription('Total number of valid Binding Update acks\n                    received from all the correspondent nodes.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnBindingErrorsFromCN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBindingErrorsFromCN.setDescription('Total number of Binding Error messages received\n                    by mobile node from CN.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnICMPErrorsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnICMPErrorsRecd.setDescription('Total number of ICMP Error messages of type ICMP\n                    Parameter Problem, Code 1 or Code 2, received by\n                    the mobile node from a correspondent node in\n                    response to a return routability procedure, a\n                    Binding Update, or a packet with the Home Address\n                    option.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6MnBRRequestsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBRRequestsRecd.setDescription('The total number of Binding Refresh requests\n                    received by the mobile node from correspondent\n                    nodes.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnGlobalStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1))
mip6CnHomeTestInitsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnHomeTestInitsRecd.setDescription('Total number of Home Test Init messages received.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnHomeTestsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnHomeTestsSent.setDescription('Total number of Home Test messages sent.  If a Home\n                    Test Init message is found to be valid, a Home Test\n                    message will be generated and sent.  Otherwise the\n                    Home Test message is silently discarded.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnCareOfTestInitsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnCareOfTestInitsRecd.setDescription('Total number of Care-of Test Init messages received.\n                   ')
mip6CnCareOfTestsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnCareOfTestsSent.setDescription('Total number of Care-of Test messages sent.  If a\n                    Care-of Test Init message is found to be valid, a\n                    Care-of Test message will be generated and sent.\n                    Otherwise the Care-of Test message is silently\n                    discarded.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnBUsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUsRecd.setDescription('Total number of Binding Updates received by the\n                    correspondent node from mobile nodes.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnBUAcksSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUAcksSent.setDescription('Total number of acknowledgments sent by the\n                    correspondent node for the Binding Updates received.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnBRsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBRsSent.setDescription('Total number of Binding Refresh Request messages\n                    sent by the correspondent node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnBindingErrors = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBindingErrors.setDescription('Total number of Binding Error messages sent by the\n                    correspondent node to the mobile node.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnBUsAccepted = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUsAccepted.setDescription('Total number of Binding Updates accepted by the\n                    correspondent node.  If a Binding Acknowledgment\n                    message is sent for the Binding Update request,\n                    the Status code field in the message will have\n                    a value less than 128.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnBUsRejected = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUsRejected.setDescription('Total number of Binding Update requests rejected\n                    by the correspondent node.  If a Binding\n                    Acknowledgment message has been sent for the Binding\n                    Update request, the Status code field in the\n                    message will have a value greater than or equal to\n                    128.  Otherwise the Binding Update request will be\n                    silently discarded.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6CnReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnReasonUnspecified.setDescription("Total number of Binding Update requests rejected by\n                    the correspondent node with status code in the\n                    Binding Acknowledgment message indicating 'reason\n                    unspecified' (Code 128).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnInsufficientResource.setDescription("Total number of Binding Update requests rejected by\n                    the correspondent node with status code in the\n                    Binding Acknowledgment message indicating\n                    'insufficient resources' (Code 130).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnHomeRegnNotSupported = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnHomeRegnNotSupported.setDescription("Total number of Binding Update requests rejected by\n                   correspondent node with status code in the Binding\n                   Acknowledgment message indicating 'home registration\n                   not supported' (Code 131).\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6CounterDiscontinuityTime.\n                  ")
mip6CnSeqNumberOutOfWindow = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnSeqNumberOutOfWindow.setDescription("Total number of Binding Updates rejected by\n                    correspondent node with status code in the Binding\n                    Acknowledgment message indicating 'sequence number\n                    out of window' (Code 135).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnExpiredHomeNonceIndex = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnExpiredHomeNonceIndex.setDescription("The total number of Binding Updates rejected by\n                    correspondent node with status code in the Binding\n                    Acknowledgment message indicating 'expired home\n                    nonce index' (Code 136).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnExpiredCareOfNonceIndex = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnExpiredCareOfNonceIndex.setDescription("The total number of Binding Updates rejected by\n                    correspondent node with status code in the Binding\n                    Acknowledgment message indicating 'expired\n                    care-of nonce index' (Code 137).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnExpiredNonce = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnExpiredNonce.setDescription("The total number of Binding Updates rejected by\n                    correspondent node with status code in the Binding\n                    Acknowledgment message indicating 'expired nonces'\n                    (Code 138), i.e., the correspondent node no longer\n                    recognizes the Home Nonce Index value and the\n                    Care-of Nonce Index value.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnRegTypeChangeDisallowed = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnRegTypeChangeDisallowed.setDescription("The total number of Binding Updates rejected by\n                    correspondent node with status code in the Binding\n                    Acknowledgment message indicating 'registration\n                    type change disallowed' (Code 139), i.e., a binding\n                    already exists for the given home address and the\n                    home registration flag has a different value than\n                    the Home Registration (H) bit in the Binding Update.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6CnCounterTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2), )
if mibBuilder.loadTexts: mip6CnCounterTable.setDescription('A table containing each mobile .')
mip6CnCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6CnCounterEntry.setDescription('The set of correspondent node counters for a mobile\n                    node.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6BindingHomeAddress\n                    exceeds 113, then OIDs of column instances in\n                    this row will have more than 128 sub-identifiers and\n                    cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6CnBURequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURequestsAccepted.setDescription('Total number of Binding Update requests from the\n                    mobile node accepted by the correspondent node.\n                    If Binding Acknowledgment messages are sent, then\n                    the status code in the message will have a value\n                    less than 128.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CnCtrDiscontinuityTime.\n                   ')
mip6CnBURequestsRejected = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURequestsRejected.setDescription('Total number of Binding Update requests from the\n                   mobile node that have been rejected by the\n                   correspondent node.  This includes the Binding Update\n                   requests for which a Binding Acknowledgment message\n                   has been sent with status code value greater than or\n                   equal to 128 and the Binding Acknowledgment requests\n                   that have been silently discarded.\n                   Discontinuities in the value of this counter can\n                   occur at re-initialization of the management system,\n                   and at other times as indicated by the value of\n                   mip6CnCtrDiscontinuityTime.\n                  ')
mip6CnBCEntryCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBCEntryCreationTime.setDescription('The time when the current Binding Cache entry was\n                    created for the mobile node.\n                   ')
mip6CnBUAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUAcceptedTime.setDescription('The time at which the last Binding Update was\n                    accepted by the correspondent node and the\n                    corresponding Binding Cache entry was updated.\n                   ')
mip6CnBURejectionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURejectionTime.setDescription('The time at which the last Binding Update message\n                    was rejected by the correspondent node.\n                    If there have been no rejections, then this object\n                    will be inaccessible.\n                   ')
mip6CnBURejectionCode = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 6), Mip6BURequestRejectionCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURejectionCode.setDescription('If a Binding Acknowledgment is sent to the mobile\n                      node, this is the status code (> 128) that is\n                      returned in the Binding Acknowledgment.\n                      In case a Binding Acknowledgment is not sent to\n                      the mobile node, then this will be the value\n                      of the Status code that corresponds to the reason\n                      of the rejection.  If there have been no\n                      rejections, then this object will be inaccessible.\n                     ')
mip6CnCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnCtrDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\n                   at which any one or more of counters in this row,\n                   viz., instances of 'mip6CnBURequestsAccepted' and\n                   'mip6CnBURequestsRejected', suffered a discontinuity.\n                   If no such discontinuities have occurred since the\n                   last re-initialization of the local management\n                   subsystem, then this object will have a zero value.\n                  ")
mip6HaAdvsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaAdvsRecd.setDescription('Total number of valid Router Advertisements\n                    received with the Home Agent (H) bit set, on\n                    all the links on which it is serving as a Home\n                    Agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaAdvsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaAdvsSent.setDescription('Total number of unsolicited multicast Router\n                    Advertisements sent with the Home Agent (H) bit set,\n                    on all the links on which the router is serving as\n                    a Home Agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaConfTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3), )
if mibBuilder.loadTexts: mip6HaConfTable.setDescription('A table containing configurable advertisement\n                   parameters for all interfaces on which the\n                   home agent service is advertised.\n                   It is RECOMMENDED that the last written values\n                   of the objects in the conceptual rows of this\n                   table will remain unchanged across reboots of\n                   the managed entity provided that the interfaces\n                   have not been renumbered after the reboot.\n                  ')
mip6HaConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"))
if mibBuilder.loadTexts: mip6HaConfEntry.setDescription('Advertisement parameters for an interface.\n                   The instances of the columnar objects in this entry\n                   pertain to the interface that is uniquely identified\n                   by the ipv6InterfaceIfIndex of the interface.  The\n                   same ipv6InterfaceIfIndex object is used to uniquely\n                   identify instances of the columnar objects of this\n                   conceptual row.\n                  ')
mip6HaAdvPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaAdvPreference.setDescription('The preference value for the home agent to\n                   be used in the Router Advertisements.  Higher\n                   value denotes greater preference.\n                  ')
mip6HaAdvLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaAdvLifetime.setDescription('The lifetime value for the home agent to be\n                   used in the Router Advertisements.\n                  ')
mip6HaPrefixAdv = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaPrefixAdv.setDescription('Indicates whether the home agent should support\n                    sending of the ICMP Mobile Prefix Advertisements.\n                    If it is disabled(2), the home agent will not\n                    send ICMP Mobile Prefix Advertisements to the\n                    mobile nodes.\n                    The state can be changed from enabled(1) to\n                    disabled(2) and vice versa by operator\n                    intervention.\n                    Causing the state to change from enabled(1) to\n                    disabled(2) will result in the home agent\n                    disabling the Prefix advertisement function.\n                    On the other hand, changing the status from\n                    disabled(2) to enabled(1) will start the prefix\n                    advertisement function.\n                   ')
mip6HaPrefixSolicitation = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaPrefixSolicitation.setDescription('Indicates whether the home agent should respond\n                    to ICMP Mobile Prefix Solicitation messages it\n                    receives from the mobile nodes.  By default, the\n                    value will be set to enabled(1).  If it is\n                    disabled(2), the home agent will not respond to\n                    any ICMP Mobile Prefix Solicitation messages.\n                    The state can be changed from enabled(1) to\n                    disabled(2), by operator intervention.  Causing\n                    the state to change from enabled(1) to\n                    disabled(2) will result in the home agent not\n                    responding to any ICMP Mobile Prefix\n                    Solicitation messages it receives from the\n                    mobile nodes.\n                   ')
mip6HaMCastCtlMsgSupport = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaMCastCtlMsgSupport.setDescription('Indicates whether the home agent should enable\n                    support for the processing of the multicast\n                    group membership control messages it receives\n                    from the mobile nodes.  By default, the value\n                    will be set to enabled(1).  If it is\n                    disabled(2), the home agent will not process\n                    any multicast group control messages it receives\n                    from the mobile nodes.\n                    The state can be changed from enabled(1) to\n                    disabled(2), by operator intervention.  Causing\n                    the state to change from enabled(1) to\n                    disabled(2) will result in the home agent\n                    disabling the processing of the multicast group\n                    control messages it received from the mobile\n                    nodes.\n                   ')
mip6HaGlobalStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1))
mip6HaHomeTestInitsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaHomeTestInitsRecd.setDescription('Total number of Home Test Init messages received by\n                    the home agent.  This will include Home Test Init\n                    messages that failed the validity checks.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaHomeTestsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaHomeTestsSent.setDescription('Total number of Home Test messages sent by the\n                    home agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaBUsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUsRecd.setDescription('Total number of Binding Updates received by the\n                    home agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaBUAcksSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUAcksSent.setDescription('Total number of Binding Acknowledgments sent\n                    by the home agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaBRAdviceSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBRAdviceSent.setDescription('Total number of Binding Acknowledgments sent\n                    by the home agent with Binding Refresh Advice\n                    mobility option included.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaBUsAccepted = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUsAccepted.setDescription('Total number of Binding Updates accepted by this HA.\n                    Binding Acknowledgment with status code of 0 or 1.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ')
mip6HaPrefDiscoverReqd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaPrefDiscoverReqd.setDescription("The total number of Binding Acknowledgments sent by\n                    the home agent with status code indicating 'accepted\n                    but prefix discovery necessary'  (Code 1).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaReasonUnspecified.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'reason\n                    unspecified' (Code 128).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaAdmProhibited = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaAdmProhibited.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'administratively\n                    prohibited' (Code 129).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaInsufficientResource.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'insufficient\n                    resources' (Code 130).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaHomeRegnNotSupported = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaHomeRegnNotSupported.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'home\n                    registration not supported' (Code 131).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaNotHomeSubnet = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaNotHomeSubnet.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'not home subnet'\n                    (Code 132).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaNotHomeAgentForThisMN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaNotHomeAgentForThisMN.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'not home agent\n                    for this mobile node' (Code 133).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaDupAddrDetectionFailed = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaDupAddrDetectionFailed.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'Duplicate\n                    Address Detection failed' (Code 134).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaSeqNumberOutOfWindow = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaSeqNumberOutOfWindow.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'sequence number\n                    out of window' (Code 135).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaExpiredHomeNonceIndex = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaExpiredHomeNonceIndex.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'expired home\n                    nonce index' (Code 136).\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaRegTypeChangeDisallowed = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRegTypeChangeDisallowed.setDescription("Total number of Binding Update requests rejected by\n                    the home agent with status code in the Binding\n                    Acknowledgment message indicating 'registration\n                    type change disallowed' (Code 139), i.e., a binding\n                    already exists for the given home address and the\n                    home registration flag has a different value than\n                    the Home Registration (H) bit in the Binding Update.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6CounterDiscontinuityTime.\n                   ")
mip6HaCounterTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2), )
if mibBuilder.loadTexts: mip6HaCounterTable.setDescription('A table containing registration statistics for all\n                    mobile nodes registered with the home agent.\n                   ')
mip6HaCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6HaCounterEntry.setDescription('Home agent registration statistics for a mobile\n                    node.\n\n                    Implementors need to be aware that if the total\n                    number of octets in mip6BindingHomeAddress\n                    exceeds 113, then OIDs of column instances in\n                    this row will have more than 128 sub-identifiers and\n                    cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\n                   ')
mip6HaBURequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBURequestsAccepted.setDescription('Total number of service requests for the mobile node\n                    accepted by the home agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6HaCtrDiscontinuityTime.\n                   ')
mip6HaBURequestsDenied = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBURequestsDenied.setDescription('Total number of service requests for the mobile node\n                    rejected by the home agent.\n                    Discontinuities in the value of this counter can\n                    occur at re-initialization of the management system,\n                    and at other times as indicated by the value of\n                    mip6HaCtrDiscontinuityTime.\n                   ')
mip6HaBCEntryCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 3), DateAndTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBCEntryCreationTime.setDescription('The time when the current Binding Cache entry was\n                    created for the mobile node.\n                   ')
mip6HaBUAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUAcceptedTime.setDescription('The time at which the last Binding Update was\n                    accepted by the home agent for this mobile node.\n                   ')
mip6HaBURejectionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBURejectionTime.setDescription('The time at which the last Binding Update was\n                    rejected by the home agent for this mobile node.\n                    If there have been no rejections, then this object\n                    will be inaccessible.\n                   ')
mip6HaRecentBURejectionCode = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 6), Mip6BURequestRejectionCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRecentBURejectionCode.setDescription('If a Binding Acknowledgment is sent to the mobile\n                    node, this is the status code (> 128) that is\n                    returned in the Binding Acknowledgment.\n                    In case a Binding Acknowledgment is not sent to the\n                    mobile node, then this will be the value of the\n                    status code that corresponds to the reason of the\n                    rejection.\n                    If there have been no rejections, then this object\n                    will be inaccessible.\n                   ')
mip6HaCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaCtrDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\n                   at which any one or more of counters in this row,\n                   viz., instances of 'mip6HaBURequestsAccepted' and\n                   'mip6HaBURequestsRejected', suffered a discontinuity.\n                   If no such discontinuities have occurred since the\n                   last re-initialization of the local management\n                   subsystem, then this object will have a zero value.\n                  ")
mip6HaListTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4), )
if mibBuilder.loadTexts: mip6HaListTable.setDescription('This table models the Home Agents List that contains\n                    the list of all routers that are acting as home\n                    agents on each of the interfaces on which the home\n                    agent service is offered by this router.\n                   ')
mip6HaListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddressType"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddress"))
if mibBuilder.loadTexts: mip6HaListEntry.setDescription('Information about a router that is offering home\n                   agent service.\n                   The instances of the columnar objects in this entry\n                   pertain to an interface for a particular value of\n                   mip6HaLinkLocalAddressType and\n                   mip6HaLinkLocalAddress.  The interface is uniquely\n                   identified by its ipv6InterfaceIfIndex.  The same\n                   ipv6InterfaceIfIndex object is used in conjunction\n                   with the mip6HaLinkLocalAddressType and\n                   mip6HaLinkLocalAddress to uniquely identify\n                   instances of the columnar objects of this row.\n\n                   Implementors need to be aware that if the total\n                   number of octets in mip6HaLinkLocalAddress\n                   exceeds 112, then OIDs of column instances in\n                   this row will have more than 128 sub-identifiers and\n                   cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\n                  ')
mip6HaLinkLocalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6HaLinkLocalAddressType.setDescription('The address type for the link-local address\n                    of the home agent that follows.\n                   ')
mip6HaLinkLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6HaLinkLocalAddress.setDescription('The link local address of the home agent.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding\n                    mip6HaLinkLocalAddressType object.\n                   ')
mip6HaPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaPreference.setDescription('The preference value of this home agent.\n                    Higher values indicate a more preferable home\n                    agent.  The preference value is obtained from\n                    the preference field of the received Router\n                    Advertisement.\n                   ')
mip6HaRecvLifeTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRecvLifeTime.setDescription('The lifetime for this home agent.\n                   ')
mip6HaRecvTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRecvTimeStamp.setDescription('The time when the home agent advertisement was\n                    received.\n                   ')
mip6HaGlAddrTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5), )
if mibBuilder.loadTexts: mip6HaGlAddrTable.setDescription('This table contains the global addresses of the home\n                    agents in the Home Agents List.\n                   ')
mip6HaGlAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddressType"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddress"), (0, "MOBILEIPV6-MIB", "mip6HaGaAddrSeqNo"))
if mibBuilder.loadTexts: mip6HaGlAddrEntry.setDescription('A global address for a home agent in the Home Agents\n                   List.\n                   The instances of the columnar objects in this entry\n                   pertain to an interface for a particular value of\n                   mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress\n                   and mip6HaGaAddrSeqNo.\n                   The mip6HaGaAddrSeqNo object is used to distinguish\n                   between multiple instances of the home agent global\n                   addresses on the same interface for the same set of\n                   mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress,\n                   values.\n                   There is no upper-bound on the maximum number of\n                   global addresses on an interface but, for practical\n                   purposes, the upper-bound of the value\n                   mip6HaGaAddrSeqNo is set to 1024.\n                   The interface is uniquely identified by its\n                   ipv6InterfaceIfIndex.  The same ipv6InterfaceIfIndex\n                   object is used in conjunction with the\n                   mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress,\n                   and mip6HaGaAddrSeqNo to uniquely identify instances\n                   of the columnar objects of this row.\n\n                   Implementors need to be aware that if the total\n                   number of octets in mip6HaLinkLocalAddress\n                   exceeds 111, then OIDs of column instances in\n                   this row will have more than 128 sub-identifiers and\n                   cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.\n                  ')
mip6HaGaAddrSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,1024)))
if mibBuilder.loadTexts: mip6HaGaAddrSeqNo.setDescription('The index that along with ipv6InterfaceIfIndex,\n                    mip6HaLinkLocalAddressType, and\n                    mip6HaLinkLocalAddress uniquely identifies this row.\n                   ')
mip6HaGaGlobalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaGaGlobalAddressType.setDescription('The address type for the global address of the\n                    home agent that follows.\n                   ')
mip6HaGaGlobalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaGaGlobalAddress.setDescription('A global address of the home agent.\n\n                    The type of the address represented by this object\n                    is specified by the corresponding\n                    mip6HaGaGlobalAddressType object.\n                   ')
mip6MnRegistered = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 1)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"),))
if mibBuilder.loadTexts: mip6MnRegistered.setDescription('This notification is sent by a home agent when\n                    a mobile node registers with the home agent\n                    for the first time.\n                    Notifications will not be sent for subsequent\n                    updates and/or refreshes.\n                    The MO instances in the notifications will be\n                    identified by the mip6BindingHomeAddressType\n                    and mip6BindingHomeAddress for the mobile node\n                    in the mip6BindingCacheTable.\n                   ')
mip6MnDeRegistered = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 2)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"),))
if mibBuilder.loadTexts: mip6MnDeRegistered.setDescription('This notification is sent by a home agent every\n                    time a mobile node de-registers with the home\n                    agent by sending a Binding Update that requests\n                    the home agent to delete a binding.\n                    The MO instances in the notifications will be\n                    identified by the mip6BindingHomeAddressType\n                    and mip6BindingHomeAddress for the mobile node\n                    in the mip6BindingCacheTable.\n                   ')
mip6MnCOAChanged = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 3)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"),))
if mibBuilder.loadTexts: mip6MnCOAChanged.setDescription('This notification is sent by a home agent every\n                    time a mobile node sends a Binding Update with\n                    a new care-of address (for an existing Binding\n                    Cache entry).\n                    Notifications will not be sent for subsequent\n                    updates and/or refreshes for the same Care-of\n                    address.\n                    The registration of a new care-of address may\n                    indicate that the mobile node has moved or that\n                    the primary care-of address of the mobile node\n                    has become deprecated.\n                    The MO instances in the notifications will be\n                    identified by the mip6BindingHomeAddressType\n                    and mip6BindingHomeAddress for the mobile node\n                    in the mip6BindingCacheTable.\n                   ')
mip6MnBindingExpiredAtHA = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 4)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"),))
if mibBuilder.loadTexts: mip6MnBindingExpiredAtHA.setDescription('This notification is sent by a home agent when a\n                    binding for the mobile node at the home agent\n                    expired (no timely Binding Updates were received).\n                    The MO instances in the notifications will be\n                    identified by the mip6BindingHomeAddressType\n                    and mip6BindingHomeAddress for the mobile node\n                    in the mip6BindingCacheTable.\n                   ')
mip6MnBindingExpiredAtCN = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 5)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"),))
if mibBuilder.loadTexts: mip6MnBindingExpiredAtCN.setDescription('This notification is sent by a correspondent node\n                    when a binding for the mobile node at the\n                    correspondent node expired (no timely Binding\n                    Updates were received).\n                    The MO instances in the notifications will be\n                    identified by the mip6BindingHomeAddressType\n                    and mip6BindingHomeAddress for the mobile node\n                    in the mip6BindingCacheTable.\n                   ')
mip6Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 2, 1))
mip6Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 2, 2))
mip6SystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 1)).setObjects(*(("MOBILEIPV6-MIB", "mip6Capabilities"), ("MOBILEIPV6-MIB", "mip6Status"),))
if mibBuilder.loadTexts: mip6SystemGroup.setDescription(' A collection of objects for basic MIPv6\n                     monitoring.')
mip6BindingCacheGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 2)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"), ("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingTimeGranted"), ("MOBILEIPV6-MIB", "mip6BindingTimeRemaining"), ("MOBILEIPV6-MIB", "mip6BindingMaxSeq"), ("MOBILEIPV6-MIB", "mip6BindingHomeRegn"), ("MOBILEIPV6-MIB", "mip6BindingUsageTS"), ("MOBILEIPV6-MIB", "mip6BindingUsageCount"), ("MOBILEIPV6-MIB", "mip6BindingAdminStatus"),))
if mibBuilder.loadTexts: mip6BindingCacheGroup.setDescription(' A collection of objects for monitoring the\n                     Binding Cache.\n                   ')
mip6BindingHstGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 3)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingHstCOAType"), ("MOBILEIPV6-MIB", "mip6BindingHstCOA"), ("MOBILEIPV6-MIB", "mip6BindingHstTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingHstTimeExpired"), ("MOBILEIPV6-MIB", "mip6BindingHstHomeRegn"), ("MOBILEIPV6-MIB", "mip6BindingHstUsageTS"), ("MOBILEIPV6-MIB", "mip6BindingHstUsageCount"),))
if mibBuilder.loadTexts: mip6BindingHstGroup.setDescription(' A collection of objects for monitoring the\n                     Binding History.  This can be used to monitor\n                     the movement of the mobile node.\n                   ')
mip6TotalTrafficGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 4)).setObjects(*(("MOBILEIPV6-MIB", "mip6InOctets"), ("MOBILEIPV6-MIB", "mip6HCInOctets"), ("MOBILEIPV6-MIB", "mip6InPkts"), ("MOBILEIPV6-MIB", "mip6HCInPkts"), ("MOBILEIPV6-MIB", "mip6OutOctets"), ("MOBILEIPV6-MIB", "mip6HCOutOctets"), ("MOBILEIPV6-MIB", "mip6OutPkts"), ("MOBILEIPV6-MIB", "mip6HCOutPkts"), ("MOBILEIPV6-MIB", "mip6CounterDiscontinuityTime"),))
if mibBuilder.loadTexts: mip6TotalTrafficGroup.setDescription(' A collection of objects for monitoring the\n                     total MIPv6 traffic.\n                   ')
mip6NodeTrafficGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 5)).setObjects(*(("MOBILEIPV6-MIB", "mip6NodeInOctets"), ("MOBILEIPV6-MIB", "mip6HCNodeInOctets"), ("MOBILEIPV6-MIB", "mip6NodeInPkts"), ("MOBILEIPV6-MIB", "mip6HCNodeInPkts"), ("MOBILEIPV6-MIB", "mip6NodeOutOctets"), ("MOBILEIPV6-MIB", "mip6HCNodeOutOctets"), ("MOBILEIPV6-MIB", "mip6NodeOutPkts"), ("MOBILEIPV6-MIB", "mip6HCNodeOutPkts"), ("MOBILEIPV6-MIB", "mip6NodeCtrDiscontinuityTime"),))
if mibBuilder.loadTexts: mip6NodeTrafficGroup.setDescription(' A collection of objects for monitoring the\n                     MIPv6 traffic due to a mobile node.\n                   ')
mip6MnSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 6)).setObjects(*(("MOBILEIPV6-MIB", "mip6MnHomeAddressState"),))
if mibBuilder.loadTexts: mip6MnSystemGroup.setDescription(' A collection of objects for basic monitoring\n                     of the mobile node.\n                   ')
mip6MnConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 7)).setObjects(*(("MOBILEIPV6-MIB", "mip6MnDiscoveryRequests"), ("MOBILEIPV6-MIB", "mip6MnDiscoveryReplies"), ("MOBILEIPV6-MIB", "mip6MnDiscoveryTimeouts"), ("MOBILEIPV6-MIB", "mip6MnPrefixSolicitationsSent"), ("MOBILEIPV6-MIB", "mip6MnPrefixAdvsRecd"), ("MOBILEIPV6-MIB", "mip6MnPrefixAdvsIgnored"), ("MOBILEIPV6-MIB", "mip6MnMovedToFN"), ("MOBILEIPV6-MIB", "mip6MnMovedToHN"),))
if mibBuilder.loadTexts: mip6MnConfGroup.setDescription(' A collection of objects for monitoring\n                     the advertisement-related info on the\n                     mobile node.\n                   ')
mip6MnRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 8)).setObjects(*(("MOBILEIPV6-MIB", "mip6MnBLCOAType"), ("MOBILEIPV6-MIB", "mip6MnBLCOA"), ("MOBILEIPV6-MIB", "mip6MnBLLifeTimeRequested"), ("MOBILEIPV6-MIB", "mip6MnBLLifeTimeGranted"), ("MOBILEIPV6-MIB", "mip6MnBLMaxSeq"), ("MOBILEIPV6-MIB", "mip6MnBLTimeSent"), ("MOBILEIPV6-MIB", "mip6MnBLAccepted"), ("MOBILEIPV6-MIB", "mip6MnBLAcceptedTime"), ("MOBILEIPV6-MIB", "mip6MnBLRetransmissions"), ("MOBILEIPV6-MIB", "mip6MnBLDontSendBUFlag"), ("MOBILEIPV6-MIB", "mip6MnMobilityMessagesSent"), ("MOBILEIPV6-MIB", "mip6MnMobilityMessagesRecd"), ("MOBILEIPV6-MIB", "mip6MnBUsToHA"), ("MOBILEIPV6-MIB", "mip6MnBUAcksFromHA"), ("MOBILEIPV6-MIB", "mip6MnBUsToCN"), ("MOBILEIPV6-MIB", "mip6MnBUAcksFromCN"), ("MOBILEIPV6-MIB", "mip6MnBindingErrorsFromCN"), ("MOBILEIPV6-MIB", "mip6MnICMPErrorsRecd"), ("MOBILEIPV6-MIB", "mip6MnBRRequestsRecd"),))
if mibBuilder.loadTexts: mip6MnRegistrationGroup.setDescription(' A collection of objects for monitoring\n                     the registration statistics for the mobile node.\n                   ')
mip6CnStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 9)).setObjects(*(("MOBILEIPV6-MIB", "mip6CnBURequestsAccepted"), ("MOBILEIPV6-MIB", "mip6CnBURequestsRejected"), ("MOBILEIPV6-MIB", "mip6CnBCEntryCreationTime"), ("MOBILEIPV6-MIB", "mip6CnBUAcceptedTime"), ("MOBILEIPV6-MIB", "mip6CnBURejectionTime"), ("MOBILEIPV6-MIB", "mip6CnBURejectionCode"), ("MOBILEIPV6-MIB", "mip6CnCtrDiscontinuityTime"),))
if mibBuilder.loadTexts: mip6CnStatsGroup.setDescription(' A collection of objects for monitoring\n                     the control messages and corresponding\n                     statistics for each mobile node\n                     communicating with the correspondent\n                     node.\n                   ')
mip6HaSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 10)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaAdvsRecd"), ("MOBILEIPV6-MIB", "mip6HaAdvsSent"), ("MOBILEIPV6-MIB", "mip6HaAdvPreference"), ("MOBILEIPV6-MIB", "mip6HaAdvLifetime"), ("MOBILEIPV6-MIB", "mip6HaPrefixAdv"), ("MOBILEIPV6-MIB", "mip6HaPrefixSolicitation"), ("MOBILEIPV6-MIB", "mip6HaMCastCtlMsgSupport"),))
if mibBuilder.loadTexts: mip6HaSystemGroup.setDescription(' A collection of objects for monitoring\n                     the advertisement-related parameters and\n                     statistics for the home agent.\n                   ')
mip6HaListGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 11)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaPreference"), ("MOBILEIPV6-MIB", "mip6HaRecvLifeTime"), ("MOBILEIPV6-MIB", "mip6HaRecvTimeStamp"), ("MOBILEIPV6-MIB", "mip6HaGaGlobalAddressType"), ("MOBILEIPV6-MIB", "mip6HaGaGlobalAddress"),))
if mibBuilder.loadTexts: mip6HaListGroup.setDescription(' A collection of objects for monitoring\n                     the Home Agent List on the home agent.\n                   ')
mip6HaStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 12)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaBURequestsAccepted"), ("MOBILEIPV6-MIB", "mip6HaBURequestsDenied"), ("MOBILEIPV6-MIB", "mip6HaBCEntryCreationTime"), ("MOBILEIPV6-MIB", "mip6HaBUAcceptedTime"), ("MOBILEIPV6-MIB", "mip6HaBURejectionTime"), ("MOBILEIPV6-MIB", "mip6HaRecentBURejectionCode"), ("MOBILEIPV6-MIB", "mip6HaCtrDiscontinuityTime"),))
if mibBuilder.loadTexts: mip6HaStatsGroup.setDescription(' A collection of objects for monitoring\n                     registration-related statistics on the home agent.\n                   ')
mip6CnGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 13)).setObjects(*(("MOBILEIPV6-MIB", "mip6CnHomeTestInitsRecd"), ("MOBILEIPV6-MIB", "mip6CnHomeTestsSent"), ("MOBILEIPV6-MIB", "mip6CnCareOfTestInitsRecd"), ("MOBILEIPV6-MIB", "mip6CnCareOfTestsSent"), ("MOBILEIPV6-MIB", "mip6CnBUsRecd"), ("MOBILEIPV6-MIB", "mip6CnBUAcksSent"), ("MOBILEIPV6-MIB", "mip6CnBRsSent"), ("MOBILEIPV6-MIB", "mip6CnBindingErrors"), ("MOBILEIPV6-MIB", "mip6CnBUsAccepted"), ("MOBILEIPV6-MIB", "mip6CnBUsRejected"), ("MOBILEIPV6-MIB", "mip6CnReasonUnspecified"), ("MOBILEIPV6-MIB", "mip6CnInsufficientResource"), ("MOBILEIPV6-MIB", "mip6CnHomeRegnNotSupported"), ("MOBILEIPV6-MIB", "mip6CnSeqNumberOutOfWindow"), ("MOBILEIPV6-MIB", "mip6CnExpiredHomeNonceIndex"), ("MOBILEIPV6-MIB", "mip6CnExpiredCareOfNonceIndex"), ("MOBILEIPV6-MIB", "mip6CnExpiredNonce"), ("MOBILEIPV6-MIB", "mip6CnRegTypeChangeDisallowed"),))
if mibBuilder.loadTexts: mip6CnGlobalStatsGroup.setDescription(' A collection of objects for monitoring\n                     advertisement and registration statistics on\n                     a correspondent node.\n                   ')
mip6HaGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 14)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaHomeTestInitsRecd"), ("MOBILEIPV6-MIB", "mip6HaHomeTestsSent"), ("MOBILEIPV6-MIB", "mip6HaBUsRecd"), ("MOBILEIPV6-MIB", "mip6HaBUAcksSent"), ("MOBILEIPV6-MIB", "mip6HaBRAdviceSent"), ("MOBILEIPV6-MIB", "mip6HaBUsAccepted"), ("MOBILEIPV6-MIB", "mip6HaPrefDiscoverReqd"), ("MOBILEIPV6-MIB", "mip6HaReasonUnspecified"), ("MOBILEIPV6-MIB", "mip6HaAdmProhibited"), ("MOBILEIPV6-MIB", "mip6HaInsufficientResource"), ("MOBILEIPV6-MIB", "mip6HaHomeRegnNotSupported"), ("MOBILEIPV6-MIB", "mip6HaNotHomeSubnet"), ("MOBILEIPV6-MIB", "mip6HaNotHomeAgentForThisMN"), ("MOBILEIPV6-MIB", "mip6HaDupAddrDetectionFailed"), ("MOBILEIPV6-MIB", "mip6HaSeqNumberOutOfWindow"), ("MOBILEIPV6-MIB", "mip6HaExpiredHomeNonceIndex"), ("MOBILEIPV6-MIB", "mip6HaRegTypeChangeDisallowed"),))
if mibBuilder.loadTexts: mip6HaGlobalStatsGroup.setDescription(' A collection of objects for monitoring\n                     advertisement and registration statistics on\n                     a home agent.\n                   ')
mip6BindingCacheCtlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 15)).setObjects(*(("MOBILEIPV6-MIB", "mip6BindingAdminStatus"),))
if mibBuilder.loadTexts: mip6BindingCacheCtlGroup.setDescription('A collection of objects for controlling the\n                    Binding Cache.\n                   ')
mip6NotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 16)).setObjects(*(("MOBILEIPV6-MIB", "mip6MnRegistered"), ("MOBILEIPV6-MIB", "mip6MnDeRegistered"), ("MOBILEIPV6-MIB", "mip6MnCOAChanged"), ("MOBILEIPV6-MIB", "mip6MnBindingExpiredAtHA"), ("MOBILEIPV6-MIB", "mip6MnBindingExpiredAtCN"),))
if mibBuilder.loadTexts: mip6NotificationGroup.setDescription('A collection of notifications from a home agent\n                    or correspondent node to the Manager about the\n                    status of a mobile node.\n                   ')
mip6CoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 1)).setObjects(*(("MOBILEIPV6-MIB", "mip6SystemGroup"),))
if mibBuilder.loadTexts: mip6CoreCompliance.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB.\n                  ')
mip6Compliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 2)).setObjects(*(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6Compliance2.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and support\n                   monitoring of the Binding Cache and the Total\n                   Traffic.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                  ')
mip6Compliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 3)).setObjects(*(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6BindingHstGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"), ("MOBILEIPV6-MIB", "mip6NodeTrafficGroup"),))
if mibBuilder.loadTexts: mip6Compliance3.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support monitoring of the Binding Cache,\n                   the Binding History, the total traffic, and\n                   the mobile node-wide traffic.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHstHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the\n                   --     mip6BindingHstHomeAddress object.\n                   --\n                   -- OBJECT      mip6BindingHstHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the\n                   --     mip6BindingHstHomeAddress object.\n                   --\n                  ')
mip6CoreReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 4)).setObjects(*(("MOBILEIPV6-MIB", "mip6SystemGroup"),))
if mibBuilder.loadTexts: mip6CoreReadOnlyCompliance.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB without support\n                   for read-write (i.e., in read-only mode).\n                  ')
mip6ReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 5)).setObjects(*(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6ReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB without support\n                   for read-write (i.e., in read-only mode) and\n                   support monitoring of the Binding Cache and Total\n                   Traffic.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                  ')
mip6ReadOnlyCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 6)).setObjects(*(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6BindingHstGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"), ("MOBILEIPV6-MIB", "mip6NodeTrafficGroup"),))
if mibBuilder.loadTexts: mip6ReadOnlyCompliance3.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB without support\n                   for read-write (i.e., in read-only mode) and support\n                   monitoring of the Binding Cache, the Binding History,\n                   the total traffic, and the mobile node-wide traffic.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHstHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the\n                   --     mip6BindingHstHomeAddress object.\n                   --\n                   -- OBJECT      mip6BindingHstHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the\n                   --     mip6BindingHstHomeAddress object.\n                   --\n                  ')
mip6MnCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 7)).setObjects(*(("MOBILEIPV6-MIB", "mip6MnSystemGroup"),))
if mibBuilder.loadTexts: mip6MnCoreCompliance.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support monitoring of the basic mobile node\n                   functionality.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6MnHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6MnHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6MnHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6MnHomeAddress\n                   --     object.\n                   --\n                  ')
mip6MnCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 8)).setObjects(*(("MOBILEIPV6-MIB", "mip6MnSystemGroup"), ("MOBILEIPV6-MIB", "mip6MnConfGroup"), ("MOBILEIPV6-MIB", "mip6MnRegistrationGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6MnCompliance2.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support monitoring of the mobile node\n                   functionality specifically the Discovery- and\n                   Registration-related statistics,\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6MnHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6MnHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6MnHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6MnHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6MnBLNodeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6MnBLNodeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6MnBLNodeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6MnBLNodeAddress\n                   --     object.\n                   --\n                  ')
mip6CnCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 9)).setObjects(*(("MOBILEIPV6-MIB", "mip6CnGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6CnCoreCompliance.setDescription('The compliance statement for SNMP entities\n                    that implement the MOBILEIPV6-MIB and\n                    support monitoring of the basic correspondent node\n                    functionality.\n                   ')
mip6CnCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 10)).setObjects(*(("MOBILEIPV6-MIB", "mip6CnGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6CnStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6CnCompliance.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support monitoring of the basic correspondent node\n                   functionality.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n\n                  ')
mip6HaCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 11)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaSystemGroup"),))
if mibBuilder.loadTexts: mip6HaCoreCompliance.setDescription('The compliance statement for SNMP entities\n                    that implement the MOBILEIPV6-MIB and\n                    support monitoring of the basic home agent\n                    functionality.\n                   ')
mip6HaCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 12)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6HaCompliance2.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support monitoring of the home agent\n                   functionality specifically the Home Agent List\n                   and the home-agent-registration-related statistics,\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddressType\n                   -- SYNTAX      InetAddressType { ipv6z(4) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddress\n                   -- SYNTAX      InetAddress (SIZE(20))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                  ')
mip6HaCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 13)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheCtlGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6HaCompliance3.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support monitoring and control of the home agent\n                   functionality specifically the Home Agent List\n                   and the home-agent-registration-related statistics,\n\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddressType\n                   -- SYNTAX      InetAddressType { ipv6z(4) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddress\n                   -- SYNTAX      InetAddress (SIZE(20))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                  ')
mip6HaCoreReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 14)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaSystemGroup"),))
if mibBuilder.loadTexts: mip6HaCoreReadOnlyCompliance.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB without support\n                   for read-write (i.e., in read-only mode) and\n                   support monitoring of the basic home agent\n                   functionality.\n                  ')
mip6HaReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 15)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6HaReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB without support\n                   for read-write (i.e., in read-only mode) and\n                   support monitoring of the home agent\n                   functionality specifically the Home Agent List\n                   and the home-agent-registration-related statistics.\n\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddressType\n                   -- SYNTAX      InetAddressType { ipv6z(4) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddress\n                   -- SYNTAX      InetAddress (SIZE(20))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                  ')
mip6HaReadOnlyCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 16)).setObjects(*(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheCtlGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"),))
if mibBuilder.loadTexts: mip6HaReadOnlyCompliance3.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB without support\n                   for read-write (i.e., in read-only mode) and\n                   support monitoring and control of the home agent\n                   functionality specifically the Home Agent List\n                   and the home-agent-registration-related statistics,\n\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddressType\n                   -- SYNTAX      InetAddressType { ipv6z(4) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6HaLinkLocalAddress\n                   -- SYNTAX      InetAddress (SIZE(20))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for local\n                   --     ipv6 addresses for the mip6HaLinkLocalAddress\n                   --     object.\n                   --\n                  ')
mip6NotificationCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 17)).setObjects(*(("MOBILEIPV6-MIB", "mip6NotificationGroup"),))
if mibBuilder.loadTexts: mip6NotificationCompliance.setDescription('The compliance statement for SNMP entities\n                   that implement the MOBILEIPV6-MIB and\n                   support Notification from home agent or\n                   correspondent node to management stations\n                   about the mobile node status.\n                   There are a number of INDEX objects that cannot be\n                   represented in the form of OBJECT clauses in SMIv2,\n                   but for which there are compliance requirements,\n                   expressed in OBJECT clause form in this description:\n                   -- OBJECT      mip6BindingHomeAddressType\n                   -- SYNTAX      InetAddressType { ipv6(2) }\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                   --\n                   -- OBJECT      mip6BindingHomeAddress\n                   -- SYNTAX      InetAddress (SIZE(16))\n                   -- DESCRIPTION\n                   --     This MIB module requires support for global\n                   --     ipv6 addresses for the mip6BindingHomeAddress\n                   --     object.\n                  ')
mibBuilder.exportSymbols("MOBILEIPV6-MIB", mip6MnBLMaxSeq=mip6MnBLMaxSeq, mip6MnBindingExpiredAtCN=mip6MnBindingExpiredAtCN, mip6Compliances=mip6Compliances, mip6CnBUsRejected=mip6CnBUsRejected, mip6HaGlobalStats=mip6HaGlobalStats, mip6Compliance2=mip6Compliance2, mip6BindingCacheEntry=mip6BindingCacheEntry, mip6TotalTrafficGroup=mip6TotalTrafficGroup, mip6Conformance=mip6Conformance, mip6HaPrefDiscoverReqd=mip6HaPrefDiscoverReqd, mip6CnCompliance=mip6CnCompliance, mip6CoreCompliance=mip6CoreCompliance, mip6CnBURejectionTime=mip6CnBURejectionTime, mip6MnRegnCounters=mip6MnRegnCounters, mip6CnRegTypeChangeDisallowed=mip6CnRegTypeChangeDisallowed, mip6HaPrefixAdv=mip6HaPrefixAdv, mip6Mn=mip6Mn, mip6HaCoreCompliance=mip6HaCoreCompliance, mip6NodeTrafficGroup=mip6NodeTrafficGroup, mip6CnCareOfTestInitsRecd=mip6CnCareOfTestInitsRecd, mip6BindingHomeAddress=mip6BindingHomeAddress, mip6System=mip6System, mip6HaLinkLocalAddress=mip6HaLinkLocalAddress, mip6MnBindingErrorsFromCN=mip6MnBindingErrorsFromCN, mip6HCInOctets=mip6HCInOctets, mip6Ha=mip6Ha, mip6HaGlAddrTable=mip6HaGlAddrTable, mip6HaAdvPreference=mip6HaAdvPreference, mip6CnBUsAccepted=mip6CnBUsAccepted, mip6MnPrefixAdvsIgnored=mip6MnPrefixAdvsIgnored, mip6MnBUAcksFromHA=mip6MnBUAcksFromHA, mip6BindingHstCOAType=mip6BindingHstCOAType, mip6MnHomeAddressType=mip6MnHomeAddressType, mip6MnBUsToHA=mip6MnBUsToHA, mip6CnBUAcksSent=mip6CnBUAcksSent, mip6HaLinkLocalAddressType=mip6HaLinkLocalAddressType, mip6HaAdvsSent=mip6HaAdvsSent, mip6HCNodeOutOctets=mip6HCNodeOutOctets, mip6BindingHstHomeAddressType=mip6BindingHstHomeAddressType, mip6HaPrefixSolicitation=mip6HaPrefixSolicitation, mip6Core=mip6Core, mip6BindingHstCOA=mip6BindingHstCOA, mip6HaBRAdviceSent=mip6HaBRAdviceSent, mip6BindingCOAType=mip6BindingCOAType, mip6HaBURejectionTime=mip6HaBURejectionTime, mip6HaStats=mip6HaStats, mip6Objects=mip6Objects, mip6BindingTimeRemaining=mip6BindingTimeRemaining, mip6HaCompliance3=mip6HaCompliance3, Mip6BURequestRejectionCode=Mip6BURequestRejectionCode, mip6BindingCOA=mip6BindingCOA, mip6BindingHstTimeExpired=mip6BindingHstTimeExpired, mip6NotificationGroup=mip6NotificationGroup, mip6MnBLTimeSent=mip6MnBLTimeSent, mip6CnBCEntryCreationTime=mip6CnBCEntryCreationTime, mip6MnBLNodeAddressType=mip6MnBLNodeAddressType, mip6Groups=mip6Groups, mip6Stats=mip6Stats, mip6MnHomeAddressState=mip6MnHomeAddressState, mip6MnBLNodeAddress=mip6MnBLNodeAddress, mip6MnMovedToHN=mip6MnMovedToHN, mip6CnCareOfTestsSent=mip6CnCareOfTestsSent, mip6MnSystemGroup=mip6MnSystemGroup, mip6CoreReadOnlyCompliance=mip6CoreReadOnlyCompliance, mip6HaListGroup=mip6HaListGroup, mip6MnRegistered=mip6MnRegistered, mip6HaBUsAccepted=mip6HaBUsAccepted, mip6Cn=mip6Cn, mip6HaAdvLifetime=mip6HaAdvLifetime, mip6HaSeqNumberOutOfWindow=mip6HaSeqNumberOutOfWindow, mip6BindingHstHomeAddress=mip6BindingHstHomeAddress, mip6HaHomeRegnNotSupported=mip6HaHomeRegnNotSupported, mip6BindingTimeGranted=mip6BindingTimeGranted, mip6MnMovedToFN=mip6MnMovedToFN, mip6HaRecvLifeTime=mip6HaRecvLifeTime, mip6MnPrefixSolicitationsSent=mip6MnPrefixSolicitationsSent, mip6CnBUAcceptedTime=mip6CnBUAcceptedTime, mip6HaHomeTestsSent=mip6HaHomeTestsSent, mip6NodeInOctets=mip6NodeInOctets, mip6MnBUAcksFromCN=mip6MnBUAcksFromCN, mip6BindingAdminStatus=mip6BindingAdminStatus, mip6BindingHstGroup=mip6BindingHstGroup, mip6MnBLTable=mip6MnBLTable, mip6HaHomeTestInitsRecd=mip6HaHomeTestInitsRecd, mip6MnCoreCompliance=mip6MnCoreCompliance, mip6CnCounterTable=mip6CnCounterTable, mip6HaCtrDiscontinuityTime=mip6HaCtrDiscontinuityTime, mip6HaGlAddrEntry=mip6HaGlAddrEntry, mip6MnMobilityMessagesSent=mip6MnMobilityMessagesSent, mip6HaAdmProhibited=mip6HaAdmProhibited, mip6HaListEntry=mip6HaListEntry, mip6HaNotHomeAgentForThisMN=mip6HaNotHomeAgentForThisMN, mip6BindingTimeRegistered=mip6BindingTimeRegistered, mip6Notifications=mip6Notifications, mip6BindingCacheGroup=mip6BindingCacheGroup, mip6ReadOnlyCompliance2=mip6ReadOnlyCompliance2, mip6CnBURequestsAccepted=mip6CnBURequestsAccepted, mip6HaGaGlobalAddress=mip6HaGaGlobalAddress, mip6MnBLEntry=mip6MnBLEntry, mip6MnBRRequestsRecd=mip6MnBRRequestsRecd, mip6HaConfTable=mip6HaConfTable, mip6HaBURequestsAccepted=mip6HaBURequestsAccepted, mip6BindingHstIndex=mip6BindingHstIndex, mip6MnMobilityMessagesRecd=mip6MnMobilityMessagesRecd, mip6BindingHomeAddressType=mip6BindingHomeAddressType, mip6HaStatsGroup=mip6HaStatsGroup, mip6MnBLAcceptedTime=mip6MnBLAcceptedTime, mip6HaSystemGroup=mip6HaSystemGroup, mip6HaExpiredHomeNonceIndex=mip6HaExpiredHomeNonceIndex, mip6MnCOAChanged=mip6MnCOAChanged, mip6CnHomeTestInitsRecd=mip6CnHomeTestInitsRecd, mip6BindingCacheCtlGroup=mip6BindingCacheCtlGroup, mip6Bindings=mip6Bindings, mip6NodeCtrDiscontinuityTime=mip6NodeCtrDiscontinuityTime, mip6MnSystem=mip6MnSystem, mip6MnDiscoveryRequests=mip6MnDiscoveryRequests, mip6CnReasonUnspecified=mip6CnReasonUnspecified, mip6CnExpiredNonce=mip6CnExpiredNonce, mip6MnBLCOA=mip6MnBLCOA, mip6HaConfEntry=mip6HaConfEntry, mip6CnBURejectionCode=mip6CnBURejectionCode, mip6MnBUsToCN=mip6MnBUsToCN, mip6InPkts=mip6InPkts, mip6MnBLAccepted=mip6MnBLAccepted, mip6MnRegistrationGroup=mip6MnRegistrationGroup, mip6BindingHomeRegn=mip6BindingHomeRegn, mip6HaRegTypeChangeDisallowed=mip6HaRegTypeChangeDisallowed, mip6CnStatsGroup=mip6CnStatsGroup, mip6MnPrefixAdvsRecd=mip6MnPrefixAdvsRecd, mip6OutOctets=mip6OutOctets, mip6NodeTrafficEntry=mip6NodeTrafficEntry, mip6HaBURequestsDenied=mip6HaBURequestsDenied, mip6BindingMaxSeq=mip6BindingMaxSeq, mip6HaGaAddrSeqNo=mip6HaGaAddrSeqNo, mip6InOctets=mip6InOctets, mip6CnExpiredHomeNonceIndex=mip6CnExpiredHomeNonceIndex, mip6MnBindingExpiredAtHA=mip6MnBindingExpiredAtHA, mip6HaAdvertisement=mip6HaAdvertisement, mip6CnBUsRecd=mip6CnBUsRecd, mip6MnBLRetransmissions=mip6MnBLRetransmissions, mip6CnStats=mip6CnStats, mip6BindingHstHomeRegn=mip6BindingHstHomeRegn, mip6CnBRsSent=mip6CnBRsSent, mip6MnHomeAddressTable=mip6MnHomeAddressTable, mip6CnGlobalStats=mip6CnGlobalStats, mip6HaRecentBURejectionCode=mip6HaRecentBURejectionCode, mip6MnRegistration=mip6MnRegistration, mip6ReadOnlyCompliance3=mip6ReadOnlyCompliance3, PYSNMP_MODULE_ID=mip6MIB, mip6CnCoreCompliance=mip6CnCoreCompliance, mip6NodeOutOctets=mip6NodeOutOctets, mip6CnInsufficientResource=mip6CnInsufficientResource, mip6CnHomeRegnNotSupported=mip6CnHomeRegnNotSupported, mip6HCNodeOutPkts=mip6HCNodeOutPkts, mip6HaGlobalStatsGroup=mip6HaGlobalStatsGroup, mip6HaBUsRecd=mip6HaBUsRecd, mip6HaListTable=mip6HaListTable, mip6HaRecvTimeStamp=mip6HaRecvTimeStamp, mip6BindingCacheTable=mip6BindingCacheTable, mip6CnHomeTestsSent=mip6CnHomeTestsSent, mip6BindingHistoryTable=mip6BindingHistoryTable, mip6HaReasonUnspecified=mip6HaReasonUnspecified, mip6MnDeRegistered=mip6MnDeRegistered, mip6BindingHstUsageCount=mip6BindingHstUsageCount, mip6HaMCastCtlMsgSupport=mip6HaMCastCtlMsgSupport, mip6MnBLDontSendBUFlag=mip6MnBLDontSendBUFlag, mip6CnSystem=mip6CnSystem, mip6HaCounterTable=mip6HaCounterTable, mip6MnBLLifeTimeGranted=mip6MnBLLifeTimeGranted, mip6CnCtrDiscontinuityTime=mip6CnCtrDiscontinuityTime, mip6HaGaGlobalAddressType=mip6HaGaGlobalAddressType, mip6BindingUsageCount=mip6BindingUsageCount, mip6Status=mip6Status, mip6NodeInPkts=mip6NodeInPkts, mip6BindingHstTimeRegistered=mip6BindingHstTimeRegistered, mip6HaPreference=mip6HaPreference, mip6MnDiscoveryReplies=mip6MnDiscoveryReplies, mip6HaAdvsRecd=mip6HaAdvsRecd, mip6HaBCEntryCreationTime=mip6HaBCEntryCreationTime, mip6HaInsufficientResource=mip6HaInsufficientResource, mip6MnICMPErrorsRecd=mip6MnICMPErrorsRecd, mip6HCNodeInOctets=mip6HCNodeInOctets, mip6BindingUsageTS=mip6BindingUsageTS, mip6CnExpiredCareOfNonceIndex=mip6CnExpiredCareOfNonceIndex, mip6BindingHistoryEntry=mip6BindingHistoryEntry, mip6MnHomeAddress=mip6MnHomeAddress, mip6HCOutOctets=mip6HCOutOctets, mip6CnBURequestsRejected=mip6CnBURequestsRejected, mip6MnConfGroup=mip6MnConfGroup, mip6BindingHstUsageTS=mip6BindingHstUsageTS, mip6MnConf=mip6MnConf, mip6OutPkts=mip6OutPkts, mip6HaCoreReadOnlyCompliance=mip6HaCoreReadOnlyCompliance, mip6NodeOutPkts=mip6NodeOutPkts, mip6HaDupAddrDetectionFailed=mip6HaDupAddrDetectionFailed, mip6HaBUAcksSent=mip6HaBUAcksSent, mip6MnBLLifeTimeRequested=mip6MnBLLifeTimeRequested, mip6HaNotHomeSubnet=mip6HaNotHomeSubnet, mip6SystemGroup=mip6SystemGroup, mip6CnBindingErrors=mip6CnBindingErrors, mip6HaReadOnlyCompliance2=mip6HaReadOnlyCompliance2, mip6HaCounterEntry=mip6HaCounterEntry, mip6HaCompliance2=mip6HaCompliance2, mip6Capabilities=mip6Capabilities, mip6MIB=mip6MIB, mip6CnGlobalStatsGroup=mip6CnGlobalStatsGroup, mip6Compliance3=mip6Compliance3, mip6HCOutPkts=mip6HCOutPkts, mip6MnHomeAddressEntry=mip6MnHomeAddressEntry, mip6NotificationCompliance=mip6NotificationCompliance, mip6MnDiscoveryTimeouts=mip6MnDiscoveryTimeouts, mip6MnCompliance2=mip6MnCompliance2, mip6MnBLCOAType=mip6MnBLCOAType, mip6HCInPkts=mip6HCInPkts, mip6NodeTrafficTable=mip6NodeTrafficTable, mip6HCNodeInPkts=mip6HCNodeInPkts, mip6TotalTraffic=mip6TotalTraffic, mip6CounterDiscontinuityTime=mip6CounterDiscontinuityTime, mip6HaReadOnlyCompliance3=mip6HaReadOnlyCompliance3, mip6CnSeqNumberOutOfWindow=mip6CnSeqNumberOutOfWindow, mip6HaBUAcceptedTime=mip6HaBUAcceptedTime, mip6CnCounterEntry=mip6CnCounterEntry)
