#
# PySNMP MIB module RADIUS-ACC-SERVER-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/RADIUS-ACC-SERVER-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:25:27 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( Integer, OctetString, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ObjectGroup, ModuleCompliance, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
( MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, NotificationType, Gauge32, ObjectIdentity, Unsigned32, iso, Counter32, Integer32, TimeTicks, Bits, mib_2, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "NotificationType", "Gauge32", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "Integer32", "TimeTicks", "Bits", "mib-2")
( TextualConvention, DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
radiusAccServMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 67, 2, 1)).setRevisions(("2006-08-21 00:00", "1999-06-11 00:00",))
if mibBuilder.loadTexts: radiusAccServMIB.setLastUpdated('200608210000Z')
if mibBuilder.loadTexts: radiusAccServMIB.setOrganization('IETF RADIUS Extensions Working Group.')
if mibBuilder.loadTexts: radiusAccServMIB.setContactInfo(' Bernard Aboba\n                Microsoft\n                One Microsoft Way\n                Redmond, WA  98052\n                US\n\n                Phone: +1 425 936 6605\n                EMail: bernarda@microsoft.com')
if mibBuilder.loadTexts: radiusAccServMIB.setDescription('The MIB module for entities implementing the server\n              side of the Remote Authentication Dial-In User\n              Service (RADIUS) accounting protocol.  Copyright (C)\n              The Internet Society (2006).  This version of this\n              MIB module is part of RFC 4671; see the RFC itself\n              for full legal notices.')
radiusMIB = ObjectIdentity((1, 3, 6, 1, 2, 1, 67))
if mibBuilder.loadTexts: radiusMIB.setDescription('The OID assigned to RADIUS MIB work by the IANA.')
radiusAccounting = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2))
radiusAccServMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 1, 1))
radiusAccServ = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1))
radiusAccServIdent = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServIdent.setDescription("The implementation identification string for the\n              RADIUS accounting server software in use on the\n              system, for example, 'FNS-2.1'.")
radiusAccServUpTime = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServUpTime.setDescription('If the server has a persistent state (e.g., a\n              process), this value will be the time elapsed (in\n              hundredths of a second) since the server process was\n              started.  For software without persistent state, this\n              value will be zero.')
radiusAccServResetTime = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServResetTime.setDescription("If the server has a persistent state (e.g., a process)\n              and supports a 'reset' operation (e.g., can be told to\n              re-read configuration files), this value will be the\n              time elapsed (in hundredths of a second) since the\n              server was 'reset.'  For software that does not\n              have persistence or does not support a 'reset'\n              operation, this value will be zero.")
radiusAccServConfigReset = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("initializing", 3), ("running", 4),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccServConfigReset.setDescription('Status/action object to reinitialize any persistent\n               server state.  When set to reset(2), any persistent\n               server state (such as a process) is reinitialized as\n               if the server had just been started.  This value will\n               never be returned by a read operation.  When read,\n               one of the following values will be returned:\n                   other(1) - server in some unknown state;\n                   initializing(3) - server (re)initializing;\n                   running(4) - server currently running.')
radiusAccServTotalRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalRequests.setDescription('The number of packets received on the\n              accounting port.')
radiusAccServTotalInvalidRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalInvalidRequests.setDescription('The number of RADIUS Accounting-Request packets\n              received from unknown addresses.')
radiusAccServTotalDupRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalDupRequests.setDescription('The number of duplicate RADIUS Accounting-Request\n              packets received.')
radiusAccServTotalResponses = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalResponses.setDescription('The number of RADIUS Accounting-Response packets\n              sent.')
radiusAccServTotalMalformedRequests = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalMalformedRequests.setDescription('The number of malformed RADIUS Accounting-Request\n              packets received.  Bad authenticators or unknown\n              types are not included as malformed Access-Requests.')
radiusAccServTotalBadAuthenticators = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalBadAuthenticators.setDescription('The number of RADIUS Accounting-Request packets\n             that contained an invalid authenticator.')
radiusAccServTotalPacketsDropped = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalPacketsDropped.setDescription('The number of incoming packets silently discarded\n             for a reason other than malformed, bad authenticators,\n             or unknown types.')
radiusAccServTotalNoRecords = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalNoRecords.setDescription('The number of RADIUS Accounting-Request packets\n              that were received and responded to but not\n              recorded.')
radiusAccServTotalUnknownTypes = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServTotalUnknownTypes.setDescription('The number of RADIUS packets of unknown type that\n             were received.')
radiusAccClientTable = MibTable((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14), )
if mibBuilder.loadTexts: radiusAccClientTable.setDescription('The (conceptual) table listing the RADIUS accounting\n              clients with which the server shares a secret.')
radiusAccClientEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1), ).setIndexNames((0, "RADIUS-ACC-SERVER-MIB", "radiusAccClientIndex"))
if mibBuilder.loadTexts: radiusAccClientEntry.setDescription('An entry (conceptual row) representing a RADIUS\n              accounting client with which the server shares a\n              secret.')
radiusAccClientIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
if mibBuilder.loadTexts: radiusAccClientIndex.setDescription('A number uniquely identifying each RADIUS accounting\n              client with which this server communicates.')
radiusAccClientAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientAddress.setDescription('The NAS-IP-Address of the RADIUS accounting client\n\n              referred to in this table entry.')
radiusAccClientID = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientID.setDescription('The NAS-Identifier of the RADIUS accounting client\n              referred to in this table entry.  This is not\n              necessarily the same as sysName in MIB II.')
radiusAccServPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServPacketsDropped.setDescription('The number of incoming packets received\n            from this client and silently discarded\n            for a reason other than malformed, bad\n            authenticators, or unknown types.')
radiusAccServRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServRequests.setDescription('The number of packets received from this\n              client on the accounting port.')
radiusAccServDupRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServDupRequests.setDescription('The number of duplicate RADIUS Accounting-Request\n              packets received from this client.')
radiusAccServResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServResponses.setDescription('The number of RADIUS Accounting-Response packets\n              sent to this client.')
radiusAccServBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServBadAuthenticators.setDescription('The number of RADIUS Accounting-Request packets\n              that contained invalid authenticators received\n              from this client.')
radiusAccServMalformedRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServMalformedRequests.setDescription('The number of malformed RADIUS Accounting-Request\n              packets that were received from this client.\n              Bad authenticators and unknown types\n              are not included as malformed Accounting-Requests.')
radiusAccServNoRecords = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServNoRecords.setDescription('The number of RADIUS Accounting-Request packets\n              that were received and responded to but not\n              recorded.')
radiusAccServUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 14, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServUnknownTypes.setDescription('The number of RADIUS packets of unknown type that\n              were received from this client.')
radiusAccClientExtTable = MibTable((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15), )
if mibBuilder.loadTexts: radiusAccClientExtTable.setDescription('The (conceptual) table listing the RADIUS accounting\n              clients with which the server shares a secret.')
radiusAccClientExtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1), ).setIndexNames((0, "RADIUS-ACC-SERVER-MIB", "radiusAccClientExtIndex"))
if mibBuilder.loadTexts: radiusAccClientExtEntry.setDescription('An entry (conceptual row) representing a RADIUS\n              accounting client with which the server shares a\n              secret.')
radiusAccClientExtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647)))
if mibBuilder.loadTexts: radiusAccClientExtIndex.setDescription('A number uniquely identifying each RADIUS accounting\n              client with which this server communicates.')
radiusAccClientInetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientInetAddressType.setDescription('The type of address format used for the\n                radiusAccClientInetAddress object.')
radiusAccClientInetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientInetAddress.setDescription('The IP address of the RADIUS accounting\n                client referred to in this table entry, using\n                the IPv6 address format.')
radiusAccClientExtID = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtID.setDescription('The NAS-Identifier of the RADIUS accounting client\n              referred to in this table entry.  This is not\n              necessarily the same as sysName in MIB II.')
radiusAccServExtPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtPacketsDropped.setDescription('The number of incoming packets received from this\n            client and silently discarded for a reason other\n            than malformed, bad authenticators, or unknown types.\n            This counter may experience a discontinuity when the\n            RADIUS Accounting Server module within the managed\n            entity is reinitialized, as indicated by the current\n            value of radiusAccServerCounterDiscontinuity.')
radiusAccServExtRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtRequests.setDescription('The number of packets received from this\n              client on the accounting port.  This counter\n              may experience a discontinuity when the\n              RADIUS Accounting Server module within the\n              managed entity is reinitialized, as indicated by\n              the current value of\n              radiusAccServerCounterDiscontinuity.')
radiusAccServExtDupRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtDupRequests.setDescription('The number of duplicate RADIUS Accounting-Request\n              packets received from this client.  This counter\n\n              may experience a discontinuity when the RADIUS\n              Accounting Server module within the managed\n              entity is reinitialized, as indicated by the\n              current value of\n              radiusAccServerCounterDiscontinuity.')
radiusAccServExtResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtResponses.setDescription('The number of RADIUS Accounting-Response packets\n              sent to this client.  This counter may experience\n              a discontinuity when the RADIUS Accounting Server\n              module within the managed entity is reinitialized,\n              as indicated by the current value of\n              radiusAccServerCounterDiscontinuity.')
radiusAccServExtBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtBadAuthenticators.setDescription('The number of RADIUS Accounting-Request packets\n              that contained invalid authenticators received\n              from this client.  This counter may experience a\n              discontinuity when the RADIUS Accounting Server\n              module within the managed entity is reinitialized,\n              as indicated by the current value of\n              radiusAccServerCounterDiscontinuity.')
radiusAccServExtMalformedRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtMalformedRequests.setDescription('The number of malformed RADIUS Accounting-Request\n              packets that were received from this client.\n              Bad authenticators and unknown types are not\n\n              included as malformed Accounting-Requests.  This\n              counter may experience a discontinuity when the\n              RADIUS Accounting Server module within the managed\n              entity is reinitialized, as indicated by the current\n              value of radiusAccServerCounterDiscontinuity.')
radiusAccServExtNoRecords = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtNoRecords.setDescription('The number of RADIUS Accounting-Request packets\n              that were received and responded to but not\n              recorded.  This counter may experience a\n              discontinuity when the RADIUS Accounting Server\n              module within the managed entity is reinitialized,\n              as indicated by the current value of\n              radiusAccServerCounterDiscontinuity.')
radiusAccServExtUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServExtUnknownTypes.setDescription('The number of RADIUS packets of unknown type that\n              were received from this client.  This counter may\n              experience a discontinuity when the RADIUS Accounting\n              Server module within the managed entity is\n              reinitialized, as indicated by the current value of\n              radiusAccServerCounterDiscontinuity.')
radiusAccServerCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 1, 1, 1, 15, 1, 13), TimeTicks()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServerCounterDiscontinuity.setDescription('The number of centiseconds since the last\n                discontinuity in the RADIUS Accounting Server\n                counters.  A discontinuity may be the result of\n                a reinitialization of the RADIUS Accounting Server\n\n                module within the managed entity.')
radiusAccServMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 1, 2))
radiusAccServMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 1, 2, 1))
radiusAccServMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 1, 2, 2))
radiusAccServMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 2, 1, 2, 1, 1)).setObjects(*(("RADIUS-ACC-SERVER-MIB", "radiusAccServMIBGroup"),))
if mibBuilder.loadTexts: radiusAccServMIBCompliance.setDescription('The compliance statement for accounting servers\n            implementing the RADIUS Accounting Server MIB.\n            Implementation of this module is for IPv4-only\n            entities, or for backwards compatibility use with\n            entities that support both IPv4 and IPv6.')
radiusAccServExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 2, 1, 2, 1, 2)).setObjects(*(("RADIUS-ACC-SERVER-MIB", "radiusAccServExtMIBGroup"),))
if mibBuilder.loadTexts: radiusAccServExtMIBCompliance.setDescription('The compliance statement for accounting\n            servers implementing the RADIUS Accounting\n            Server IPv6 Extensions MIB.  Implementation of\n            this module is for entities that support IPv6,\n            or support IPv4 and IPv6.')
radiusAccServMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 2, 1, 2, 2, 1)).setObjects(*(("RADIUS-ACC-SERVER-MIB", "radiusAccServIdent"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServUpTime"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServResetTime"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServConfigReset"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalInvalidRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalDupRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalResponses"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalMalformedRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalBadAuthenticators"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalPacketsDropped"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalNoRecords"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalUnknownTypes"), ("RADIUS-ACC-SERVER-MIB", "radiusAccClientAddress"), ("RADIUS-ACC-SERVER-MIB", "radiusAccClientID"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServPacketsDropped"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServDupRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServResponses"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServBadAuthenticators"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServMalformedRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServNoRecords"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServUnknownTypes"),))
if mibBuilder.loadTexts: radiusAccServMIBGroup.setDescription('The collection of objects providing management of\n             a RADIUS Accounting Server.')
radiusAccServExtMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 2, 1, 2, 2, 2)).setObjects(*(("RADIUS-ACC-SERVER-MIB", "radiusAccServIdent"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServUpTime"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServResetTime"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServConfigReset"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalInvalidRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalDupRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalResponses"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalMalformedRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalBadAuthenticators"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalPacketsDropped"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalNoRecords"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServTotalUnknownTypes"), ("RADIUS-ACC-SERVER-MIB", "radiusAccClientInetAddressType"), ("RADIUS-ACC-SERVER-MIB", "radiusAccClientInetAddress"), ("RADIUS-ACC-SERVER-MIB", "radiusAccClientExtID"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtPacketsDropped"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtDupRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtResponses"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtBadAuthenticators"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtMalformedRequests"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtNoRecords"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServExtUnknownTypes"), ("RADIUS-ACC-SERVER-MIB", "radiusAccServerCounterDiscontinuity"),))
if mibBuilder.loadTexts: radiusAccServExtMIBGroup.setDescription('The collection of objects providing management of\n             a RADIUS Accounting Server.')
mibBuilder.exportSymbols("RADIUS-ACC-SERVER-MIB", radiusAccServResponses=radiusAccServResponses, radiusAccServTotalResponses=radiusAccServTotalResponses, radiusAccServNoRecords=radiusAccServNoRecords, radiusAccServConfigReset=radiusAccServConfigReset, radiusAccServTotalUnknownTypes=radiusAccServTotalUnknownTypes, radiusAccClientIndex=radiusAccClientIndex, PYSNMP_MODULE_ID=radiusAccServMIB, radiusAccServRequests=radiusAccServRequests, radiusAccClientID=radiusAccClientID, radiusAccClientExtTable=radiusAccClientExtTable, radiusAccServMIBCompliance=radiusAccServMIBCompliance, radiusAccServTotalNoRecords=radiusAccServTotalNoRecords, radiusAccServMIBGroups=radiusAccServMIBGroups, radiusAccClientAddress=radiusAccClientAddress, radiusAccClientExtID=radiusAccClientExtID, radiusAccServMalformedRequests=radiusAccServMalformedRequests, radiusAccServUnknownTypes=radiusAccServUnknownTypes, radiusAccClientTable=radiusAccClientTable, radiusAccServDupRequests=radiusAccServDupRequests, radiusAccClientEntry=radiusAccClientEntry, radiusMIB=radiusMIB, radiusAccServerCounterDiscontinuity=radiusAccServerCounterDiscontinuity, radiusAccServTotalDupRequests=radiusAccServTotalDupRequests, radiusAccServExtUnknownTypes=radiusAccServExtUnknownTypes, radiusAccServMIBGroup=radiusAccServMIBGroup, radiusAccServMIBCompliances=radiusAccServMIBCompliances, radiusAccServMIBConformance=radiusAccServMIBConformance, radiusAccServTotalMalformedRequests=radiusAccServTotalMalformedRequests, radiusAccServExtMalformedRequests=radiusAccServExtMalformedRequests, radiusAccServExtRequests=radiusAccServExtRequests, radiusAccServExtBadAuthenticators=radiusAccServExtBadAuthenticators, radiusAccServTotalRequests=radiusAccServTotalRequests, radiusAccServExtNoRecords=radiusAccServExtNoRecords, radiusAccClientExtIndex=radiusAccClientExtIndex, radiusAccServIdent=radiusAccServIdent, radiusAccServPacketsDropped=radiusAccServPacketsDropped, radiusAccServBadAuthenticators=radiusAccServBadAuthenticators, radiusAccServExtPacketsDropped=radiusAccServExtPacketsDropped, radiusAccServTotalBadAuthenticators=radiusAccServTotalBadAuthenticators, radiusAccounting=radiusAccounting, radiusAccServResetTime=radiusAccServResetTime, radiusAccClientInetAddressType=radiusAccClientInetAddressType, radiusAccServTotalPacketsDropped=radiusAccServTotalPacketsDropped, radiusAccClientInetAddress=radiusAccClientInetAddress, radiusAccServExtDupRequests=radiusAccServExtDupRequests, radiusAccServExtResponses=radiusAccServExtResponses, radiusAccServ=radiusAccServ, radiusAccServExtMIBCompliance=radiusAccServExtMIBCompliance, radiusAccServUpTime=radiusAccServUpTime, radiusAccClientExtEntry=radiusAccClientExtEntry, radiusAccServTotalInvalidRequests=radiusAccServTotalInvalidRequests, radiusAccServMIB=radiusAccServMIB, radiusAccServMIBObjects=radiusAccServMIBObjects, radiusAccServExtMIBGroup=radiusAccServExtMIBGroup)
