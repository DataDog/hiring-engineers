#
# PySNMP MIB module DOCS-BPI2-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/DOCS-BPI2-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:08:56 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( Integer, OctetString, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
( docsIfMib, ) = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfMib")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( InetAddressType, InetAddress, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( NotificationType, Integer32, MibIdentifier, Counter64, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, ModuleIdentity, Bits, Unsigned32, ObjectIdentity, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "MibIdentifier", "Counter64", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "ModuleIdentity", "Bits", "Unsigned32", "ObjectIdentity", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
( MacAddress, TruthValue, DateAndTime, RowStatus, ) = mibBuilder.importSymbols("SNMPv2-TC-v1", "MacAddress", "TruthValue", "DateAndTime", "RowStatus")
docsBpi2MIB = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6))
docsBpi2MIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1))
docsBpi2CmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1))
docsBpi2CmMulticastObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3))
docsBpi2CmCertObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4))
docsBpi2CmtsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2))
docsBpi2CmtsMulticastObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4))
docsBpi2CmtsCertObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5))
docsBpi2CodeDownloadControl = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4))
docsBpi2Notification = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 2))
docsBpi2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3))
docsBpi2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 1))
docsBpi2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2))
class X509Certificate(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,1400)

docsBpi2CmBaseTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1), )
if mibBuilder.loadTexts: docsBpi2CmBaseTable.setDescription('This table describes the basic and authorization\n        related Baseline Privacy Plus attributes of each CM MAC\n        interface.')
docsBpi2CmBaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmBaseEntry.setDescription('Each entry contains objects describing attributes of\n        one CM MAC interface. An entry in this table exists for each\n        ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmPrivacyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setDescription('This object identifies whether this CM is\n        provisioned to run Baseline Privacy Plus.')
docsBpi2CmPublicKey = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(74,74),ValueSizeConstraint(106,106),ValueSizeConstraint(140,140),ValueSizeConstraint(204,204),ValueSizeConstraint(270,270),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setDescription('The value of this object is a DER-encoded\n        RSAPublicKey ASN.1 type string, as defined in the RSA\n        Encryption Standard (PKCS #1) [10], corresponding to the\n        public key of the CM. The 74, 106, 140, 204, and 270 byte key\n        encoding lengths correspond to 512 bit, 768 bit, 1024 bit,\n        1536 bit, and 2048 public moduli respectively.')
docsBpi2CmAuthState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("start", 1), ("authWait", 2), ("authorized", 3), ("reauthWait", 4), ("authRejectWait", 5), ("silent", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthState.setDescription('The value of this object is the state of the CM\n        authorization FSM.  The start state indicates that FSM is in\n        its initial state.')
docsBpi2CmAuthKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setDescription('The value of this object is the most recent\n        authorization key sequence number for this FSM.')
docsBpi2CmAuthExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setDescription('The value of this object is the actual clock time for\n        expiration of the immediate predecessor of the most recent \n        authorization key for this FSM.  If this FSM has only one \n        authorization key, then the value is the time of activation \n        of this FSM.')
docsBpi2CmAuthExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setDescription('The value of this object is the actual clock time for\n        expiration of the most recent authorization key for this FSM.')
docsBpi2CmAuthReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setDescription('Setting this object to TRUE generates a Reauthorize\n        event in the authorization FSM. Reading this object always\n        returns FALSE.')
docsBpi2CmAuthGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,6047999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setDescription('The value of this object is the grace time for an\n        authorization key.  A CM is expected to start trying to get a\n        new authorization key beginning AuthGraceTime seconds before\n        the authorization key actually expires.')
docsBpi2CmTEKGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,302399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setDescription('The value of this object is the grace time for\n        the TEK in seconds.  The CM is expected to start trying to\n        acquire a new TEK beginning TEK GraceTime seconds before\n        the expiration of the most recent TEK.')
docsBpi2CmAuthWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setDescription('The value of this object is the Authorize Wait\n        Timeout.')
docsBpi2CmReauthWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setDescription('The value of this object is the Reauthorize Wait\n        Timeout in seconds.')
docsBpi2CmOpWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setDescription('The value of this object is the Operational Wait\n        Timeout in seconds.')
docsBpi2CmRekeyWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setDescription('The value of this object is the Rekey Wait Timeout\n        in seconds.')
docsBpi2CmAuthRejectWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setDescription('The value of this object is the Authorization Reject\n        Wait Timeout in seconds.')
docsBpi2CmSAMapWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setDescription('The value of this object is the retransmission\n        interval, in seconds, of SA Map Requests from the MAP Wait\n        state.')
docsBpi2CmSAMapMaxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setDescription('The value of this object is the maximum number of\n        Map Request retries allowed.')
docsBpi2CmAuthentInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setDescription('The value of this object is the count of times the CM\n        has transmitted an Authentication Information message.')
docsBpi2CmAuthRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setDescription('The value of this object is the count of times the CM\n        has transmitted an Authorization Request message.')
docsBpi2CmAuthReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setDescription('The value of this object is the count of times the CM\n        has received an Authorization Reply message.')
docsBpi2CmAuthRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setDescription('The value of this object is the count of times the CM\n        has received an Authorization Reject message.')
docsBpi2CmAuthInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setDescription('The value of this object is the count of times the CM\n        has received an Authorization Invalid message.')
docsBpi2CmAuthRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 11,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unauthorizedSaid", 4), ("permanentAuthorizationFailure", 8), ("timeOfDayNotAcquired", 11),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in most recent Authorization\n        Reject message received by the CM.  This has value unknown(2)\n        if the last Error-Code value was 0, and none(1) if no\n        Authorization Reject message has been received since reboot.')
docsBpi2CmAuthRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setDescription('The value of this object is the Display-String in\n        most recent Authorization Reject message received by the CM.\n        This is a zero length string if no Authorization Reject\n        message has been received since reboot.')
docsBpi2CmAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unsolicited", 5), ("invalidKeySequence", 6), ("keyRequestAuthenticationFailure", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in most recent Authorization\n        Invalid message received by the CM.  This has value unknown(2)\n        if the last Error-Code value was 0, and none(1) if no\n        Authorization Invalid message has been received since reboot.')
docsBpi2CmAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setDescription('The value of this object is the Display-String in\n        most recent Authorization Invalid message received by the CM.\n        This is a zero length string if no Authorization Invalid\n        message has been received since reboot.')
docsBpi2CmTEKTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2), )
if mibBuilder.loadTexts: docsBpi2CmTEKTable.setDescription('This table describes the attributes of each CM\n        Traffic Encryption Key(TEK) association. The CM maintains (no\n        more than) one TEK association per SAID per CM MAC interface.')
docsBpi2CmTEKEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmTEKSAId"))
if mibBuilder.loadTexts: docsBpi2CmTEKEntry.setDescription('Each entry contains objects describing the TEK\n        association attributes of one SAID. The CM MUST create one\n        entry per SAID, regardless of whether the SAID was obtained\n        from a Registration Response message, from an Authorization\n        Reply message, or from any dynamic SAID establishment\n        mechanisms.')
docsBpi2CmTEKSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,16383)))
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setDescription('The value of this object is the DOCSIS Security\n        Association ID (SAID).')
docsBpi2CmTEKSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setDescription('The value of this object is the type of security\n        association.')
docsBpi2CmTEKDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setDescription('The value of this object is the data encryption\n        algorithm being utilized.')
docsBpi2CmTEKDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("none", 0),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setDescription('The value of this object is the data authentication\n        algorithm being utilized.')
docsBpi2CmTEKState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("start", 1), ("opWait", 2), ("opReauthWait", 3), ("operational", 4), ("rekeyWait", 5), ("rekeyReauthWait", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKState.setDescription('The value of this object is the state of the\n        indicated TEK FSM.  The start(1) state indicates that FSM is\n        in its initial state.')
docsBpi2CmTEKKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setDescription('The value of this object is the most recent TEK\n        key sequence number for this TEK FSM.')
docsBpi2CmTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setDescription('The value of this object is the actual clock time for\n        expiration of the immediate predecessor of the most recent TEK\n        for this FSM.  If this FSM has only one TEK, then the value is\n        the time of activation of this FSM.')
docsBpi2CmTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setDescription('The value of this object is the actual clock time for\n        expiration of the most recent TEK for this FSM.')
docsBpi2CmTEKKeyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setDescription('The value of this object is the count of times the CM\n        has transmitted a Key Request message.')
docsBpi2CmTEKKeyReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setDescription('The value of this object is the count of times the CM\n        has received a Key Reply message, including a message whose\n        authentication failed.')
docsBpi2CmTEKKeyRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setDescription('The value of this object is the count of times the CM\n        has received a Key Reject message, including a message whose\n        authentication failed.')
docsBpi2CmTEKInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setDescription('The value of this object is the count of times the CM\n        has received a TEK Invalid message, including a message whose\n        authentication failed.')
docsBpi2CmTEKAuthPends = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setDescription('The value of this object is the count of times an\n        Authorization Pending (Auth Pend) event occurred in this FSM.')
docsBpi2CmTEKKeyRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedSaid", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in most recent Key Reject\n        message received by the CM. This has value unknown(2) if the\n        last Error-Code value was 0, and none(1) if no Key Reject\n        message has been received since reboot.')
docsBpi2CmTEKKeyRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setDescription('The value of this object is the Display-String in\n        most recent Key Reject message received by the CM. This is a\n        zero length string if no Key Reject message has been received\n        since reboot.')
docsBpi2CmTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("invalidKeySequence", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in most recent TEK Invalid\n        message received by the CM.  This has value unknown(2) if the\n        last Error-Code value was 0, and  none(1) if no TEK Invalid\n        message has been received since reboot.')
docsBpi2CmTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setDescription('The value of this object is the Display-String in\n        most recent TEK Invalid message received by the CM. This is a\n        zero length string if no TEK Invalid message has been received\n        since reboot.')
docsBpi2CmIpMulticastMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapTable.setDescription('This table maps multicast IP addresses to SAIDs.\n        It is intended to map multicast IP addresses associated \n        with SA MAP Request messages.')
docsBpi2CmIpMulticastMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmIpMulticastIndex"))
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapEntry.setDescription('Each entry contains objects describing the mapping of\n        one multicast IP address to one SAID, as well as\n        associated state, message counters, and error information.')
docsBpi2CmIpMulticastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,1000)))
if mibBuilder.loadTexts: docsBpi2CmIpMulticastIndex.setDescription('The index of this row.')
docsBpi2CmIpMulticastAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddressType.setDescription('The type of internet address for\n        docsBpi2CmIpMulticastAddress.')
docsBpi2CmIpMulticastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setDescription('This object represents the IP multicast address\n        to be mapped.')
docsBpi2CmIpMulticastSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setDescription('This object represents the SAID to which the IP\n        multicast address has been mapped.  If no SA Map Reply has\n        been received for the IP address, this object should have the\n        value 0.')
docsBpi2CmIpMulticastSAMapState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("start", 1), ("mapWait", 2), ("mapped", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setDescription('The value of this object is the state of the SA\n        Mapping FSM for this IP.')
docsBpi2CmIpMulticastSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setDescription('The value of this object is the count of times the\n        CM has transmitted an SA Map Request message for this IP.')
docsBpi2CmIpMulticastSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setDescription('The value of this object is the count of times the\n        CM has received an SA Map Reply message for this IP.')
docsBpi2CmIpMulticastSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setDescription('The value of this object is the count of times the\n        CM has received an SA MAP Reject message for this IP.')
docsBpi2CmIpMulticastSAMapRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("noAuthForRequestedDSFlow", 9), ("dsFlowNotMappedToSA", 10),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in the most recent SA Map\n        Reject message sent in response to an SA Map Request for this\n        IP.  It has value unknown(2) if the last Error-Code value\n        was 0, and none(1) if no SA MAP Reject message has been\n        received since reboot.')
docsBpi2CmIpMulticastSAMapRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setDescription('The value of this object is the Display-String in\n        the most recent SA Map Reject message sent in response to an\n        SA Map Request for this IP.  It is a zero length string if\n        no SA Map Reject message has been received since reboot.')
docsBpi2CmDeviceCertTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: docsBpi2CmDeviceCertTable.setDescription('This table describes the Baseline Privacy Plus\n        device certificates for each CM MAC interface.')
docsBpi2CmDeviceCertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmDeviceCertEntry.setDescription('Each entry contains the device certificates of\n        one CM MAC interface. An entry in this table exists for each\n        ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmDeviceCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1, 1, 1), X509Certificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setDescription('The X509 DER-encoded cable modem certificate.\n        Note:  This object can be set only when the value is the null\n        string.  Once the object contains the certificate, its access\n        MUST be read-only.')
docsBpi2CmDeviceManufCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1, 1, 2), X509Certificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setDescription('The X509 DER-encoded manufacturer certificate which\n        signed the cable modem certificate.')
docsBpi2CmCryptoSuiteTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5), )
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteTable.setDescription('This table describes the Baseline Privacy Plus\n        cryptographic suite capabilites for each CM MAC interface.')
docsBpi2CmCryptoSuiteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmCryptoSuiteIndex"))
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteEntry.setDescription('Each entry contains a cryptographic suite pair \n        which this CM MAC supports.')
docsBpi2CmCryptoSuiteIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,1000)))
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteIndex.setDescription('The index for a cryptographic suite row.')
docsBpi2CmCryptoSuiteDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setDescription('The value of this object is the data encryption\n        algorithm for this cryptographic suite capability.')
docsBpi2CmCryptoSuiteDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("none", 0),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setDescription('The value of this object is the data authentication\n        algorithm for this cryptographic suite capability.')
docsBpi2CmtsBaseTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsBaseTable.setDescription('This table describes the basic Baseline Privacy\n        attributes of each CMTS MAC interface.')
docsBpi2CmtsBaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsBaseEntry.setDescription('Each entry contains objects describing attributes of\n        one CMTS MAC interface.  An entry in this table exists for\n        each ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmtsDefaultAuthLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,6048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setDescription('The value of this object is the default lifetime, in\n        seconds, the CMTS assigns to a new authorization key.')
docsBpi2CmtsDefaultTEKLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setDescription('The value of this object is the default lifetime, in\n        seconds, the CMTS assigns to a new Traffic Encryption Key\n        (TEK).')
docsBpi2CmtsDefaultSelfSignedManufCertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setDescription('This object determines the default trust of all (new)\n        self-signed manufacturer certificates obtained after setting\n        the object.')
docsBpi2CmtsCheckCertValidityPeriods = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setDescription("Setting this object to TRUE causes all certificates\n        obtained thereafter to have their validity periods (and their\n        chain's validity periods) checked against the current time of\n        day.  A FALSE setting will cause all certificates obtained\n        thereafter to not have their validity periods (nor their\n        chain's validity periods) checked against the current time of\n        day.")
docsBpi2CmtsAuthentInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setDescription('The value of this object is the count of times the\n        CMTS has received an Authentication Information message from\n        any CM.')
docsBpi2CmtsAuthRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setDescription('The value of this object is the count of times the\n        CMTS has received an Authorization Request message from any\n        CM.')
docsBpi2CmtsAuthReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an Authorization Reply message to any\n        CM.')
docsBpi2CmtsAuthRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an Authorization Reject message to any\n        CM.')
docsBpi2CmtsAuthInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an Authorization Invalid message to any\n        CM.')
docsBpi2CmtsSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setDescription('The value of this object is the count of times the\n        CMTS has received an SA Map Request message from any CM.')
docsBpi2CmtsSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an SA Map Reply message to any CM.')
docsBpi2CmtsSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an SA Map Reject message to any CM.')
docsBpi2CmtsAuthTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsAuthTable.setDescription('This table describes the attributes of each CM\n        authorization association. The CMTS maintains one\n        authorization association with each Baseline Privacy-enabled\n        CM on each CMTS MAC interface.')
docsBpi2CmtsAuthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsAuthEntry.setDescription('Each entry contains objects describing attributes of\n        one authorization association. The CMTS MUST create one entry\n        per CM per MAC interface, based on the receipt of an\n        Authorization Request message, and MUST not delete the entry\n        before the CM authorization permanently expires.')
docsBpi2CmtsAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmMacAddress.setDescription('The value of this object is the physical address of\n        the CM to which the authorization association applies.')
docsBpi2CmtsAuthCmBpiVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1,))).clone(namedValues=NamedValues(("bpi", 0), ("bpiPlus", 1),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmBpiVersion.setDescription('The value of this object is the version of Baseline\n        Privacy for which this CM has registered.')
docsBpi2CmtsAuthCmPublicKey = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(74,74),ValueSizeConstraint(106,106),ValueSizeConstraint(140,140),ValueSizeConstraint(204,204),ValueSizeConstraint(270,270),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setDescription('The value of this object is a DER-encoded\n        RSAPublicKey ASN.1 type string, as defined in the RSA\n        Encryption Standard (PKCS #1) [10], corresponding to the\n        public key of the CM. The 74, 106, 140, 204, and 270 byte key\n        encoding lengths correspond to 512 bit, 768 bit, 1024 bit,\n        1536 bit, and 2048 public moduli respectively. This is a \n        zero-length string if the CMTS does not retain the public\n        key.')
docsBpi2CmtsAuthCmKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setDescription('The value of this object is the most recent\n        authorization key sequence number for this CM.')
docsBpi2CmtsAuthCmExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setDescription('The value of this object is the actual clock time\n        for expiration of the immediate predecessor of the most\n        recent authorization key for this FSM. If this FSM has only\n        one authorization key, then the value is the time of\n        activation of this FSM.\n        Note: For CMs running in BPI mode, implementation of this \n        object is optional and MAY vary.')
docsBpi2CmtsAuthCmExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setDescription('The value of this object is the actual clock time\n        for expiration of the most recent authorization key for this\n        FSM.')
docsBpi2CmtsAuthCmLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,6048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setDescription('The value of this object is the lifetime, in seconds,\n        the CMTS assigns to an authorization key for this CM.')
docsBpi2CmtsAuthCmGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,6047999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmGraceTime.setDescription('The value of this object is the grace time for the\n        authorization key in seconds.  The CM is expected to start\n        trying to get a new authorization key beginning AuthGraceTime\n        seconds before the authorization key actually expires.\n        Note: Tracking this value is optional on certain CMTS\n        implementations.')
docsBpi2CmtsAuthCmReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("noResetRequested", 1), ("invalidateAuth", 2), ("sendAuthInvalid", 3), ("invalidateTeks", 4),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setDescription('Setting this object to invalidateAuth(2) causes the\n        CMTS to invalidate the current CM authorization key(s), but\n        not to transmit an Authorization Invalid message nor to\n        invalidate unicast TEKs.  Setting this object to\n        sendAuthInvalid(3) causes the CMTS to invalidate the current\n        CM authorization key(s), and to transmit an Authorization\n        Invalid message to the CM, but not to invalidate unicast TEKs.\n        Setting this object to invalidateTeks(4) causes the CMTS to\n        invalidate the current CM authorization key(s), to transmit an\n        Authorization Invalid message to the CM, and to invalidate all\n        unicast TEKs associated with this CM authorization. Reading\n        this object returns the most-recently-set value of this\n        object, or returns noResetRequested(1) if the object has not\n        been set since the last CMTS reboot.')
docsBpi2CmtsAuthCmInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setDescription('The value of this object is the count of times the\n        CMTS has received an Authentication Information message from\n        this CM.')
docsBpi2CmtsAuthCmRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setDescription('The value of this object is the count of times the\n        CMTS has received an Authorization Request message from this\n        CM.')
docsBpi2CmtsAuthCmReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an Authorization Reply message to this\n        CM.')
docsBpi2CmtsAuthCmRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an Authorization Reject message to this\n        CM.')
docsBpi2CmtsAuthCmInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an Authorization Invalid message to this\n        CM.')
docsBpi2CmtsAuthRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 11,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unauthorizedSaid", 4), ("permanentAuthorizationFailure", 8), ("timeOfDayNotAcquired", 11),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in most recent Authorization\n        Reject message transmitted to the CM.  This has value\n        unknown(2) if the last Error-Code value was 0, and none(1) if\n        no Authorization Reject message has been transmitted to the\n        CM.')
docsBpi2CmtsAuthRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setDescription('The value of this object is the Display-String in\n        most recent Authorization Reject message transmitted to the\n        CM.  This is a zero length string if no Authorization Reject\n        message has been transmitted to the CM.')
docsBpi2CmtsAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unsolicited", 5), ("invalidKeySequence", 6), ("keyRequestAuthenticationFailure", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in most recent Authorization\n        Invalid message transmitted to the CM.  This has value\n        unknown(2) if the last Error-Code value was 0, and none(1) if\n        no Authorization Invalid message has been transmitted to the\n        CM.')
docsBpi2CmtsAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setDescription('The value of this object is the Display-String in\n        most recent Authorization Invalid message transmitted to the\n        CM.  This is a zero length string if no Authorization Invalid\n        message has been transmitted to the CM.')
docsBpi2CmtsAuthPrimarySAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setDescription('The value of this object is the Primary Security\n        Association identifier.')
docsBpi2CmtsAuthBpkmCmCertValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("unknown", 0), ("validCmChained", 1), ("validCmTrusted", 2), ("invalidCmUntrusted", 3), ("invalidCAUntrusted", 4), ("invalidCmOther", 5), ("invalidCAOther", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setDescription("Contains the reason why a CM's certificate is deemed\n        valid or invalid.\n        Return unknown if the CM is running BPI mode.\n        ValidCmChained means the certificate is valid because\n        it chains to a valid certificate.\n        ValidCmTrusted means the certificate is valid because\n        it has been provisioned (in the docsBpi2CmtsProvisionedCmCert\n        table) to be trusted.\n        InvalidCmUntrusted means the certificate is invalid\n        because it has been provisioned (in the\n        docsBpi2CmtsProvisionedCmCert table) to be untrusted.\n        InvalidCAUntrusted means the certificate is invalid\n        because it chains to an untrusted certificate.\n        InvalidCmOther and InvalidCAOther refer to errors in\n        parsing, validity periods, etc, which are attributable to the\n        cm certificate or its chain respectively; additional \n        information may be found in docsBpi2AuthRejectErrorString for\n        these types of errors.")
docsBpi2CmtsAuthBpkmCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 21), X509Certificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setDescription('The X509 CM Certificate sent as part of a BPKM\n        Authorization Request.\n        Note: The NULL string must be returned if the entire\n        certificate is not retained in the CMTS.')
docsBpi2CmtsTEKTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3), )
if mibBuilder.loadTexts: docsBpi2CmtsTEKTable.setDescription('This table describes the attributes of each \n        Traffic Encryption Key (TEK) association. The CMTS maintains\n        one TEK association per SAID on each CMTS MAC interface.')
docsBpi2CmtsTEKEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsTEKSAId"))
if mibBuilder.loadTexts: docsBpi2CmtsTEKEntry.setDescription('Each entry contains objects describing attributes of\n        one TEK association on a particular CMTS MAC interface. The\n        CMTS MUST create one entry per SAID per MAC interface,\n        based on the receipt of a Key Request message, and MUST not\n        delete the entry before the CM authorization for the SAID\n        permanently expires.')
docsBpi2CmtsTEKSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,16383)))
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setDescription('The value of this object is the DOCSIS Security\n        Association ID (SAID).')
docsBpi2CmtsTEKSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setDescription('The value of this object is the type of security\n        association.  Dynamic does not apply to CMs running in\n        BPI mode.')
docsBpi2CmtsTEKDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setDescription('The value of this object is the data encryption\n        algorithm being utilized.')
docsBpi2CmtsTEKDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("none", 0),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setDescription('The value of this object is the data authentication\n        algorithm being utilized.')
docsBpi2CmtsTEKLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setDescription('The value of this object is the lifetime, in\n        seconds, the CMTS assigns to keys for this TEK association.')
docsBpi2CmtsTEKGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,302399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKGraceTime.setDescription('The value of this object is the grace time for\n        the TEK in seconds.  The CM is expected to start trying to\n        acquire a new TEK beginning TEK GraceTime seconds before\n        the TEK actually expires.\n        Note: The value of this object is vendor specific for\n        multicast TEKs.')
docsBpi2CmtsTEKKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setDescription('The value of this object is the most recent TEK\n        key sequence number for this SAID.')
docsBpi2CmtsTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setDescription('The value of this object is the actual clock time\n        for expiration of the immediate predecessor of the most\n        recent TEK for this FSM. If this FSM has only one TEK, then\n        the value is the time of activation of this FSM.')
docsBpi2CmtsTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setDescription('The value of this object is the actual clock time\n        for expiration of the most recent TEK for this FSM.')
docsBpi2CmtsTEKReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setDescription('Setting this object to TRUE causes the CMTS to\n        invalidate the current active TEK(s) (plural due to key\n        transition periods), and to generate a new TEK for the\n        associated SAID; the CMTS MAY also generate an unsolicited\n        TEK Invalid message, to optimize the TEK synchronization\n        between the CMTS and the CM. Reading this object always\n        returns FALSE.')
docsBpi2CmtsKeyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setDescription('The value of this object is the count of times the\n        CMTS has received a Key Request message.')
docsBpi2CmtsKeyReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setDescription('The value of this object is the count of times the\n        CMTS has transmitted a Key Reply message.')
docsBpi2CmtsKeyRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setDescription('The value of this object is the count of times the\n        CMTS has transmitted a Key Reject message.')
docsBpi2CmtsTEKInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setDescription('The value of this object is the count of times the\n        CMTS has transmitted a TEK Invalid message.')
docsBpi2CmtsKeyRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedSaid", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in the most recent Key Reject\n        message sent in response to a Key Request for this SAID.\n        This has value unknown(2) if the last Error-Code value\n        was 0, and none(1) if no Key Reject message has been received\n        since reboot.')
docsBpi2CmtsKeyRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setDescription('The value of this object is the Display-String in\n        the most recent Key Reject message sent in response to a Key\n        Request for this SAID. This is a zero length string if no\n        Key Reject message has been received since reboot.')
docsBpi2CmtsTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("invalidKeySequence", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in the most recent TEK Invalid\n        message sent in association with this SAID.  This has value\n        unknown(2) if the last Error-Code value was 0, and none(1) if\n        no TEK Invalid message has been received since reboot.')
docsBpi2CmtsTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setDescription('The value of this object is the Display-String in\n        the most recent TEK Invalid message sent in association with\n        this SAID.  This is a zero length string if no TEK Invalid\n        message has been received since reboot.')
docsBpi2CmtsIpMulticastMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapTable.setDescription('This table maps multicast IP addresses to SAIDs.')
docsBpi2CmtsIpMulticastMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapEntry.setDescription('Each entry contains objects describing the mapping of\n        a set of multicast IP address and mask to one SAID, as well as\n        associated message counters and error information.')
docsBpi2CmtsIpMulticastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,10000)))
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastIndex.setDescription('The index of this row.')
docsBpi2CmtsIpMulticastAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddressType.setDescription('The type of internet address for\n        docsBpi2CmtsIpMulticastAddress.')
docsBpi2CmtsIpMulticastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddress.setDescription('This object represents the IP multicast address\n        to be mapped, in conjunction with \n        docsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastMaskType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMaskType.setDescription('The type of internet address for\n        docsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMask.setDescription('This object represents the IP multicast address mask\n        for this row. \n        An IP multicast address matches this row if it is\n        equivalent to the logical AND of \n        docsBpi2CmtsIpMulticastAddr with \n        docsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAId.setDescription('This object represents the multicast SAID to be\n        used in this IP multicast address mapping entry.')
docsBpi2CmtsIpMulticastSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3,))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setDescription('The value of this object is the type of security\n        association.  Dynamic does not apply to CMs running in\n        BPI mode.')
docsBpi2CmtsIpMulticastDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2,))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2),)).clone('des56CbcMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setDescription('The value of this object is the data encryption\n        algorithm being utilized.')
docsBpi2CmtsIpMulticastDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0,))).clone(namedValues=NamedValues(("none", 0),)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setDescription('The value of this object is the data authentication\n        algorithm being utilized.')
docsBpi2CmtsIpMulticastSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setDescription('The value of this object is the count of times the\n        CMTS has received an SA Map Request message for this IP.')
docsBpi2CmtsIpMulticastSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an SA Map Reply message for this IP.')
docsBpi2CmtsIpMulticastSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setDescription('The value of this object is the count of times the\n        CMTS has transmitted an SA Map Reject message for this IP.')
docsBpi2CmtsIpMulticastSAMapRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10,))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("noAuthForRequestedDSFlow", 9), ("dsFlowNotMappedToSA", 10),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setDescription('The value of this object is the enumerated\n        description of the Error-Code in the most recent SA Map\n        Reject message sent in response to a SA Map Request for this\n        IP.  It has value unknown(2) if the last Error-Code value\n        was 0, and none(1) if no SA MAP Reject message has been\n        received since reboot.')
docsBpi2CmtsIpMulticastSAMapRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setDescription('The value of this object is the Display-String in\n        the most recent SA Map Reject message sent in response to an\n        SA Map Request for this IP.  It is a zero length string if\n        no SA Map Reject message has been received since reboot.')
docsBpi2CmtsIpMulticastMapControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapControl.setDescription('This object controls and reflects the IP multicast\n        address mapping entry.  There is no restriction on the ability \n        to change values in this row while the row is active.  \n        Inactive rows need not be timed out.')
docsBpi2CmtsMulticastAuthTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthTable.setDescription('This table describes the multicast SAID\n        authorization for each CM on each CMTS MAC interface.')
docsBpi2CmtsMulticastAuthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsMulticastAuthSAId"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsMulticastAuthCmMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthEntry.setDescription('Each entry contains objects describing the key\n        authorization of one cable modem for one multicast SAID\n        for one CMTS MAC interface.')
docsBpi2CmtsMulticastAuthSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,16383)))
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthSAId.setDescription('This object represents the multicast SAID for\n        authorization.')
docsBpi2CmtsMulticastAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthCmMacAddress.setDescription('This object represents the MAC address of the CM\n        to which the multicast SAID authorization applies.')
docsBpi2CmtsMulticastAuthControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthControl.setDescription('This object controls and reflects the CM\n        authorization for each multicast SAID.  There is no \n        restriction on the ability to change values in this row \n        while the row is active.  Inactive rows need not be\n        timed out.')
docsBpi2CmtsProvisionedCmCertTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTable.setDescription('A table of CM certificate trust entries provisioned\n        to the CMTS.  The trust object for a certificate in this table\n        has an overriding effect on the validity object of a \n        certificate in the authorization table, as long as the\n        entire contents of the two certificates are identical.')
docsBpi2CmtsProvisionedCmCertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1), ).setIndexNames((0, "DOCS-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertEntry.setDescription("An entry in the CMTS' provisioned CM certificate\n        table.")
docsBpi2CmtsProvisionedCmCertMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertMacAddress.setDescription('The index of this row.')
docsBpi2CmtsProvisionedCmCertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2),)).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setDescription('Trust state for the provisioned CM certificate entry.\n        Note: Setting this object need only override the validity of\n        CM certificates sent in future authorization requests;\n        instantaneous effect need not occur.')
docsBpi2CmtsProvisionedCmCertSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setDescription('This object indicates how the certificate reached the\n        CMTS.  Other means it originated from a source not identified\n        above.')
docsBpi2CmtsProvisionedCmCertStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertStatus.setDescription(' Standard RowStatus object except: \n        a) if a row has ever been activated, \n        a set to docsBpi2CmtsProvisionedCmCert need not succeed,\n        b) inactive rows need not be timed out.')
docsBpi2CmtsProvisionedCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 5), X509Certificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setDescription('An X509 DER-encoded certificate authority\n        certificate.\n        Note: The NULL string must be returned, on reads, if the\n        entire certificate is not retained in the CMTS.')
docsBpi2CmtsCACertTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsCACertTable.setDescription('The table of known certificate authority certificates\n        acquired by this device.')
docsBpi2CmtsCACertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1), ).setIndexNames((0, "DOCS-BPI2-MIB", "docsBpi2CmtsCACertIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsCACertEntry.setDescription('A row in the Certificate Authority certificate\n        table.')
docsBpi2CmtsCACertIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,10000)))
if mibBuilder.loadTexts: docsBpi2CmtsCACertIndex.setDescription('The index for this row.')
docsBpi2CmtsCACertSubject = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setDescription("The subject name exactly as it is encoded in the\n        X509 certificate.\n        The organizationName portion of the certificate's subject \n        name must be present.  All other fields are optional.  Any \n        optional field present must be prepended with CR (carriage \n        return) LF (line feed) ASCII characters.\n        Ordering of fields present must conform to:\n        \n        organizationName\n        CR LF\n        countryName\n        CR LF\n        stateOrProvinceName\n        CR LF\n        localityName \n        CR LF\n        organizationalUnitName\n        CR LF\n        organizationalUnitName=<Manufacturing Location>\n        CR LF\n        commonName ")
docsBpi2CmtsCACertIssuer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setDescription("The issuer name exactly as it is encoded in the\n        X509 certificate.\n        The commonName portion of the certificate's issuer \n        name must be present.  All other fields are optional.  Any \n        optional field present must be prepended with CR (carriage \n        return) LF (line feed) ASCII characters.\n        Ordering of fields present must conform to:\n        \n        commonName \n        CR LF\n        countryName\n        CR LF\n        stateOrProvinceName\n        CR LF\n        localityName \n        CR LF\n        organizationName\n        CR LF\n        organizationalUnitName\n        CR LF\n        organizationalUnitName=<Manufacturing Location>")
docsBpi2CmtsCACertSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setDescription("This CA certificate's serial number represented as\n        an octet string.")
docsBpi2CmtsCACertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4,))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2), ("chained", 3), ("root", 4),)).clone('chained')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setDescription('This object controls the trust status of this\n        certificate.  Root certificates must be given root trust;\n        manufacturer certificates must not be given root trust.\n        Trust on root certificates must not change.\n        Note: Setting this object need only affect the validity of\n        CM certificates sent in future authorization requests;\n        instantaneous effect need not occur.')
docsBpi2CmtsCACertSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4), ("authentInfo", 5), ("compiledIntoCode", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setDescription('This object indicates how the certificate reached\n        the CMTS.  Other means it originated from a source not\n        identified above.')
docsBpi2CmtsCACertStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsCACertStatus.setDescription(' Standard RowStatus objects except:\n        a) if a row has ever been activated,\n        a set to docsBpi2CmtsCACert need not succeed,\n        b) inactive rows need not be timed out,\n        c) if a row has ever been activated, a destroy setting need \n        not succeed.')
docsBpi2CmtsCACert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 8), X509Certificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setDescription('An X509 DER-encoded certificate authority\n        certificate.\n        To help identify certificates, either this object or \n        docsBpi2CmtsCACertThumbprint must be returned by a CMTS for\n        self-signed CA certificates.\n        \n        Note: The NULL string must be returned, on reads, if the\n        entire certificate is not retained in the CMTS.')
docsBpi2CmtsCACertThumbprint = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20,20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setDescription('The SHA-1 hash of a CA certificate.  \n        To help identify certificates, either this object or \n        docsBpi2CmtsCACert must be returned by a CMTS for\n        self-signed CA certificates.\n        \n        Note: The NULL string must be returned if this object is\n        not supported by the CMTS.')
docsBpi2CodeDownloadStatusCode = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,))).clone(namedValues=NamedValues(("configFileCvcVerified", 1), ("configFileCvcRejected", 2), ("snmpCvcVerified", 3), ("snmpCvcRejected", 4), ("codeFileVerified", 5), ("codeFileRejected", 6), ("other", 7),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setDescription('The value indicates the result of the latest config\n        file CVC verification, SNMP CVC verification, or code file\n        verification.')
docsBpi2CodeDownloadStatusString = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setDescription('The value of this object indicates the additional\n        information to the status code.  The value will include\n        the error code and error description which will be defined\n        separately.')
docsBpi2CodeMfgOrgName = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setDescription("The value of this object is the device manufacturer's\n        organizationName.")
docsBpi2CodeMfgCodeAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setDescription("The value of this object is the device manufacturer's\n        current codeAccessStart value referenced to Greenwich Mean\n        Time (GMT).")
docsBpi2CodeMfgCvcAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setDescription("The value of this object is the device manufacturer's\n        current cvcAccessStart value referenced to Greenwich Mean\n        Time (GMT).")
docsBpi2CodeCoSignerOrgName = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setDescription("The value of this object is the Co-Signer's\n        organizationName.  The value is a zero length string if \n        the co-signer is not specified.")
docsBpi2CodeCoSignerCodeAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setDescription("The value of this object is the Co-Signer's current\n        codeAccessStart value referenced to Greenwich Mean\n        Time (GMT).  If docsBpi2CodeCoSignerOrgName is a zero \n        length string, the value of this object is meaningless.")
docsBpi2CodeCoSignerCvcAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setDescription("The value of this object is the Co-Signer's current\n        cvcAccessStart value referenced to Greenwich Mean\n        Time (GMT).  If docsBpi2CodeCoSignerOrgName is a zero \n        length string, the value of this object is meaningless.")
docsBpi2CodeCvcUpdate = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 9), X509Certificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setDescription('Setting a CVC to this object triggers the device\n        to verify the CVC and update the cvcAccessStart value.\n        If the device is not enabled to upgrade codefiles, or\n        the CVC verification fails, the CVC will be rejected.\n        Reading this object always returns the null string.')
docsBpi2CmGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 1))
docsBpi2CmtsGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 2))
docsBpi2CodeDownloadGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 3))
docsBpi2ObsoleteObjectsGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 4))
docsBpi2BasicCompliance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 1, 1))
mibBuilder.exportSymbols("DOCS-BPI2-MIB", docsBpi2Conformance=docsBpi2Conformance, docsBpi2CmRekeyWaitTimeout=docsBpi2CmRekeyWaitTimeout, docsBpi2CmtsSAMapRejects=docsBpi2CmtsSAMapRejects, docsBpi2CmPublicKey=docsBpi2CmPublicKey, docsBpi2CmAuthInvalidErrorCode=docsBpi2CmAuthInvalidErrorCode, docsBpi2CmTEKKeyReplies=docsBpi2CmTEKKeyReplies, docsBpi2CmSAMapMaxRetries=docsBpi2CmSAMapMaxRetries, docsBpi2CmtsTEKGraceTime=docsBpi2CmtsTEKGraceTime, docsBpi2CmAuthInvalids=docsBpi2CmAuthInvalids, docsBpi2CmReauthWaitTimeout=docsBpi2CmReauthWaitTimeout, docsBpi2CmtsCACertEntry=docsBpi2CmtsCACertEntry, docsBpi2CmAuthRejectWaitTimeout=docsBpi2CmAuthRejectWaitTimeout, docsBpi2CmtsCACertIndex=docsBpi2CmtsCACertIndex, docsBpi2CmtsMulticastObjects=docsBpi2CmtsMulticastObjects, docsBpi2CmIpMulticastSAMapReplies=docsBpi2CmIpMulticastSAMapReplies, docsBpi2CmtsIpMulticastMapTable=docsBpi2CmtsIpMulticastMapTable, docsBpi2CodeMfgCvcAccessStart=docsBpi2CodeMfgCvcAccessStart, docsBpi2CmtsDefaultTEKLifetime=docsBpi2CmtsDefaultTEKLifetime, docsBpi2Compliances=docsBpi2Compliances, docsBpi2CmtsCACert=docsBpi2CmtsCACert, docsBpi2CmAuthWaitTimeout=docsBpi2CmAuthWaitTimeout, docsBpi2CmTEKEntry=docsBpi2CmTEKEntry, docsBpi2CmtsAuthCmLifetime=docsBpi2CmtsAuthCmLifetime, docsBpi2CmtsIpMulticastSAType=docsBpi2CmtsIpMulticastSAType, docsBpi2CmtsTEKLifetime=docsBpi2CmtsTEKLifetime, docsBpi2CodeMfgOrgName=docsBpi2CodeMfgOrgName, docsBpi2CmAuthState=docsBpi2CmAuthState, docsBpi2CmIpMulticastSAMapState=docsBpi2CmIpMulticastSAMapState, docsBpi2CmtsAuthCmRequests=docsBpi2CmtsAuthCmRequests, docsBpi2CmTEKExpiresOld=docsBpi2CmTEKExpiresOld, docsBpi2Notification=docsBpi2Notification, docsBpi2CmtsCACertSubject=docsBpi2CmtsCACertSubject, docsBpi2CmtsSAMapRequests=docsBpi2CmtsSAMapRequests, docsBpi2CmtsMulticastAuthCmMacAddress=docsBpi2CmtsMulticastAuthCmMacAddress, docsBpi2CmtsTEKDataEncryptAlg=docsBpi2CmtsTEKDataEncryptAlg, docsBpi2CmTEKSAType=docsBpi2CmTEKSAType, docsBpi2CmCryptoSuiteDataAuthentAlg=docsBpi2CmCryptoSuiteDataAuthentAlg, docsBpi2CmtsIpMulticastMapControl=docsBpi2CmtsIpMulticastMapControl, docsBpi2CmCryptoSuiteDataEncryptAlg=docsBpi2CmCryptoSuiteDataEncryptAlg, docsBpi2CmTEKGraceTime=docsBpi2CmTEKGraceTime, docsBpi2CmtsAuthRejects=docsBpi2CmtsAuthRejects, docsBpi2CmtsAuthCmPublicKey=docsBpi2CmtsAuthCmPublicKey, docsBpi2CmTEKDataAuthentAlg=docsBpi2CmTEKDataAuthentAlg, docsBpi2CmtsTEKInvalidErrorCode=docsBpi2CmtsTEKInvalidErrorCode, docsBpi2CmtsCACertIssuer=docsBpi2CmtsCACertIssuer, docsBpi2CodeDownloadStatusString=docsBpi2CodeDownloadStatusString, docsBpi2CmtsAuthCmExpiresNew=docsBpi2CmtsAuthCmExpiresNew, docsBpi2CmIpMulticastSAMapRejectErrorCode=docsBpi2CmIpMulticastSAMapRejectErrorCode, docsBpi2CmTEKSAId=docsBpi2CmTEKSAId, docsBpi2CmIpMulticastSAMapRejects=docsBpi2CmIpMulticastSAMapRejects, docsBpi2CmtsAuthReplies=docsBpi2CmtsAuthReplies, docsBpi2CmtsIpMulticastDataEncryptAlg=docsBpi2CmtsIpMulticastDataEncryptAlg, docsBpi2CmtsProvisionedCmCertSource=docsBpi2CmtsProvisionedCmCertSource, docsBpi2CmGroup=docsBpi2CmGroup, docsBpi2CmTEKKeyRejectErrorCode=docsBpi2CmTEKKeyRejectErrorCode, docsBpi2CmtsIpMulticastMaskType=docsBpi2CmtsIpMulticastMaskType, docsBpi2CmtsTEKEntry=docsBpi2CmtsTEKEntry, docsBpi2CmtsTEKExpiresNew=docsBpi2CmtsTEKExpiresNew, docsBpi2CmtsAuthCmInvalids=docsBpi2CmtsAuthCmInvalids, docsBpi2CmAuthRejects=docsBpi2CmAuthRejects, docsBpi2CmtsTEKKeySequenceNumber=docsBpi2CmtsTEKKeySequenceNumber, docsBpi2CmAuthRequests=docsBpi2CmAuthRequests, docsBpi2CmtsTEKSAType=docsBpi2CmtsTEKSAType, docsBpi2CmtsAuthRequests=docsBpi2CmtsAuthRequests, docsBpi2CmtsAuthBpkmCmCertValid=docsBpi2CmtsAuthBpkmCmCertValid, docsBpi2CmtsIpMulticastSAMapRequests=docsBpi2CmtsIpMulticastSAMapRequests, docsBpi2CmAuthentInfos=docsBpi2CmAuthentInfos, docsBpi2CmtsIpMulticastSAId=docsBpi2CmtsIpMulticastSAId, docsBpi2CmCertObjects=docsBpi2CmCertObjects, docsBpi2CmIpMulticastIndex=docsBpi2CmIpMulticastIndex, docsBpi2CodeCoSignerCodeAccessStart=docsBpi2CodeCoSignerCodeAccessStart, docsBpi2CmDeviceManufCert=docsBpi2CmDeviceManufCert, docsBpi2CmtsIpMulticastSAMapReplies=docsBpi2CmtsIpMulticastSAMapReplies, docsBpi2CmTEKAuthPends=docsBpi2CmTEKAuthPends, docsBpi2CmtsProvisionedCmCert=docsBpi2CmtsProvisionedCmCert, docsBpi2CmtsProvisionedCmCertStatus=docsBpi2CmtsProvisionedCmCertStatus, docsBpi2CmtsAuthRejectErrorString=docsBpi2CmtsAuthRejectErrorString, docsBpi2CmTEKInvalidErrorCode=docsBpi2CmTEKInvalidErrorCode, docsBpi2CmMulticastObjects=docsBpi2CmMulticastObjects, docsBpi2CmtsAuthCmReset=docsBpi2CmtsAuthCmReset, docsBpi2CmtsAuthInvalidErrorCode=docsBpi2CmtsAuthInvalidErrorCode, docsBpi2CmAuthExpiresNew=docsBpi2CmAuthExpiresNew, docsBpi2CmtsMulticastAuthSAId=docsBpi2CmtsMulticastAuthSAId, docsBpi2CmtsIpMulticastAddress=docsBpi2CmtsIpMulticastAddress, docsBpi2CmtsAuthCmKeySequenceNumber=docsBpi2CmtsAuthCmKeySequenceNumber, docsBpi2CmtsMulticastAuthEntry=docsBpi2CmtsMulticastAuthEntry, docsBpi2CmtsCACertSerialNumber=docsBpi2CmtsCACertSerialNumber, docsBpi2CmtsAuthInvalidErrorString=docsBpi2CmtsAuthInvalidErrorString, docsBpi2CmDeviceCmCert=docsBpi2CmDeviceCmCert, docsBpi2CmAuthExpiresOld=docsBpi2CmAuthExpiresOld, docsBpi2CmtsTEKTable=docsBpi2CmtsTEKTable, docsBpi2CmTEKExpiresNew=docsBpi2CmTEKExpiresNew, docsBpi2CmtsAuthCmBpiVersion=docsBpi2CmtsAuthCmBpiVersion, docsBpi2CmtsAuthPrimarySAId=docsBpi2CmtsAuthPrimarySAId, docsBpi2CmBaseTable=docsBpi2CmBaseTable, docsBpi2CmtsIpMulticastAddressType=docsBpi2CmtsIpMulticastAddressType, docsBpi2CmtsCACertSource=docsBpi2CmtsCACertSource, docsBpi2CodeDownloadStatusCode=docsBpi2CodeDownloadStatusCode, docsBpi2CmtsTEKSAId=docsBpi2CmtsTEKSAId, docsBpi2CmAuthKeySequenceNumber=docsBpi2CmAuthKeySequenceNumber, docsBpi2CmIpMulticastMapTable=docsBpi2CmIpMulticastMapTable, docsBpi2CmtsProvisionedCmCertTrust=docsBpi2CmtsProvisionedCmCertTrust, docsBpi2CmtsMulticastAuthControl=docsBpi2CmtsMulticastAuthControl, docsBpi2CmtsAuthInvalids=docsBpi2CmtsAuthInvalids, docsBpi2CmtsObjects=docsBpi2CmtsObjects, docsBpi2CmtsBaseEntry=docsBpi2CmtsBaseEntry, docsBpi2Groups=docsBpi2Groups, docsBpi2CodeCoSignerOrgName=docsBpi2CodeCoSignerOrgName, docsBpi2CmtsKeyRejects=docsBpi2CmtsKeyRejects, docsBpi2CmtsDefaultSelfSignedManufCertTrust=docsBpi2CmtsDefaultSelfSignedManufCertTrust, docsBpi2CmIpMulticastMapEntry=docsBpi2CmIpMulticastMapEntry, docsBpi2CodeCoSignerCvcAccessStart=docsBpi2CodeCoSignerCvcAccessStart, docsBpi2CmIpMulticastSAId=docsBpi2CmIpMulticastSAId, docsBpi2CmtsCACertTable=docsBpi2CmtsCACertTable, docsBpi2CmtsAuthCmMacAddress=docsBpi2CmtsAuthCmMacAddress, docsBpi2CmtsProvisionedCmCertEntry=docsBpi2CmtsProvisionedCmCertEntry, docsBpi2CodeDownloadGroup=docsBpi2CodeDownloadGroup, docsBpi2CmtsKeyRequests=docsBpi2CmtsKeyRequests, docsBpi2CmTEKKeyRequests=docsBpi2CmTEKKeyRequests, docsBpi2CmTEKState=docsBpi2CmTEKState, docsBpi2ObsoleteObjectsGroup=docsBpi2ObsoleteObjectsGroup, docsBpi2CmtsAuthCmInfos=docsBpi2CmtsAuthCmInfos, docsBpi2CmtsTEKDataAuthentAlg=docsBpi2CmtsTEKDataAuthentAlg, docsBpi2CmtsAuthCmExpiresOld=docsBpi2CmtsAuthCmExpiresOld, docsBpi2CmAuthGraceTime=docsBpi2CmAuthGraceTime, docsBpi2CmSAMapWaitTimeout=docsBpi2CmSAMapWaitTimeout, docsBpi2CmAuthInvalidErrorString=docsBpi2CmAuthInvalidErrorString, docsBpi2CmOpWaitTimeout=docsBpi2CmOpWaitTimeout, docsBpi2CmtsIpMulticastSAMapRejects=docsBpi2CmtsIpMulticastSAMapRejects, docsBpi2CmTEKInvalids=docsBpi2CmTEKInvalids, docsBpi2CmtsMulticastAuthTable=docsBpi2CmtsMulticastAuthTable, docsBpi2CmTEKKeySequenceNumber=docsBpi2CmTEKKeySequenceNumber, docsBpi2CmtsKeyReplies=docsBpi2CmtsKeyReplies, docsBpi2CmtsAuthCmGraceTime=docsBpi2CmtsAuthCmGraceTime, docsBpi2CmTEKTable=docsBpi2CmTEKTable, docsBpi2CmtsAuthCmRejects=docsBpi2CmtsAuthCmRejects, docsBpi2CmtsDefaultAuthLifetime=docsBpi2CmtsDefaultAuthLifetime, docsBpi2CmDeviceCertEntry=docsBpi2CmDeviceCertEntry, docsBpi2CmtsTEKReset=docsBpi2CmtsTEKReset, docsBpi2CmtsTEKInvalidErrorString=docsBpi2CmtsTEKInvalidErrorString, docsBpi2CmtsAuthCmReplies=docsBpi2CmtsAuthCmReplies, docsBpi2CmtsIpMulticastSAMapRejectErrorCode=docsBpi2CmtsIpMulticastSAMapRejectErrorCode, docsBpi2CmAuthRejectErrorCode=docsBpi2CmAuthRejectErrorCode, docsBpi2CmtsSAMapReplies=docsBpi2CmtsSAMapReplies, docsBpi2MIB=docsBpi2MIB, docsBpi2CmtsProvisionedCmCertTable=docsBpi2CmtsProvisionedCmCertTable, docsBpi2CmtsIpMulticastSAMapRejectErrorString=docsBpi2CmtsIpMulticastSAMapRejectErrorString, docsBpi2MIBObjects=docsBpi2MIBObjects, docsBpi2CodeDownloadControl=docsBpi2CodeDownloadControl, docsBpi2CmIpMulticastSAMapRejectErrorString=docsBpi2CmIpMulticastSAMapRejectErrorString, docsBpi2CmtsKeyRejectErrorCode=docsBpi2CmtsKeyRejectErrorCode, docsBpi2CodeCvcUpdate=docsBpi2CodeCvcUpdate, docsBpi2CmtsKeyRejectErrorString=docsBpi2CmtsKeyRejectErrorString, docsBpi2CmtsTEKInvalids=docsBpi2CmtsTEKInvalids, docsBpi2CmtsProvisionedCmCertMacAddress=docsBpi2CmtsProvisionedCmCertMacAddress, docsBpi2CmtsAuthRejectErrorCode=docsBpi2CmtsAuthRejectErrorCode, X509Certificate=X509Certificate, docsBpi2CmtsCertObjects=docsBpi2CmtsCertObjects, docsBpi2CmBaseEntry=docsBpi2CmBaseEntry, docsBpi2CmIpMulticastSAMapRequests=docsBpi2CmIpMulticastSAMapRequests, docsBpi2CmTEKKeyRejects=docsBpi2CmTEKKeyRejects, docsBpi2CmDeviceCertTable=docsBpi2CmDeviceCertTable, docsBpi2CmtsIpMulticastMapEntry=docsBpi2CmtsIpMulticastMapEntry, docsBpi2CmCryptoSuiteEntry=docsBpi2CmCryptoSuiteEntry, docsBpi2CmtsCheckCertValidityPeriods=docsBpi2CmtsCheckCertValidityPeriods, docsBpi2CmtsAuthEntry=docsBpi2CmtsAuthEntry, docsBpi2CmTEKDataEncryptAlg=docsBpi2CmTEKDataEncryptAlg, docsBpi2CmtsIpMulticastMask=docsBpi2CmtsIpMulticastMask, docsBpi2CmtsCACertStatus=docsBpi2CmtsCACertStatus, docsBpi2CmCryptoSuiteTable=docsBpi2CmCryptoSuiteTable, docsBpi2CmAuthRejectErrorString=docsBpi2CmAuthRejectErrorString, docsBpi2CodeMfgCodeAccessStart=docsBpi2CodeMfgCodeAccessStart, docsBpi2CmPrivacyEnable=docsBpi2CmPrivacyEnable, docsBpi2CmCryptoSuiteIndex=docsBpi2CmCryptoSuiteIndex, docsBpi2CmtsTEKExpiresOld=docsBpi2CmtsTEKExpiresOld, docsBpi2CmtsIpMulticastIndex=docsBpi2CmtsIpMulticastIndex, docsBpi2CmtsAuthentInfos=docsBpi2CmtsAuthentInfos, docsBpi2CmtsCACertTrust=docsBpi2CmtsCACertTrust, docsBpi2CmIpMulticastAddress=docsBpi2CmIpMulticastAddress, docsBpi2CmtsAuthTable=docsBpi2CmtsAuthTable, docsBpi2BasicCompliance=docsBpi2BasicCompliance, docsBpi2CmTEKInvalidErrorString=docsBpi2CmTEKInvalidErrorString, docsBpi2CmIpMulticastAddressType=docsBpi2CmIpMulticastAddressType, docsBpi2CmObjects=docsBpi2CmObjects, docsBpi2CmAuthReplies=docsBpi2CmAuthReplies, docsBpi2CmTEKKeyRejectErrorString=docsBpi2CmTEKKeyRejectErrorString, docsBpi2CmtsBaseTable=docsBpi2CmtsBaseTable, docsBpi2CmtsAuthBpkmCmCert=docsBpi2CmtsAuthBpkmCmCert, docsBpi2CmtsIpMulticastDataAuthentAlg=docsBpi2CmtsIpMulticastDataAuthentAlg, docsBpi2CmtsCACertThumbprint=docsBpi2CmtsCACertThumbprint, docsBpi2CmtsGroup=docsBpi2CmtsGroup, docsBpi2CmAuthReset=docsBpi2CmAuthReset)
