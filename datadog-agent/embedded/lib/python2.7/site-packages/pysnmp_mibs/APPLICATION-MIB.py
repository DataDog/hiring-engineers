#
# PySNMP MIB module APPLICATION-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/APPLICATION-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:05:15 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ObjectGroup, ModuleCompliance, NotificationGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
( MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, zeroDotZero, iso, Integer32, TimeTicks, Unsigned32, mib_2, ObjectIdentity, NotificationType, MibIdentifier, Bits, Counter32, IpAddress, Gauge32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "zeroDotZero", "iso", "Integer32", "TimeTicks", "Unsigned32", "mib-2", "ObjectIdentity", "NotificationType", "MibIdentifier", "Bits", "Counter32", "IpAddress", "Gauge32")
( TextualConvention, TruthValue, TestAndIncr, DisplayString, DateAndTime, TimeStamp, TDomain, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TestAndIncr", "DisplayString", "DateAndTime", "TimeStamp", "TDomain")
( LongUtf8String, sysApplElmtRunIndex, ) = mibBuilder.importSymbols("SYSAPPL-MIB", "LongUtf8String", "sysApplElmtRunIndex")
applicationMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 62))
if mibBuilder.loadTexts: applicationMib.setLastUpdated('9811171815Z')
if mibBuilder.loadTexts: applicationMib.setOrganization('Application MIB Working Group')
if mibBuilder.loadTexts: applicationMib.setContactInfo('http://www.ietf.org/html.charters/applmib-charter.html\n\n           Randy Presuhn\n           BMC Software, Inc.\n           965 Stewart Drive\n           Sunnyvale, CA 94086\n           USA\n\n           Telephone: +1 408 616-3100\n           Facsimile: +1 408 616-3101\n           EMail: randy_presuhn@bmc.com\n          ')
if mibBuilder.loadTexts: applicationMib.setDescription('This MIB defines objects representing generic aspects of\n           applications that are of interest to management but typically\n           require instrumentation within managed application elements.\n          ')
applicationMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 1))
applicationMibConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 2))
applServiceGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 1, 1))
applChannelGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 1, 2))
applPastChannelGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 1, 3))
applElmtRunControlGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 1, 4))
class Unsigned64TC(Counter64, TextualConvention):
    pass

class ApplTAddress(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)

applSrvNameToSrvInstTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 1, 1), )
if mibBuilder.loadTexts: applSrvNameToSrvInstTable.setDescription('The service name to service instance table uses\n               service name as its primary key, and service instance\n               identifier as its secondary key.  It facilitates the\n               identification and lookup of the instances of a given\n               service in a system.')
applSrvNameToSrvInstEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 1, 1, 1), ).setIndexNames((0, "APPLICATION-MIB", "applSrvName"), (0, "APPLICATION-MIB", "applSrvIndex"))
if mibBuilder.loadTexts: applSrvNameToSrvInstEntry.setDescription('An applSrvNameToSrvInstEntry identifies an instance of\n               a given service.  The allocation and reservation\n               of unique values for applSrvIndex is an administrative\n               issue.\n\n               An applSrvNameToSrvInstEntry exists for the lifetime of\n               that instance of that service; the index values may not\n               change during that lifetime.  ')
applSrvInstQual = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applSrvInstQual.setDescription('The value of applSrcInstQual provides additional\n               information about this particular instance of this\n               service.\n\n               Although not used for indexing purposes, the value of\n               this attribute should be sufficiently unique to be\n               helpful to an administrator in distinguishing among\n               service instances.  ')
applSrvInstToSrvNameTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 1, 2), )
if mibBuilder.loadTexts: applSrvInstToSrvNameTable.setDescription('The service instance to service name table uses\n               service instance identifier as its primary key, and\n               service name as its secondary key.  Given a service\n               instance identifier, it facilitates the lookup of the\n               name of the service being provided.')
applSrvInstToSrvNameEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 1, 2, 1), ).setIndexNames((0, "APPLICATION-MIB", "applSrvIndex"), (0, "APPLICATION-MIB", "applSrvName"))
if mibBuilder.loadTexts: applSrvInstToSrvNameEntry.setDescription('An applSrvInstToSrvNameEntry maps a service instance\n               identifier back to a service name.')
applSrvName = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 1, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applSrvName.setDescription('The human-readable name of a service.  Where\n               appropriate, as in the case where a service can be\n               identified in terms of a single protocol, the strings\n               should be established names such as those assigned by\n               IANA and found in STD 2 [13], or defined by some other\n               authority.  In some cases private conventions apply\n               and the string should in these cases be consistent\n               with these non-standard conventions.   An applicability\n               statement may specify the service name(s) to be used.\n              ')
applSrvInstToRunApplElmtTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 1, 3), )
if mibBuilder.loadTexts: applSrvInstToRunApplElmtTable.setDescription('The service instance to running application element\n               table uses the service instance identifier as its primary\n               key, and the running application element index as its\n               secondary key.  This facilitates the identification\n               of the set of running application elements providing a\n               given instance of a service.')
applSrvInstToRunApplElmtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 1, 3, 1), ).setIndexNames((0, "APPLICATION-MIB", "applSrvIndex"), (0, "SYSAPPL-MIB", "sysApplElmtRunIndex"))
if mibBuilder.loadTexts: applSrvInstToRunApplElmtEntry.setDescription('An applSrvInstToRunApplElmtEntry identifies a running\n               application element providing an instance of a service.\n               Note that there may be multiple running application\n               elements involved in the provision of an instance of\n               a service.')
applSrvIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applSrvIndex.setDescription('An applSrvIndex is the system-unique identifier of\n                an instance of a service.  The value is unique not only\n                across all instances of a given service, but also across\n                all services in a system.\n\n                Re-use of values for this index should be avoided.\n                No two service instances in a given system shall\n                concurrently have the same value for this index.\n\n                The value zero is excluded from the set of permitted\n                values for this index.  This allows other tables to\n                potentially represent things which cannot be associated\n                with a specific service instance.\n               ')
applRunApplElmtToSrvInstTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 1, 4), )
if mibBuilder.loadTexts: applRunApplElmtToSrvInstTable.setDescription('The running application element to service instance\n               table uses the running application element index as\n               its primary key and the service instance identifier as\n               its secondary key.  It identifies the set of services\n               provided by a given running application element.')
applRunApplElmtToSrvInstEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 1, 4, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplElmtRunIndex"), (0, "APPLICATION-MIB", "applSrvInstance"))
if mibBuilder.loadTexts: applRunApplElmtToSrvInstEntry.setDescription('An applRunApplElmtToSrvInstEntry serves to identify an\n               instance of a service being provided by a given running\n               application element.  Note that a particular running\n               application element may provide multiple services.')
applSrvInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applSrvInstance.setDescription('An applSrvInstance is the system-unique identifier of an\n               instance of a service.  The value is unique not only\n               across all instances of a given service, but also across\n               all services.\n\n               Re-use of values for this index should be avoided.\n               No two service instances in a given system shall\n               concurrently have the same value for this index.\n               The value zero is excluded from the set of permitted\n               values for this index.  This allows other tables to\n               potentially represent things which cannot be associated\n               with a specific service instance.\n\n               This attribute is semantically identical to\n               applSrvIndex.')
applOpenChannelTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 2, 1), )
if mibBuilder.loadTexts: applOpenChannelTable.setDescription('The applOpenChannelTable reports information on open\n               channels for running application elements\n               and for service instances.  This table is\n               indexed by applElmtOrSvc, applElmtOrSvcId, and\n               applOpenChannelIndex. This effectively groups all\n               entries for a given running application element\n               or service instance together.  ApplChannelIndex uniquely\n               identifies an open channel (and, consequently, a file\n               or connection) within the context of a particular\n               running application element or service instance.\n\n               Some of the information in this table is available\n               through both sixty-four and thirty-two bit counters.\n               The sixty-four bit counters are not accessible in\n               protocols that do not support this data type.')
applOpenChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applOpenChannelIndex"))
if mibBuilder.loadTexts: applOpenChannelEntry.setDescription('An applOpenChannelEntry indicates that a channel has been\n               opened by this running application element or service\n               instance and is still open.  Note that if a file has been\n               opened multiple times, even by the same process, it will\n               have multiple channel entries.')
applElmtOrSvc = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("service", 1), ("element", 2),)))
if mibBuilder.loadTexts: applElmtOrSvc.setDescription('The applElmtOrSvc attribute serves as an index for tables\n               that can hold information both for individual running\n               application elements as well as for service instances.\n\n               If the value is service(1), the row contains information\n               gathered at the level of a service.\n\n               If the value is element(2), the row contains information\n               for an individual running application element.')
applElmtOrSvcId = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: applElmtOrSvcId.setDescription("The applElmtOrSvcId attribute is used as an index in\n               conjunction with the applElmtOrSvc attribute.\n\n               When the value of applElmtOrSvc is service(1), this\n               attribute's value corresponds to that of applSrvIndex,\n               when the value of applElmtOrSvc is element(2), this\n               attribute's value corresponds to sysApplElmtRunIndex.")
applOpenChannelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: applOpenChannelIndex.setDescription("This attribute serves to uniquely identify this open\n               connection in the context of the running application\n               element or service instance.  Where suitable, the\n               application's native descriptor number should be used.")
applOpenChannelOpenTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelOpenTime.setDescription('This attribute records the value of sysUpTime.0\n               when this channel was opened and this entry was added to\n               this table.  This attribute serves as a discontinuity\n               indicator for the counter attributes in this entry\n               and for any corresponding entries in the\n               applOpenConnectionTable, applOpenFileTable, and the\n               applTransactionStreamTable.')
applOpenChannelReadRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 5), Counter64()).setUnits('read requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelReadRequests.setDescription('This attribute reports the number of read requests\n               for this channel.  All read requests for this channel\n               by this entity, regardless of completion status, are\n               included in this count.\n\n               Read requests are counted in terms of system calls,\n               rather than API calls.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelReadRequestsLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 6), Counter32()).setUnits('read requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelReadRequestsLow.setDescription('This attribute reports the low thirty-two bits of\n               applOpenChannelReadRequests.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelReadFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 7), Counter32()).setUnits('failed read requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelReadFailures.setDescription('This attribute reports the number of failed read\n               requests.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelBytesRead = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 8), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelBytesRead.setDescription('This attribute reports the number of bytes read from\n               this channel.  Only bytes successfully read are included\n               in this count.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelBytesReadLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelBytesReadLow.setDescription('This attribute corresponds to the low thirty-two bits\n               of applOpenChannelBytesRead.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelLastReadTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 10), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelLastReadTime.setDescription("This attribute reports the time of the most recent read\n               request made by this entity, regardless of completion\n               status, for this open channel.\n\n               If no read requests have been made the value of this\n               attribute shall be '0000000000000000'H ")
applOpenChannelWriteRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 11), Counter64()).setUnits('write requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelWriteRequests.setDescription('This attribute reports the number of write requests for\n               this channel made by this entity.  All write requests\n               for this channel, regardless of completion status, are\n               included in this count.\n\n               Write requests are counted in terms of system calls,\n               rather than API calls.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelWriteRequestsLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 12), Counter32()).setUnits('write requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelWriteRequestsLow.setDescription('This attribute corresponds to the low thirty-two bits\n               of applOpenChannelWriteRequests.\n\n               Discontinuities in this counter can be detected\n               by monitoring the applOpenChannelOpenTime value for\n               this entry.')
applOpenChannelWriteFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 13), Counter32()).setUnits('failed write requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelWriteFailures.setDescription('This attribute reports the number of failed write\n               requests.\n\n               Discontinuities in this counter can be detected\n               by monitoring the applOpenChannelOpenTime value for\n               this entry.')
applOpenChannelBytesWritten = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelBytesWritten.setDescription('This attribute reports the number of bytes written to\n               this channel.  Only bytes successfully written (without\n               errors reported by the system to the API in use by the\n               application) are included in this count.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelBytesWrittenLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 15), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelBytesWrittenLow.setDescription('This attribute corresponds to the low thirty-two bits\n               of applOpenChannelBytesWritten.\n\n               Discontinuities in this counter can be detected by\n               monitoring the applOpenChannelOpenTime value for this\n               entry.')
applOpenChannelLastWriteTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 1, 1, 16), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenChannelLastWriteTime.setDescription("This attribute reports the time of the most recent write\n               request made by this running application element or\n               service instance, regardless of completion status, for\n               this open channel.\n               If no write requests have been made, the value\n               of this attribute shall be '0000000000000000'H ")
applOpenFileTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 2, 2), )
if mibBuilder.loadTexts: applOpenFileTable.setDescription('The applOpenFileTable reports information on open files\n               for service instances or application elements.  This\n               table is indexed by applElmtOrSvc and applElmtOrSvcId,\n               effectively grouping all entries for a given running\n               service instance or application element together, and\n               by applOpenChannelIndex, uniquely identifying an open\n               channel (and, consequently, a file) within the context\n               of a particular service instance or application element.\n\n               Elements in this table correspond to elements in the\n               applOpenChannelTable that represent files.  For rows in\n               the applOpenChannelTable that do not represent files,\n               corresponding rows in this table will not exist.')
applOpenFileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 2, 2, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applOpenChannelIndex"))
if mibBuilder.loadTexts: applOpenFileEntry.setDescription('An applOpenFileEntry indicates that a file has been\n               opened by this running application element and is\n               still open.  Note that if a file has been opened\n               multiple times, even by the same process, it will have\n               multiple entries.')
applOpenFileName = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 2, 1, 1), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenFileName.setDescription("This attribute reports the name of this open file.\n              Wherever practical, a fully qualified path name should\n              be reported.\n\n              The values 'stdin', 'stdout', and 'stderr' are reserved\n              in accordance with common usage when the fully qualified\n              path name cannot be determined.")
applOpenFileSizeHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 2, 1, 2), Unsigned32()).setUnits('2^32 byte blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenFileSizeHigh.setDescription("This file's current size in 2^32 byte blocks.\n\n              For example, for a file with a total size of 4,294,967,296\n              bytes, this attribute would have a value of 1; for a file\n              with a total size of 4,294,967,295 bytes this attribute's\n              value would be 0.")
applOpenFileSizeLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 2, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenFileSizeLow.setDescription("This file's current size modulo 2^32 bytes.\n\n               For example, for a file with a total size of\n               4,294,967,296 bytes this attribute would have a value\n               of 0; for a file with a total size of 4,294,967,295\n               bytes this attribute's value would be 4,294,967,295.")
applOpenFileMode = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readWrite", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenFileMode.setDescription("This attribute reports the current mode of this file from\n               the perspective of this running application element.\n\n               These values have the following meanings:\n\n                   read(1) - file opened for reading only\n                   write(2) - file opened for writing only\n                   readWrite(3) - file opened for read and write.\n\n               These values correspond to the POSIX/ANSI C library\n               function fopen() 'type' parameter, using the following\n               mappings:\n\n                   r -> read(1)\n                   w -> write(2)\n                   a -> write(2)\n                   + -> readWrite(3)\n             ")
applOpenConnectionTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 2, 3), )
if mibBuilder.loadTexts: applOpenConnectionTable.setDescription('The applOpenConnectionTable provides information about\n               open and listening connections from the perspective\n               of a running application element or service instance.\n               Entries in this table are indexed by applElmtOrSvc,\n               applElmtOrSvcID, and by applOpenChannelIndex, which\n               serves to uniquely identify each connection in the\n               context of a service instance or running application\n               element.\n\n               For each row in this table, a corresponding row will\n               exist in the applOpenChannel table.  For rows in the\n               applOpenChannelTable which do not represent open or\n               listening connections, no corresponding rows will exist\n               in this table.')
applOpenConnectionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applOpenChannelIndex"))
if mibBuilder.loadTexts: applOpenConnectionEntry.setDescription("An applOpenConnectionEntry indicates that a running\n               application element or service instance has an open\n               connection.  The entry has information describing that\n               connection.\n\n               In the case of a TCP transport, the element\n               applOpenConnectionNearEndAddr and that row's\n               applOpenConnectionFarEndAddr would correspond\n               to a tcpConnEntry.  For a UDP transport, a\n               similar relationship exists with respect to\n               a udpEntry.")
applOpenConnectionTransport = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1, 1), TDomain().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenConnectionTransport.setDescription("The applOpenConnectionTransport attribute identifies the\n               transport protocol in use for this connection.  If it is\n               not practical to determine the underlying transport, this\n               attribute's value shall have a value of {0 0}.")
applOpenConnectionNearEndAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1, 2), ApplTAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenConnectionNearEndAddr.setDescription('The applOpenConnectionNearEndAddr attribute reports the\n               transport address and port information for the near end\n               of this connection.\n\n               If the value is not known, the value has a  length\n               of zero.')
applOpenConnectionNearEndpoint = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenConnectionNearEndpoint.setDescription('The applOpenConnectionNearEndpoint attribute reports the\n               fully-qualified domain name and port information for the\n               near end of this connection.\n\n               The format of this attribute for TCP and UDP-based\n               protocols is the fully-qualified domain name immediately\n               followed by a colon which is immediately followed by\n               the decimal representation of the port number.\n\n               If the value is not known, the value has a  length\n               of zero.')
applOpenConnectionFarEndAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1, 4), ApplTAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenConnectionFarEndAddr.setDescription('The applOpenConnectionFarEndAddr attribute reports the\n               transport address and port information for the far end\n               of this connection.\n\n               If not known, as in the case of a connectionless\n               transport, the value of this attribute shall be a\n               zero-length string.')
applOpenConnectionFarEndpoint = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenConnectionFarEndpoint.setDescription('The applOpenConnectionFarEndpoint attribute reports\n               the fully-qualified domain name and port information\n               for the far end of this connection.\n\n               The format of this attribute for TCP and UDP-based\n               protocols is the fully-qualified domain name immediately\n               followed by a colon which is immediately followed by\n               the decimal representation of the port number.\n\n               If not known, as in the case of a connectionless\n               transport, the value of this attribute shall be a\n               zero-length string.')
applOpenConnectionApplication = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applOpenConnectionApplication.setDescription("The applOpenConnectionApplication attribute identifies\n               the application layer protocol in use.  If not known,\n               the value of this attribute shall be a zero-length\n               string.\n\n               When possible, protocol names should be those used in\n               the 'ASSIGNED NUMBERS' [13].  For example, an SMTP mail\n               server would use 'SMTP'.")
applTransactionStreamTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 2, 4), )
if mibBuilder.loadTexts: applTransactionStreamTable.setDescription('The applTransactionStreamTable contains common\n               information for transaction statistic accumulation.')
applTransactionStreamEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applOpenChannelIndex"))
if mibBuilder.loadTexts: applTransactionStreamEntry.setDescription('An applTransactionStreamEntry contains information for\n               a single transaction stream.  A transaction stream\n               can be a network connection, file, or other source\n               of transactions.')
applTransactStreamDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamDescr.setDescription("The applTransactStreamDescr attribute provides a\n               human-readable description of this transaction stream.\n               If no descriptive information is available, this\n               attribute's value shall be a zero-length string.")
applTransactStreamUnitOfWork = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamUnitOfWork.setDescription("The applTransactStreamUnitOfWork attribute provides a\n               human-readable definition of what the unit of work is\n               for this transaction stream.\n\n               If no descriptive information is available, this\n               attribute's value shall be a zero-length string.")
applTransactStreamInvokes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 3), Counter64()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamInvokes.setDescription('Cumulative count of requests / invocations issued.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamInvokesLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 4), Counter32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamInvokesLow.setDescription('This counter corresponds to the low thirty-two\n               bits of applTransactStreamInvokes.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamInvCumTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 5), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamInvCumTimes.setDescription('The applTransactStreamInvCumTimes attribute reports the\n               cumulative sum of the lengths of the intervals measured\n               between the transmission of requests and the receipt of\n               (the first of) the corresponding response(s).\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamInvRspTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 6), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamInvRspTimes.setDescription('The applTransactStreamInvRspTimes attribute reports the\n               cumulative sum of the lengths of the intervals measured\n               between the receipt of the first and last of multiple\n               responses to a request.\n\n               For transaction streams which do not permit multiple\n               responses to a single request, this attribute will be\n               constant.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamPerforms = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 7), Counter64()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamPerforms.setDescription('Cumulative count of transactions performed.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamPerformsLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 8), Counter32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamPerformsLow.setDescription('This counter reports the low thirty-two bits of\n               applTransactStreamPerforms.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamPrfCumTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 9), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamPrfCumTimes.setDescription('The applTransactStreamPrfCumTimes attribute reports the\n               cumulative sum of the interval lengths measured between\n               receipt of requests and the transmission of the\n               corresponding responses.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactStreamPrfRspTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 4, 1, 10), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactStreamPrfRspTimes.setDescription('For each transaction performed, the elapsed time between\n               when the first response is enqueued and when the last\n               response is enqueued is added to this cumulative sum.\n\n               For single-response protocols, the value of\n               applTransactStreamPrfRspTimes will be constant.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactFlowTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 2, 5), )
if mibBuilder.loadTexts: applTransactFlowTable.setDescription('The applTransactFlowTable contains entries, organized by\n               application instance or running application element,\n               direction of flow, and type (request/response) for each\n               open transaction stream.\n\n               The simple model of a transaction used here looks like\n               this:\n\n                   invoker  |   Request     | performer\n                            | - - - - - - > |\n                            |               |\n                            |   Response    |\n                            | < - - - - - - |\n                            |               |\n\n               Since in some protocols it is possible for an entity\n               to take on both the invoker and performer roles,\n               information here is accumulated for transmitted and\n               received requests, as well as for transmitted and\n               received responses.  Counts are maintained for both\n               transactions and bytes transferred.')
applTransactFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applOpenChannelIndex"), (0, "APPLICATION-MIB", "applTransactFlowDirection"), (0, "APPLICATION-MIB", "applTransactFlowReqRsp"))
if mibBuilder.loadTexts: applTransactFlowEntry.setDescription('An applTransactFlowEntry reports transaction throughput\n               information for requests or response in a particular\n               direction (transmit / receive) for a transaction stream.\n\n               Entries in this table correspond to those in the\n               applTransactionStreamTable with identical values for the\n               applElmtOrSvc, applElmtOrSvcId, and applOpenChannelIndex.\n\n               For all counter objects in one of these entries,\n               the corresponding (same value for applElmtOrSvc,\n               applElmtOrSvcId, and applOpenChannelIndex)\n               applOpenChannelOpenTime object serves as a discontinuity\n               indicator.  ')
applTransactFlowDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2),)))
if mibBuilder.loadTexts: applTransactFlowDirection.setDescription('The applTransactFlowDirection index serves to identify\n                an entry as containing information pertaining to the\n                transmit (1) or receive (2) flow of a transaction\n                stream.')
applTransactFlowReqRsp = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("request", 1), ("response", 2),)))
if mibBuilder.loadTexts: applTransactFlowReqRsp.setDescription('The value of the applTransactFlowReqRsp index indicates\n               whether this entry contains information on requests\n               (1), or responses (2).')
applTransactFlowTrans = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 3), Counter64()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactFlowTrans.setDescription('The applTransactFlowTrans attribute reports the number\n                of request/response transactions (as indicated by\n                the applTransactFlowReqRsp index) received/generated\n                (as indicated by the applTransactFlowDirection index)\n                that this service instance or running application\n                element has processed for this transaction stream.\n\n                Discontinuities in this counter can be detected\n                by monitoring the corresponding instance of\n                applOpenChannelOpenTime.')
applTransactFlowTransLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 4), Counter32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactFlowTransLow.setDescription('This attribute corresponds to the low thirty-two\n                bits of applTransactFlowTrans.\n\n                Discontinuities in this counter can be detected\n                by monitoring the corresponding instance of\n                applOpenChannelOpenTime.')
applTransactFlowBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactFlowBytes.setDescription('The applTransactFlowBytes attribute reports the number\n               of request/response (as indicated by the\n               applTransactFlowReqRsp index) bytes received/generated\n               (as indicated by the applTransactFlowDirection index)\n               handled by this application element or service instance\n               on this transaction stream.\n\n               All application layer bytes are included in this count,\n               including any application layer wrappers, headers, or\n               other overhead.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactFlowBytesLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactFlowBytesLow.setDescription('This attribute corresponds to the low thirty-two\n               bits of applTransactFlowBytes.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactFlowTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 5, 1, 7), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactFlowTime.setDescription("The applTransactFlowTime attribute records the time of\n               the processing (receipt or transmission as indicated\n               by the applTransactFlowDirection index) by this\n               running application element or service instance of\n               the most recent request/response (as indicated by\n               the applTransactFlowReqRsp index) on this transaction\n               stream.\n\n               If no requests/responses been received/transmitted by\n               this entity over this transaction stream, the value\n               of this attribute shall be '0000000000000000'H ")
applTransactKindTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 2, 6), )
if mibBuilder.loadTexts: applTransactKindTable.setDescription('The applTransactKindTable provides transaction statistics\n               broken down by kinds of transaction.  The definition of\n               the kinds of transactions is specific to the application\n               protocol in use, and may be documented in the form of an\n               applicability statement.  ')
applTransactKindEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applOpenChannelIndex"), (0, "APPLICATION-MIB", "applTransactFlowDirection"), (0, "APPLICATION-MIB", "applTransactFlowReqRsp"), (0, "APPLICATION-MIB", "applTransactKind"))
if mibBuilder.loadTexts: applTransactKindEntry.setDescription("An applTransactKindEntry reports information for a\n               specific service instance or running application\n               element's use of a specific transaction stream in\n               a particular direction in requests or responses\n               (as indicated by the applTransactFlowReqRsp index)\n               broken down by transaction kind, as indicated by the\n               applTransactKind index.\n\n               Discontinuities in any of the counters in an entry can\n               be detected by monitoring the corresponding instance of\n               applOpenChannelOpenTime.")
applTransactKind = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1,32)))
if mibBuilder.loadTexts: applTransactKind.setDescription('The applTransactKind index is the human-readable\n               identifier for a particular transaction kind within\n               the context of an application protocol.  The values\n               to be used for a particular protocol may be identified\n               in an applicability statement.')
applTransactKindTrans = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1, 2), Counter64()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactKindTrans.setDescription('The applTransactKindTrans attribute reports the number\n               of request/response (as indicated by the\n               applTransactFlowReqRsp index) transactions\n               received/generated (as indicated by the\n               applTransactFlowDirection index) handled by this\n               application instance or application element on this\n               transaction stream for this transaction kind.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactKindTransLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1, 3), Counter32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactKindTransLow.setDescription('The applTransactKindTransLow attribute reports\n               the low thirty-two bits of applTransactKindTrans.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactKindBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactKindBytes.setDescription('The applTransactKindBytes attribute reports the number\n               of request/response (as indicated by the\n               applTransactFlowReqRsp index) bytes received/generated\n               (as indicated by the applTransactFlowDirection index)\n               handled by this application element on this transaction\n               stream for this transaction kind.\n\n               All application layer bytes are included in this count,\n               including any application layer wrappers, headers, or\n               other overhead.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactKindBytesLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactKindBytesLow.setDescription('The applTransactKindBytesLow attribute corresponds\n               to the low thirty-two bits of applTransactKindBytes.\n\n               Discontinuities in this counter can be detected\n               by monitoring the corresponding instance of\n               applOpenChannelOpenTime.')
applTransactKindTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 2, 6, 1, 6), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applTransactKindTime.setDescription("The applTransactKindTime attribute records the time of\n               the processing (receipt or transmission as indicated\n               by the applTransactFlowDirection index) by this\n               running application element or service instance of\n               the most recent request/response (as indicated by\n               the applTransactFlowReqRsp index) of this kind of\n               transaction on this transaction stream.\n\n               If no requests/responses of this kind been\n               received/transmitted by this running application element\n               or service instance over this transaction stream, the\n               value of this attribute shall be '0000000000000000'H ")
applPastChannelControlTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 1), )
if mibBuilder.loadTexts: applPastChannelControlTable.setDescription('The applPastChannelControlTable controls the\n               accumulation of history information about channels\n               from the perspective of service instances and running\n               application elements.  Entries in this table are indexed\n               by applElmtOrSvc and applElmtOrSvcId, giving control\n               of channel history accumulation at the level of each\n               service instance and running application element.')
applPastChannelControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 1, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"))
if mibBuilder.loadTexts: applPastChannelControlEntry.setDescription('An applPastChannelControlEntry provides the ability\n               to control the retention of channel history information\n               by service instances and running application elements.')
applPastChannelControlCollect = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("enabled", 1), ("frozen", 2), ("disabled", 3),)).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPastChannelControlCollect.setDescription("When the value of applPastChannelControlCollect is\n               'enabled', each time the corresponding running\n               application element or service instance closes\n               an open channel a new entry will be added to the\n               applPastChannelTable.\n\n               When the value of applPastChannelControlCollect\n               is 'frozen', no new entries are added to the\n               applPastChannelTable for this running application\n               element or service instance, and old entries are not\n               aged out.\n\n               When the value of applPastChannelControlCollect\n               is 'disabled', all entries are removed from\n               applPastChannelTable for this running application or\n               service instance, and no new entries are added.")
applPastChannelControlMaxRows = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 1, 1, 2), Unsigned32().clone(500)).setUnits('channel history entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPastChannelControlMaxRows.setDescription('The maximum number of entries allowed in the\n               applPastChannelTable for this running application element\n               or service instance.  Once the number of rows for this\n               running application element or service instance in the\n               applPastChannelTable reaches this value, when new\n               entries are to be added the management subsystem will\n               make room for them by removing the oldest entries.\n               Entries will be removed on the basis of oldest\n               applPastChannelCloseTime value first.')
applPastChannelControlTimeLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 1, 1, 3), Unsigned32().clone(7200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: applPastChannelControlTimeLimit.setDescription("The maximum time in seconds which an entry for this\n               running application element or service instance\n               may exist in the applPastChannelTable before it\n               is removed.  Any entry that is older than this value\n               will be removed (aged out) from the table, unless the\n               applPastChannelControlCollect is set to 'frozen'.\n\n               Note that an entry may be aged out prior to reaching\n               this time limit if it is the oldest entry in the table\n               and must be removed to make space for a new entry so\n               as to not exceed applPastChannelControlMaxRows, or if the\n               applPastChannelControlCollect is set to 'disabled'.")
applPastChannelControlRemItems = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 1, 1, 4), Counter32()).setUnits('channel history entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelControlRemItems.setDescription("The applPastChannelControlRemItems attribute reports the\n               number of applPastChannelControlTable entries for this\n               running application element or service instance that\n               were deleted in order to make room for new history\n               entries.\n\n               This count does NOT include entries deleted for the\n               following reasons:\n                   - the corresponding applPastChannelControlCollect\n                     attribute has been set to 'disabled'\n\n                   - the entry has been in the table longer that the\n                     time limit indicated by the corresponding\n                     applPastChannelControlTimeLimit.\n             ")
applPastChannelTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 2), )
if mibBuilder.loadTexts: applPastChannelTable.setDescription("The applPastChannelTable provides history information\n               about channels from the perspective of running\n               application elements and service instances.\n               Entries in this table are indexed by applElmtOrSvc,\n               applElmtOrSvcId, and by applPastChannelIndex, which\n               serves to uniquely identify each former channel in the\n               context of a running application element or service\n               instance.\n\n               Note that the value of applPastChannelIndex is\n               independent of the value applOpenChannelIndex had when\n               this channel was open.\n\n               Entries for closed channels for a given running\n               application element or service instance can\n               be added to this table only if its entry in the\n               applPastChannelControlTable has the value 'enabled'\n               for the attribute applPastChannelControlCollect.\n\n               Entries for closed channels are removed under the\n               following circumstances:\n\n                   - the running application element or service\n                     instance no longer exists\n\n                   - the corresponding applPastChannelControlCollect\n                     attribute has been set to 'disabled'\n\n                   - the entry has been in the table longer that the\n                     time limit indicated by the corresponding\n                     applPastChannelControlTimeLimit and the value of\n                     applPastChannelControlCollect is not 'frozen'\n\n                   - this is the oldest entry for the running\n                     application element or service instance in\n                     question and the addition of a new element would\n                     otherwise cause applPastChannelControlMaxRows to\n                     be exceeded for this running application element\n                     or service instance.\n\n                   - a value of applPastChannelIndex has been re-used.\n                     Note that under normal circumstances, this is\n                     unlikely.\n\n               Removal/replacement of an entry under the\n               last two conditions causes the corresponding\n               applPastChannelControlRemItems to be incremented.")
applPastChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applPastChannelIndex"))
if mibBuilder.loadTexts: applPastChannelEntry.setDescription('An applPastChannelEntry indicates that a running\n              application element or service instance once had an open\n              channel, which is now closed.  The entry has information\n              describing that channel.')
applPastChannelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: applPastChannelIndex.setDescription('This attribute serves to uniquely identify this closed\n               channel in the context of the running application\n               element or service instance.  This attribute has no\n               other semantics.\n\n               Note that the value of applPastChannelIndex is\n               independent of the value applOpenChannelIndex had when\n               this channel was active.\n\n               In issuing this index value, the implementation must\n               avoid re-issuing an index value which has already been\n               assigned to an entry which has not yet been deleted due\n               to age or space considerations.\n\n               The value zero is excluded from the set of permitted\n               values for this index in order to permit other tables to\n               possibly represent information that cannot be associated\n               with a specific entry in this table.  ')
applPastChannelOpenTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelOpenTime.setDescription('This attribute records the time when this channel was\n               originally opened.  Note that this information is quite\n               different from applOpenChannelOpenTime, which is used\n               for the detection of counter discontinuities.')
applPastChannelCloseTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelCloseTime.setDescription('This attribute records the time when this channel\n               was closed.')
applPastChannelReadRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 4), Unsigned64TC()).setUnits('read requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelReadRequests.setDescription('This attribute records the number of read requests for\n               this channel made by this running application element or\n               service instance.  All read requests for this channel by\n               this running application element or service instance,\n               regardless of completion status, are included in this\n               count.  Read requests are counted in terms of system\n               calls, rather than API calls.')
applPastChannelReadReqsLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 5), Unsigned32()).setUnits('read requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelReadReqsLow.setDescription('This attribute corresponds to the low thirty-two bits\n               of applPastChannelReadRequests.')
applPastChannelReadFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 6), Unsigned32()).setUnits('failed read requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelReadFailures.setDescription('This attribute reports the number of failed read\n               requests.')
applPastChannelBytesRead = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 7), Unsigned64TC()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelBytesRead.setDescription('This attribute reports the number of bytes read from this\n               channel by this running application element or service\n               instance.  Only bytes successfully read are included in\n               this count. ')
applPastChannelBytesReadLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelBytesReadLow.setDescription('This attribute corresponds to the low thirty-two bits\n               of applPastChannelBytesRead.')
applPastChannelLastReadTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 9), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelLastReadTime.setDescription("This attribute reports the time of the most recent read\n               request made by this running application element or\n               service instance regardless of completion status, for\n               this former channel.\n\n               If no read requests have been made , the value of this\n               attribute shall be '0000000000000000'H ")
applPastChannelWriteRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 10), Unsigned64TC()).setUnits('write requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelWriteRequests.setDescription('The applPastChannelWriteRequests attribute reports\n               the number of write requests, regardless of completion\n               status, made by this running application element or\n               service instance for this former channel.\n\n               Write requests are counted in terms of system calls,\n               rather than API calls.')
applPastChannelWriteReqsLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 11), Unsigned32()).setUnits('write requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelWriteReqsLow.setDescription('This attribute corresponds to the low thirty-two\n               bits of applPastChannelWriteRequests.')
applPastChannelWriteFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 12), Unsigned32()).setUnits('failed write requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelWriteFailures.setDescription('This attribute reports the number of failed write\n               requests.')
applPastChannelBytesWritten = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 13), Unsigned64TC()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelBytesWritten.setDescription('This attribute reports the number of bytes written to\n               this former channel by this running application element\n               or service instance.  Only bytes successfully written\n               (no errors reported by the API in use by the application)\n               are included in this count.')
applPastChannelBytesWritLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 14), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelBytesWritLow.setDescription('This attribute corresponds to the low thirty-two bits of\n               applPastChannelBytesWritten.')
applPastChannelLastWriteTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 2, 1, 15), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastChannelLastWriteTime.setDescription("The applPastChannelLastWriteTime attribute reports\n               the time of the most recent write request made by\n               this running application element or service instance,\n               regardless of completion status, for this former\n               channel.\n\n               If no write requests have been made the value of this\n               attribute shall be '0000000000000000'H ")
applPastFileTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 3), )
if mibBuilder.loadTexts: applPastFileTable.setDescription('The applPastFileTable supplements the\n               applPastChannelTable for entries corresponding to\n               channels which were files.  The indexing structure is\n               identical to applPastChannelTable.  An entry exists in\n               the applPastFileTable only if there is a corresponding\n               (same index values) entry in the applPastChannelTable\n               and if the channel was a file.\n\n               Entries for closed files are removed when the\n               corresponding entries are removed from the\n               applPastChannelTable.')
applPastFileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 3, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applPastChannelIndex"))
if mibBuilder.loadTexts: applPastFileEntry.setDescription('An applPastFileEntry provides additional, file-specific\n              information to complement the corresponding\n              applPastChannelEntry for a channel which was a file.')
applPastFileName = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 3, 1, 1), LongUtf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastFileName.setDescription('This attribute records the last known value of\n              applOpenFileName before the channel was closed.')
applPastFileSizeHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 3, 1, 2), Unsigned32()).setUnits('2^32 byte blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastFileSizeHigh.setDescription("This attribute records the value of applOpenFileSizeHigh\n              at the time this channel was closed.\n\n              For example, for a file with a total size of\n              4,294,967,296 bytes, this attribute would have a value\n              of 1; for a file with a total size of 4,294,967,295\n              bytes this attribute's value would be 0.")
applPastFileSizeLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 3, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastFileSizeLow.setDescription("This attribute records the value of applOpenFileSizeLow\n               at the time this channel was closed.\n\n               For example, for a file with a total size of\n               4,294,967,296 bytes this attribute would have a value\n               of 0; for a file with a total size of 4,294,967,295\n               bytes this attribute's value would be 4,294,967,295.")
applPastFileMode = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readWrite", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastFileMode.setDescription('This attribute records the value of applOpenFileMode\n               at the time this channel was closed.  ')
applPastConTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 4), )
if mibBuilder.loadTexts: applPastConTable.setDescription('The applPastConTable supplements the applPastChannelTable\n               for entries corresponding to channels which were\n               connections.  The indexing structure is identical\n               to applPastChannelTable.  An entry exists in the\n               applPastConTable only if there is a corresponding\n               (same index values) entry in the applPastChannelTable\n               and if the channel was a connection.\n\n               Entries for closed connections are removed when\n               the corresponding entries are removed from the\n               applPastChannelTable.')
applPastConEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applPastChannelIndex"))
if mibBuilder.loadTexts: applPastConEntry.setDescription('An applPastConEntry provides additional,\n              connection-specific information to complement the\n              corresponding applPastChannelEntry for a channel which\n              was a connection.')
applPastConTransport = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1, 1), TDomain().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastConTransport.setDescription('The applPastConTransport attribute identifies the\n               transport protocol that was in use for this former\n               connection.  If the transport protocol could not be\n               determined, the value { 0 0 } shall be used.')
applPastConNearEndAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1, 2), ApplTAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastConNearEndAddr.setDescription('The applPastConNearEndAddr attribute reports the\n               transport address and port information for the near\n               end of this former connection.\n\n               If the information could not be determined, the value\n               shall be a zero-length string.')
applPastConNearEndpoint = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastConNearEndpoint.setDescription('The applPastConNearEndpoint attribute reports the\n               fully-qualified domain name and port information for the\n               near end of this former connection.\n\n               The format of this attribute for TCP and UDP-based\n               protocols is the fully-qualified domain name immediately\n               followed by a colon which is immediately followed by\n               the decimal representation of the port number.\n\n               If the information could not be determined, the value\n               shall be a zero-length string.')
applPastConFarEndAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1, 4), ApplTAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastConFarEndAddr.setDescription('The applPastConFarEnd attribute reports the transport\n               address and port information for the far end of this\n               former connection.\n\n               If not known, as in the case of a connectionless\n               transport, the value of this attribute shall be a\n               zero-length string.')
applPastConFarEndpoint = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastConFarEndpoint.setDescription('The applPastConFarEndpoint attribute reports the\n               transport address and port information for the far\n               end of this former connection.\n\n               The format of this attribute for TCP and UDP-based\n               protocols is the fully-qualified domain name immediately\n               followed by a colon which is immediately followed by\n               the decimal representation of the port number.\n\n               If not known, as in the case of a connectionless\n               transport, the value of this attribute shall be a\n               zero-length string.')
applPastConApplication = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastConApplication.setDescription('The applPastConApplication attribute identifies the\n               application layer protocol that was in use.  Where\n               possible, the values defined in [13] shall be used.\n               If not known, the value of this attribute shall be a\n               zero-length string.')
applPastTransStreamTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 5), )
if mibBuilder.loadTexts: applPastTransStreamTable.setDescription('The applPastTransStreamTable contains common\n               information for historical transaction statistics.')
applPastTransStreamEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applPastChannelIndex"))
if mibBuilder.loadTexts: applPastTransStreamEntry.setDescription('An applPastTransStreamEntry contains information for\n               a single former transaction stream.  A transaction\n               stream could have been a network connection, file, or\n               other source of transactions.')
applPastTransStreamDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamDescr.setDescription("The applPastTransStreamDescr attribute provides a\n               human-readable description of this transaction stream.\n\n               If no descriptive information is available, this\n               attribute's value shall be a zero-length string.")
applPastTransStreamUnitOfWork = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamUnitOfWork.setDescription("The applPastTransStreamUnitOfWork attribute provides a\n               human-readable definition of what the unit of work is\n               for this transaction stream.\n\n               If no descriptive information is available, this\n               attribute's value shall be a zero-length string.")
applPastTransStreamInvokes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 3), Unsigned64TC()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamInvokes.setDescription('Cumulative count of requests / invocations issued\n               for this transaction stream when it was active.')
applPastTransStreamInvokesLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 4), Unsigned32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamInvokesLow.setDescription('This object corresponds to the low thirty-two\n               bits of applPastTransStreamInvokes.')
applPastTransStreamInvCumTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 5), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamInvCumTimes.setDescription('The applPastTransStreamInvCumTimes attribute reports the\n               cumulative sum of the lengths of the intervals times\n               measured between the transmission of requests and the\n               receipt of (the first of) the corresponding response(s).')
applPastTransStreamInvRspTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamInvRspTimes.setDescription('The applPastTransStreamInvRspTimes attribute reports the\n               cumulative sum of the lengths of the intervals measured\n               between the receipt of the first and last of multiple\n               responses to a request.\n\n               For transaction streams which do not permit multiple\n               responses to a single request, this attribute will be\n               zero.')
applPastTransStreamPerforms = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 7), Unsigned64TC()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamPerforms.setDescription('Total number of transactions performed.')
applPastTransStreamPerformsLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 8), Unsigned32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamPerformsLow.setDescription('This objecy reports the low thirty-two bits of\n               applPastTransStreamPerforms.')
applPastTransStreamPrfCumTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamPrfCumTimes.setDescription('The applPastTransStreamPrfCumTimes attribute reports the\n               cumulative sum of the lengths of the intervals measured\n               between receipt of requests and the transmission of the\n               corresponding responses.')
applPastTransStreamPrfRspTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 5, 1, 10), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransStreamPrfRspTimes.setDescription('For each transaction performed, the elapsed time between\n               when the first response is enqueued and when the last\n               response is enqueued is added to this cumulative sum.\n\n               For single-response protocols, the value of\n               applPastTransStreamPrfRspTimes will be zero.')
applPastTransFlowTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 6), )
if mibBuilder.loadTexts: applPastTransFlowTable.setDescription('The applPastTransFlowTable contains entries, organized by\n               application instance or running application element,\n               direction of flow, and type (request/response) for each\n               former transaction stream.\n\n               The simple model of a transaction used here looks like\n               this:\n\n                   invoker  |   Request     | performer\n                            | - - - - - - > |\n                            |               |\n                            |   Response    |\n                            | < - - - - - - |\n                            |               |\n\n               Since in some protocols it is possible for an entity\n               to take on both the invoker and performer roles,\n               information here is accumulated for transmitted and\n               received requests, as well as for transmitted and\n               received responses.  Counts are maintained for both\n               transactions and bytes transferred.')
applPastTransFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applPastChannelIndex"), (0, "APPLICATION-MIB", "applPastTransFlowDirection"), (0, "APPLICATION-MIB", "applPastTransFlowReqRsp"))
if mibBuilder.loadTexts: applPastTransFlowEntry.setDescription('An applPastTransFlowEntry records transaction throughput\n               information for requests or response in a particular\n               direction (transmit / receive) for a transaction stream.\n\n               Entries in this table correspond to those in the\n               applPastTransStreamTable with identical values\n               for the applElmtOrSvc, applElmtOrSvcId, and the\n               applPastChannelIndex.')
applPastTransFlowDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2),)))
if mibBuilder.loadTexts: applPastTransFlowDirection.setDescription('The applPastTransFlowDirection index serves\n                to identify an entry as containing information\n                pertaining to the transmit (1) or receive (2) flow\n                of a past transaction stream.  This index corresponds\n                to applTransactFlowDirection.')
applPastTransFlowReqRsp = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2,))).clone(namedValues=NamedValues(("request", 1), ("response", 2),)))
if mibBuilder.loadTexts: applPastTransFlowReqRsp.setDescription('The value of the applPastTransFlowReqRsp index indicates\n               whether this entry contains information on requests\n               (1), or responses (2).  This index corresponds to\n               applTransactFlowReqRsp.')
applPastTransFlowTrans = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 3), Unsigned64TC()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransFlowTrans.setDescription('The applPastTransFlowTrans attribute reports the number\n                of request/response (as indicated by the\n                applPastTransFlowReqRsp index) transactions\n                received/generated (as indicated by the\n                applPastTransFlowDirection index) handled on this\n                transaction stream.')
applPastTransFlowTransLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 4), Unsigned32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransFlowTransLow.setDescription('This attribute corresponds to the low thirty-two\n                bits of applPastTransFlowTrans.')
applPastTransFlowBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 5), Unsigned64TC()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransFlowBytes.setDescription('The applPastTransFlowBytes attribute reports the number\n               of request/response (as indicated by the\n               applPastTransFlowReqRsp index) bytes received/generated\n               (as indicated by the applPastTransFlowDirection index)\n               handled on this transaction stream.\n\n               All application layer bytes are included in this count,\n               including any application layer wrappers, headers, or\n               other overhead.')
applPastTransFlowBytesLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 6), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransFlowBytesLow.setDescription('This attribute corresponds to the low thirty-two\n               bits of applPastTransFlowBytes.')
applPastTransFlowTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 6, 1, 7), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransFlowTime.setDescription("The applPastTransFlowTime attribute records the time of\n               the processing (receipt or transmission as\n               indicated by the applPastTransFlowDirection index)\n               of the last request/response (as indicated by the\n               applPastTransFlowReqRsp index) on this transaction\n               stream.\n\n               If no requests/responses been received/transmitted by\n               this entity over this transaction stream, the value\n               of this attribute shall be '0000000000000000'H ")
applPastTransKindTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 3, 7), )
if mibBuilder.loadTexts: applPastTransKindTable.setDescription('The applPastTransKindTable provides transaction\n               statistics broken down by kinds of transaction.\n               The definition of the kinds of transactions is\n               specific to the application protocol in use, and may be\n               documented in the form of an applicability statement.  ')
applPastTransKindEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1), ).setIndexNames((0, "APPLICATION-MIB", "applElmtOrSvc"), (0, "APPLICATION-MIB", "applElmtOrSvcId"), (0, "APPLICATION-MIB", "applPastChannelIndex"), (0, "APPLICATION-MIB", "applPastTransFlowDirection"), (0, "APPLICATION-MIB", "applPastTransFlowReqRsp"), (0, "APPLICATION-MIB", "applPastTransKind"))
if mibBuilder.loadTexts: applPastTransKindEntry.setDescription("An applPastTransKindEntry reports historical data for a\n               specific service instance or running application\n               element's use of a specific transaction stream in\n               a particular direction in requests or responses\n               (as indicated by the applPastTransFlowReqRsp index)\n               broken down by transaction kind, as indicated by the\n               applPastTransKind index.")
applPastTransKind = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1,32)))
if mibBuilder.loadTexts: applPastTransKind.setDescription('The applPastTransKind index is the human-readable\n               identifier for a particular transaction kind within\n               the context of an application protocol.  The values\n               to be used for a particular protocol may be identified\n               in an applicability statement.  This index corresponds\n               to applTransactKind.')
applPastTransKindTrans = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1, 2), Unsigned64TC()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransKindTrans.setDescription('For this transaction stream, this attribute records\n               the total number of transactions of the type\n               identified by the indexes.  The type is characterized\n               according to the receive/transmit direction\n               (applPastTransFlowDirecton), whether it was a request\n               or a response (applPastTransFlowReqRsp), and the\n               protocol-specific transaction kind (applPastTransKind).\n               stream for this transaction kind.')
applPastTransKindTransLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1, 3), Unsigned32()).setUnits('transactions').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransKindTransLow.setDescription('The applPastTransKindTransLow attribute reports\n               the low thirty-two bits of applPastTransKindTrans.')
applPastTransKindBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1, 4), Unsigned64TC()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransKindBytes.setDescription('For this transaction stream and transaction kind, the\n               applPastTransKindBytes attribute reports the number\n               of bytes received or generated (as indicated by\n               the applPastTransFlowDirection index) in requests or\n               responses (as indicated by the applPastTransFlowReqRsp\n               index).\n\n               All application layer bytes are included in this count,\n               including any application layer wrappers, headers, or\n               other overhead.')
applPastTransKindBytesLow = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1, 5), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransKindBytesLow.setDescription('The applPastTransKindBytesLow attribute corresponds\n               to the low thirty-two bits of applPastTransKindBytes.')
applPastTransKindTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 3, 7, 1, 6), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPastTransKindTime.setDescription("The applPastTransKindTime attribute records the time of\n               the processing (receipt or transmission as\n               indicated by the applPastTransFlowDirection index)\n               of the last request/response (as indicated by the\n               applPastTransFlowReqRsp index) of this kind of\n               transaction on this transaction stream.\n\n               If no requests/responses of this kind were\n               received/transmitted over this transaction stream, the\n               value of this attribute shall be '0000000000000000'H ")
applElmtRunStatusTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 4, 1), )
if mibBuilder.loadTexts: applElmtRunStatusTable.setDescription('This table provides information on running application\n               elements, complementing information available in the\n               correspondingly indexed sysApplElmtRunTable [31].')
applElmtRunStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplElmtRunIndex"))
if mibBuilder.loadTexts: applElmtRunStatusEntry.setDescription('An applElmtRunStatusEntry contains information to support\n              the control and monitoring of a single running application\n              element.')
applElmtRunStatusSuspended = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applElmtRunStatusSuspended.setDescription('The applElmtRunStatusSuspended attribute reports\n               whether processing by this running application element\n               has been suspended, whether by management request or by\n               other means.')
applElmtRunStatusHeapUsage = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: applElmtRunStatusHeapUsage.setDescription('The applElmtRunStatusHeapUsage reports the current\n               approximate heap usage by this running application\n               element.')
applElmtRunStatusOpenConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1, 3), Unsigned32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: applElmtRunStatusOpenConnections.setDescription('The applElmtRunStatusOpenConnections attribute reports\n               the current number of open connections in use by this\n               running application element.')
applElmtRunStatusOpenFiles = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1, 4), Gauge32()).setUnits('files').setMaxAccess("readonly")
if mibBuilder.loadTexts: applElmtRunStatusOpenFiles.setDescription('The applElmtRunStatusOpenFiles attribute reports the\n               current number of open files in use by this running\n               application element.')
applElmtRunStatusLastErrorMsg = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applElmtRunStatusLastErrorMsg.setDescription('The applElmtRunStatusLastErrorMessage attribute reports\n               the most recent error message (typically written to\n               stderr or a system error logging facility) from this\n               running application element.  If no such message has yet\n               been generated, the value of this attribute shall be a\n               zero-length string.')
applElmtRunStatusLastErrorTime = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 1, 1, 6), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: applElmtRunStatusLastErrorTime.setDescription("The applElmtRunStatusLastErrorTime attribute reports the\n               time of the most recent error message in\n               applElmtRunStatusLastErrorMsg.\n\n               If no such message has yet been generated, the value\n               of this attribute shall be '0000000000000000'H ")
applElmtRunControlTable = MibTable((1, 3, 6, 1, 2, 1, 62, 1, 4, 2), )
if mibBuilder.loadTexts: applElmtRunControlTable.setDescription('This table provides the ability to control application\n               elements, complementing information available in the\n               correspondingly indexed sysApplElmtRunTable [31].')
applElmtRunControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 62, 1, 4, 2, 1), ).setIndexNames((0, "SYSAPPL-MIB", "sysApplElmtRunIndex"))
if mibBuilder.loadTexts: applElmtRunControlEntry.setDescription('An applElmtRunControlEntry contains information to\n              support the control of a single running application\n              element.')
applElmtRunControlSuspend = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applElmtRunControlSuspend.setDescription("Setting this variable to 'true' requests the suspension\n               of processing by this running application element.\n               Setting this variable to 'false' requests that processing\n               be resumed.  The effect, if any, will be reported by the\n               applElmtRunStatusSuspended attribute.")
applElmtRunControlReconfigure = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 2, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applElmtRunControlReconfigure.setDescription('Changing the value of this variable requests that the\n               running application element re-load its configuration\n               (like SIGHUP for many UNIX-based daemons).\n\n               Note that completion of a SET on this object only implies\n               that configuration reload was initiated, not necessarily\n               that the reload has been completed.')
applElmtRunControlTerminate = MibTableColumn((1, 3, 6, 1, 2, 1, 62, 1, 4, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applElmtRunControlTerminate.setDescription("Setting the value of applElmtRunControlTerminate to\n               'true' requests that the running application element\n               terminate processing and exit in an orderly manner.\n               This is a 'polite' shutdown request.\n\n               When read, this object's value will be 'false' except\n               when orderly termination is in progress.\n\n               Note that completion of a SET on this object only implies\n               that termination was initiated, not necessarily that the\n               termination has been completed.")
applicationMibGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 62, 2, 1))
applicationMonitorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 1)).setObjects(*(("APPLICATION-MIB", "applSrvInstQual"), ("APPLICATION-MIB", "applSrvName"), ("APPLICATION-MIB", "applSrvIndex"), ("APPLICATION-MIB", "applSrvInstance"), ("APPLICATION-MIB", "applOpenChannelOpenTime"), ("APPLICATION-MIB", "applOpenChannelReadRequestsLow"), ("APPLICATION-MIB", "applOpenChannelReadFailures"), ("APPLICATION-MIB", "applOpenChannelBytesReadLow"), ("APPLICATION-MIB", "applOpenChannelLastReadTime"), ("APPLICATION-MIB", "applOpenChannelWriteRequestsLow"), ("APPLICATION-MIB", "applOpenChannelWriteFailures"), ("APPLICATION-MIB", "applOpenChannelBytesWrittenLow"), ("APPLICATION-MIB", "applOpenChannelLastWriteTime"), ("APPLICATION-MIB", "applOpenFileName"), ("APPLICATION-MIB", "applOpenFileSizeHigh"), ("APPLICATION-MIB", "applOpenFileSizeLow"), ("APPLICATION-MIB", "applOpenFileMode"), ("APPLICATION-MIB", "applOpenConnectionTransport"), ("APPLICATION-MIB", "applOpenConnectionNearEndAddr"), ("APPLICATION-MIB", "applOpenConnectionNearEndpoint"), ("APPLICATION-MIB", "applOpenConnectionFarEndAddr"), ("APPLICATION-MIB", "applOpenConnectionFarEndpoint"), ("APPLICATION-MIB", "applOpenConnectionApplication"),))
if mibBuilder.loadTexts: applicationMonitorGroup.setDescription('This group represents the basic capabilities of this MIB.')
applicationFastMonitorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 2)).setObjects(*(("APPLICATION-MIB", "applOpenChannelReadRequests"), ("APPLICATION-MIB", "applOpenChannelBytesRead"), ("APPLICATION-MIB", "applOpenChannelWriteRequests"), ("APPLICATION-MIB", "applOpenChannelBytesWritten"),))
if mibBuilder.loadTexts: applicationFastMonitorGroup.setDescription('This group comprises 64-bit counters mandatory in\n            high-throughput environments, where 32-bit counters\n            could wrap in less than an hour.')
applicationTransactGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 3)).setObjects(*(("APPLICATION-MIB", "applTransactStreamDescr"), ("APPLICATION-MIB", "applTransactStreamUnitOfWork"), ("APPLICATION-MIB", "applTransactStreamInvokesLow"), ("APPLICATION-MIB", "applTransactStreamInvCumTimes"), ("APPLICATION-MIB", "applTransactStreamInvRspTimes"), ("APPLICATION-MIB", "applTransactStreamPerformsLow"), ("APPLICATION-MIB", "applTransactStreamPrfCumTimes"), ("APPLICATION-MIB", "applTransactStreamPrfRspTimes"), ("APPLICATION-MIB", "applTransactFlowTransLow"), ("APPLICATION-MIB", "applTransactFlowBytesLow"), ("APPLICATION-MIB", "applTransactFlowTime"), ("APPLICATION-MIB", "applTransactKindTransLow"), ("APPLICATION-MIB", "applTransactKindBytesLow"), ("APPLICATION-MIB", "applTransactKindTime"),))
if mibBuilder.loadTexts: applicationTransactGroup.setDescription('This group comprises objects appropriate from monitoring\n            transaction-structured flows.')
applicationFastTransactGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 4)).setObjects(*(("APPLICATION-MIB", "applTransactStreamInvokes"), ("APPLICATION-MIB", "applTransactStreamPerforms"), ("APPLICATION-MIB", "applTransactFlowTrans"), ("APPLICATION-MIB", "applTransactFlowBytes"), ("APPLICATION-MIB", "applTransactKindTrans"), ("APPLICATION-MIB", "applTransactKindBytes"),))
if mibBuilder.loadTexts: applicationFastTransactGroup.setDescription('This group comprises 64-bit transaction counters required in\n            high-throughput environments, where 32-bit counters could\n            wrap in less than an hour.')
applicationHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 5)).setObjects(*(("APPLICATION-MIB", "applPastChannelControlCollect"), ("APPLICATION-MIB", "applPastChannelControlMaxRows"), ("APPLICATION-MIB", "applPastChannelControlTimeLimit"), ("APPLICATION-MIB", "applPastChannelControlRemItems"), ("APPLICATION-MIB", "applPastChannelOpenTime"), ("APPLICATION-MIB", "applPastChannelCloseTime"), ("APPLICATION-MIB", "applPastChannelReadReqsLow"), ("APPLICATION-MIB", "applPastChannelReadFailures"), ("APPLICATION-MIB", "applPastChannelBytesReadLow"), ("APPLICATION-MIB", "applPastChannelLastReadTime"), ("APPLICATION-MIB", "applPastChannelWriteReqsLow"), ("APPLICATION-MIB", "applPastChannelWriteFailures"), ("APPLICATION-MIB", "applPastChannelBytesWritLow"), ("APPLICATION-MIB", "applPastChannelLastWriteTime"), ("APPLICATION-MIB", "applPastFileName"), ("APPLICATION-MIB", "applPastFileSizeHigh"), ("APPLICATION-MIB", "applPastFileSizeLow"), ("APPLICATION-MIB", "applPastFileMode"), ("APPLICATION-MIB", "applPastConTransport"), ("APPLICATION-MIB", "applPastConNearEndAddr"), ("APPLICATION-MIB", "applPastConNearEndpoint"), ("APPLICATION-MIB", "applPastConFarEndAddr"), ("APPLICATION-MIB", "applPastConFarEndpoint"), ("APPLICATION-MIB", "applPastConApplication"),))
if mibBuilder.loadTexts: applicationHistoryGroup.setDescription('This group models basic historical data.')
applicationFastHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 6)).setObjects(*(("APPLICATION-MIB", "applPastChannelReadRequests"), ("APPLICATION-MIB", "applPastChannelBytesRead"), ("APPLICATION-MIB", "applPastChannelWriteRequests"), ("APPLICATION-MIB", "applPastChannelBytesWritten"),))
if mibBuilder.loadTexts: applicationFastHistoryGroup.setDescription('This group comprises additional 64-bit objects required\n            for recording historical data in high-volume environments,\n            where a 32-bit integer would be insufficient.')
applicationTransHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 7)).setObjects(*(("APPLICATION-MIB", "applPastTransStreamDescr"), ("APPLICATION-MIB", "applPastTransStreamUnitOfWork"), ("APPLICATION-MIB", "applPastTransStreamInvokesLow"), ("APPLICATION-MIB", "applPastTransStreamInvCumTimes"), ("APPLICATION-MIB", "applPastTransStreamInvRspTimes"), ("APPLICATION-MIB", "applPastTransStreamPerformsLow"), ("APPLICATION-MIB", "applPastTransStreamPrfCumTimes"), ("APPLICATION-MIB", "applPastTransStreamPrfRspTimes"), ("APPLICATION-MIB", "applPastTransFlowTransLow"), ("APPLICATION-MIB", "applPastTransFlowBytesLow"), ("APPLICATION-MIB", "applPastTransFlowTime"), ("APPLICATION-MIB", "applPastTransKindTransLow"), ("APPLICATION-MIB", "applPastTransKindBytesLow"), ("APPLICATION-MIB", "applPastTransKindTime"),))
if mibBuilder.loadTexts: applicationTransHistoryGroup.setDescription('This group represents historical data for transaction-\n            structured information streams.')
applicationFastTransHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 8)).setObjects(*(("APPLICATION-MIB", "applPastTransFlowTrans"), ("APPLICATION-MIB", "applPastTransFlowBytes"), ("APPLICATION-MIB", "applPastTransKindTrans"), ("APPLICATION-MIB", "applPastTransKindBytes"), ("APPLICATION-MIB", "applPastTransStreamPerforms"), ("APPLICATION-MIB", "applPastTransStreamInvokes"),))
if mibBuilder.loadTexts: applicationFastTransHistoryGroup.setDescription('This group contains 64-bit objects required for historical\n            records on high-volume transaction-structured streams,\n            where 32-bit integers would be insufficient.')
applicationRunGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 62, 2, 1, 9)).setObjects(*(("APPLICATION-MIB", "applElmtRunStatusSuspended"), ("APPLICATION-MIB", "applElmtRunStatusHeapUsage"), ("APPLICATION-MIB", "applElmtRunStatusOpenConnections"), ("APPLICATION-MIB", "applElmtRunStatusOpenFiles"), ("APPLICATION-MIB", "applElmtRunStatusLastErrorMsg"), ("APPLICATION-MIB", "applElmtRunStatusLastErrorTime"), ("APPLICATION-MIB", "applElmtRunControlSuspend"), ("APPLICATION-MIB", "applElmtRunControlReconfigure"), ("APPLICATION-MIB", "applElmtRunControlTerminate"),))
if mibBuilder.loadTexts: applicationRunGroup.setDescription('This group represents extensions to the system application\n            MIB.')
applicationMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 62, 2, 2)).setObjects(*(("APPLICATION-MIB", "applicationMonitorGroup"), ("APPLICATION-MIB", "applicationHistoryGroup"), ("APPLICATION-MIB", "applicationRunGroup"),))
if mibBuilder.loadTexts: applicationMibCompliance.setDescription('The compliance statement for the application MIB.')
mibBuilder.exportSymbols("APPLICATION-MIB", applPastTransStreamInvCumTimes=applPastTransStreamInvCumTimes, applPastFileTable=applPastFileTable, applicationHistoryGroup=applicationHistoryGroup, applicationFastTransactGroup=applicationFastTransactGroup, applPastConFarEndAddr=applPastConFarEndAddr, applTransactFlowTime=applTransactFlowTime, applSrvNameToSrvInstEntry=applSrvNameToSrvInstEntry, applPastTransKindTransLow=applPastTransKindTransLow, applOpenChannelIndex=applOpenChannelIndex, applTransactStreamInvokes=applTransactStreamInvokes, applOpenFileMode=applOpenFileMode, applTransactKindTrans=applTransactKindTrans, applPastChannelControlEntry=applPastChannelControlEntry, applPastChannelBytesRead=applPastChannelBytesRead, applPastChannelWriteFailures=applPastChannelWriteFailures, applPastChannelBytesReadLow=applPastChannelBytesReadLow, applPastTransKindBytes=applPastTransKindBytes, applPastTransStreamInvRspTimes=applPastTransStreamInvRspTimes, applicationMibCompliance=applicationMibCompliance, applicationFastMonitorGroup=applicationFastMonitorGroup, applElmtRunStatusOpenConnections=applElmtRunStatusOpenConnections, applElmtRunControlSuspend=applElmtRunControlSuspend, applPastTransFlowTable=applPastTransFlowTable, applPastTransKindTrans=applPastTransKindTrans, applTransactStreamInvokesLow=applTransactStreamInvokesLow, applPastChannelLastReadTime=applPastChannelLastReadTime, applOpenChannelBytesWritten=applOpenChannelBytesWritten, applOpenConnectionFarEndpoint=applOpenConnectionFarEndpoint, applTransactKindEntry=applTransactKindEntry, applSrvInstToSrvNameEntry=applSrvInstToSrvNameEntry, applPastChannelReadRequests=applPastChannelReadRequests, applPastTransStreamDescr=applPastTransStreamDescr, applTransactKindBytes=applTransactKindBytes, applPastTransStreamPrfRspTimes=applPastTransStreamPrfRspTimes, applPastFileMode=applPastFileMode, applOpenChannelOpenTime=applOpenChannelOpenTime, applSrvInstToRunApplElmtTable=applSrvInstToRunApplElmtTable, ApplTAddress=ApplTAddress, applOpenChannelBytesReadLow=applOpenChannelBytesReadLow, applicationFastTransHistoryGroup=applicationFastTransHistoryGroup, applPastConNearEndAddr=applPastConNearEndAddr, applPastChannelCloseTime=applPastChannelCloseTime, applPastChannelControlTimeLimit=applPastChannelControlTimeLimit, applOpenConnectionTransport=applOpenConnectionTransport, applSrvIndex=applSrvIndex, applTransactStreamUnitOfWork=applTransactStreamUnitOfWork, applOpenChannelReadFailures=applOpenChannelReadFailures, applOpenChannelTable=applOpenChannelTable, applSrvInstToSrvNameTable=applSrvInstToSrvNameTable, applOpenChannelReadRequests=applOpenChannelReadRequests, applElmtOrSvc=applElmtOrSvc, applElmtRunStatusLastErrorTime=applElmtRunStatusLastErrorTime, applPastChannelControlTable=applPastChannelControlTable, applPastChannelBytesWritLow=applPastChannelBytesWritLow, applPastTransKindBytesLow=applPastTransKindBytesLow, applPastConApplication=applPastConApplication, applPastConTable=applPastConTable, applPastTransFlowDirection=applPastTransFlowDirection, applSrvNameToSrvInstTable=applSrvNameToSrvInstTable, applPastChannelControlMaxRows=applPastChannelControlMaxRows, applTransactKindTime=applTransactKindTime, applTransactFlowBytes=applTransactFlowBytes, applPastChannelControlCollect=applPastChannelControlCollect, applPastConFarEndpoint=applPastConFarEndpoint, applPastTransFlowTrans=applPastTransFlowTrans, applOpenChannelReadRequestsLow=applOpenChannelReadRequestsLow, applTransactFlowTrans=applTransactFlowTrans, applPastChannelReadFailures=applPastChannelReadFailures, applElmtRunControlTerminate=applElmtRunControlTerminate, applTransactFlowTransLow=applTransactFlowTransLow, applOpenChannelWriteRequests=applOpenChannelWriteRequests, applOpenConnectionFarEndAddr=applOpenConnectionFarEndAddr, applPastTransStreamInvokesLow=applPastTransStreamInvokesLow, applTransactStreamInvRspTimes=applTransactStreamInvRspTimes, applTransactKindTransLow=applTransactKindTransLow, applicationMonitorGroup=applicationMonitorGroup, applicationFastHistoryGroup=applicationFastHistoryGroup, applPastChannelBytesWritten=applPastChannelBytesWritten, applicationTransHistoryGroup=applicationTransHistoryGroup, applTransactFlowReqRsp=applTransactFlowReqRsp, applOpenChannelBytesRead=applOpenChannelBytesRead, applOpenFileSizeLow=applOpenFileSizeLow, applicationRunGroup=applicationRunGroup, applPastChannelTable=applPastChannelTable, applOpenConnectionEntry=applOpenConnectionEntry, applPastFileName=applPastFileName, applicationMibObjects=applicationMibObjects, applElmtRunStatusSuspended=applElmtRunStatusSuspended, applPastTransKindEntry=applPastTransKindEntry, applPastTransStreamPerforms=applPastTransStreamPerforms, applPastTransFlowEntry=applPastTransFlowEntry, applElmtRunControlGroup=applElmtRunControlGroup, applPastChannelEntry=applPastChannelEntry, applPastChannelWriteRequests=applPastChannelWriteRequests, applPastChannelControlRemItems=applPastChannelControlRemItems, applSrvInstance=applSrvInstance, applPastConTransport=applPastConTransport, applPastTransKind=applPastTransKind, applOpenChannelLastWriteTime=applOpenChannelLastWriteTime, applOpenChannelEntry=applOpenChannelEntry, applOpenFileEntry=applOpenFileEntry, applElmtRunControlEntry=applElmtRunControlEntry, applTransactKind=applTransactKind, applPastConEntry=applPastConEntry, applOpenFileName=applOpenFileName, applTransactKindBytesLow=applTransactKindBytesLow, applSrvName=applSrvName, applElmtRunStatusLastErrorMsg=applElmtRunStatusLastErrorMsg, applServiceGroup=applServiceGroup, applPastChannelLastWriteTime=applPastChannelLastWriteTime, applTransactionStreamTable=applTransactionStreamTable, applPastFileSizeLow=applPastFileSizeLow, applOpenConnectionNearEndAddr=applOpenConnectionNearEndAddr, applTransactFlowDirection=applTransactFlowDirection, applPastTransKindTable=applPastTransKindTable, applOpenChannelWriteRequestsLow=applOpenChannelWriteRequestsLow, applPastChannelWriteReqsLow=applPastChannelWriteReqsLow, applOpenChannelBytesWrittenLow=applOpenChannelBytesWrittenLow, applTransactFlowBytesLow=applTransactFlowBytesLow, applPastTransKindTime=applPastTransKindTime, applPastTransFlowBytes=applPastTransFlowBytes, applTransactStreamPrfRspTimes=applTransactStreamPrfRspTimes, applElmtRunStatusTable=applElmtRunStatusTable, applPastChannelGroup=applPastChannelGroup, applPastTransStreamEntry=applPastTransStreamEntry, applPastTransFlowBytesLow=applPastTransFlowBytesLow, applPastFileSizeHigh=applPastFileSizeHigh, applTransactFlowEntry=applTransactFlowEntry, applTransactStreamInvCumTimes=applTransactStreamInvCumTimes, applPastConNearEndpoint=applPastConNearEndpoint, PYSNMP_MODULE_ID=applicationMib, applPastTransStreamInvokes=applPastTransStreamInvokes, applicationMibGroups=applicationMibGroups, applOpenChannelWriteFailures=applOpenChannelWriteFailures, applTransactStreamDescr=applTransactStreamDescr, applElmtOrSvcId=applElmtOrSvcId, applPastTransFlowReqRsp=applPastTransFlowReqRsp, applicationMib=applicationMib, applPastTransStreamPrfCumTimes=applPastTransStreamPrfCumTimes, applOpenFileTable=applOpenFileTable, applPastTransFlowTransLow=applPastTransFlowTransLow, applicationTransactGroup=applicationTransactGroup, applChannelGroup=applChannelGroup, applTransactStreamPerforms=applTransactStreamPerforms, applicationMibConformance=applicationMibConformance, applElmtRunControlReconfigure=applElmtRunControlReconfigure, applRunApplElmtToSrvInstEntry=applRunApplElmtToSrvInstEntry, applPastTransStreamUnitOfWork=applPastTransStreamUnitOfWork, applRunApplElmtToSrvInstTable=applRunApplElmtToSrvInstTable, applOpenConnectionApplication=applOpenConnectionApplication, applPastFileEntry=applPastFileEntry, applSrvInstToRunApplElmtEntry=applSrvInstToRunApplElmtEntry, applOpenConnectionNearEndpoint=applOpenConnectionNearEndpoint, applOpenChannelLastReadTime=applOpenChannelLastReadTime, Unsigned64TC=Unsigned64TC, applPastTransStreamPerformsLow=applPastTransStreamPerformsLow, applElmtRunStatusOpenFiles=applElmtRunStatusOpenFiles, applTransactStreamPerformsLow=applTransactStreamPerformsLow, applTransactStreamPrfCumTimes=applTransactStreamPrfCumTimes, applSrvInstQual=applSrvInstQual, applElmtRunControlTable=applElmtRunControlTable, applElmtRunStatusEntry=applElmtRunStatusEntry, applPastChannelOpenTime=applPastChannelOpenTime, applPastTransFlowTime=applPastTransFlowTime, applOpenFileSizeHigh=applOpenFileSizeHigh, applOpenConnectionTable=applOpenConnectionTable, applPastChannelReadReqsLow=applPastChannelReadReqsLow, applPastTransStreamTable=applPastTransStreamTable, applPastChannelIndex=applPastChannelIndex, applTransactFlowTable=applTransactFlowTable, applTransactKindTable=applTransactKindTable, applElmtRunStatusHeapUsage=applElmtRunStatusHeapUsage, applTransactionStreamEntry=applTransactionStreamEntry)
