#
# PySNMP MIB module SCSI-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/SCSI-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:27:43 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( OctetString, Integer, ObjectIdentifier, ) = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, ObjectIdentity, NotificationType, Gauge32, Counter32, Integer32, ModuleIdentity, iso, Unsigned32, Bits, MibIdentifier, Counter64, IpAddress, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2", "ObjectIdentity", "NotificationType", "Gauge32", "Counter32", "Integer32", "ModuleIdentity", "iso", "Unsigned32", "Bits", "MibIdentifier", "Counter64", "IpAddress")
( TimeStamp, RowStatus, RowPointer, StorageType, AutonomousType, TruthValue, DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "RowPointer", "StorageType", "AutonomousType", "TruthValue", "DisplayString", "TextualConvention")
scsiMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 139)).setRevisions(("2006-03-30 00:00",))
if mibBuilder.loadTexts: scsiMIB.setLastUpdated('200603300000Z')
if mibBuilder.loadTexts: scsiMIB.setOrganization('IETF')
if mibBuilder.loadTexts: scsiMIB.setContactInfo('\n          Michele Hallak-Stamler\n\n\n\n          Sanrad Intelligent Network\n          27 Habarzel Street\n          Tel Aviv, Israel\n          Phone: +972 3 7674809\n          E-mail: michele@sanrad.com\n\n          Yaron Lederman\n          Siliquent Technologies Ltd.\n          21 Etzel Street\n          Ramat Gan, Israel\n          Phone: +972 54 5308833\n          E-mail: yaronled@bezeqint.net\n\n          Mark Bakke\n          Postal: Cisco Systems, Inc\n          7900 International Drive, Suite 400\n          Bloomington, MN\n          USA 55425\n          E-mail: mbakke@cisco.com\n\n          Marjorie Krueger\n          Postal: Hewlett-Packard\n          8000 Foothills Blvd.\n          Roseville, CA 95747\n          E-mail: marjorie_krueger@hp.com\n\n          Keith McCloghrie\n          Cisco Systems, Inc.\n          Postal: 170 West Tasman Drive\n          San Jose, CA USA 95134\n          Phone: +1 408 526-5260\n          E-mail: kzm@cisco.com\n\n         ')
if mibBuilder.loadTexts: scsiMIB.setDescription('The SCSI MIB Module.\n          Copyright (C) The Internet Society (2006).  This version of\n          this MIB module is part of RFC 4455; see the RFC\n          itself for full legal notices.')
class ScsiLUN(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(2,2),ValueSizeConstraint(8,8),)
class ScsiIndexValue(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,4294967295)

class ScsiPortIndexValueOrZero(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)

class ScsiIndexValueOrZero(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4294967295)

class ScsiIdentifier(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,262)

class ScsiName(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,262)

class ScsiLuNameOrZero(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(8,8),)
class ScsiDeviceOrPort(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(SingleValueConstraint(1, 2, 3,))
    namedValues = NamedValues(("device", 1), ("port", 2), ("other", 3),)

class ScsiIdCodeSet(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,15)

class ScsiIdAssociation(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,3)

class ScsiIdType(Unsigned32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,15)

class ScsiIdValue(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)

class ScsiHrSWInstalledIndexOrZero(Integer32, TextualConvention):
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)

scsiNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 0))
scsiAdmin = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 1))
scsiObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2))
scsiConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3))
scsiTransportTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 1, 1))
scsiGeneral = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 1))
scsiInitiatorDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 2))
scsiTargetDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 3))
scsiLogicalUnit = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 4))
scsiTransportOther = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 1))
if mibBuilder.loadTexts: scsiTransportOther.setDescription('This identity identifies a transport that has no identity; it\n     might happen because the transport is unknown or might not\n     have been defined when this MIB module was created.')
scsiTransportSPI = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 2))
if mibBuilder.loadTexts: scsiTransportSPI.setDescription('This identity identifies a parallel SCSI transport.')
scsiTransportFCP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 3))
if mibBuilder.loadTexts: scsiTransportFCP.setDescription('This identity identifies a Fibre Channel Protocol for SCSI,\n     Second Version.')
scsiTransportSRP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 4))
if mibBuilder.loadTexts: scsiTransportSRP.setDescription('This identity identifies a protocol for transporting SCSI over\n     Remote Direct Memory Access (RDMA) interfaces, e.g., InfiniBand\n     (tm).')
scsiTransportISCSI = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 5))
if mibBuilder.loadTexts: scsiTransportISCSI.setDescription('This identity identifies an iSCSI transport.')
scsiTransportSBP = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 6))
if mibBuilder.loadTexts: scsiTransportSBP.setDescription('This identity identifies the Serial Bus Protocol 3.')
scsiTransportSAS = ObjectIdentity((1, 3, 6, 1, 2, 1, 139, 1, 1, 7))
if mibBuilder.loadTexts: scsiTransportSAS.setDescription('This identity identifies the Serial Attach SCSI Protocol.')
scsiInstanceTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 1), )
if mibBuilder.loadTexts: scsiInstanceTable.setDescription('A list of SCSI instances present on the system.\n     The SCSI instance is the top-level entity, to which everything\n     else belongs.  An SNMP agent could represent more than one\n     instance if it represents either a stack of devices, or virtual\n     partitions of a larger device, or a host running multiple SCSI\n     implementations from different vendors.')
scsiInstanceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"))
if mibBuilder.loadTexts: scsiInstanceEntry.setDescription('An entry (row) containing management information applicable to\n     a particular SCSI instance.')
scsiInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiInstIndex.setDescription('This object represents an arbitrary integer used to uniquely\n     identify a particular SCSI instance.')
scsiInstAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstAlias.setDescription('This object represents an administrative string, configured by\n     the administrator.  It can be a zero-length string.')
scsiInstSoftwareIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 3), ScsiHrSWInstalledIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstSoftwareIndex.setDescription("If this management instance corresponds to an installed\n     software module, then this object's value is the value of the\n     hrSWInstalledIndex of that module.  If there is no\n     correspondence to an installed software module (or no module\n     that has an hrSWInstalledIndex value), then the value of this\n     object is zero.")
scsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiInstVendorVersion.setDescription('This object represents a text string set by the manufacturer\n     describing the version of this instance.  The format of this\n     string is determined solely by the manufacturer and is for\n     informational purposes only.  It is unrelated to the SCSI\n     specification version numbers.')
scsiInstScsiNotificationsEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstScsiNotificationsEnable.setDescription('This object indicates whether notifications defined in this\n      MIB module will be generated.')
scsiInstStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiInstStorageType.setDescription("This object specifies the memory realization for\n           this SCSI entity.\n           Specifically, each row in the following tables:\n\n                      scsiIntrDevTable\n                      scsiDscTgtTable\n                      scsiAuthorizedIntrTable\n                      scsiLunMapTable\n\n           has a StorageType as specified by the instance of\n           this object that is INDEXed by the same value of\n           scsiInstIndex.\n           This value of this object is also used to indicate\n           the persistence across reboots of writable values in\n           its row of the scsiInstanceTable.\n           Conceptual rows having the value 'permanent' need not\n           allow write-access to any columnar objects in the row,\n           nor to any object belonging to a table whose entry is\n           INDEXed by the same value of scsiInstIndex.")
scsiDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 2), )
if mibBuilder.loadTexts: scsiDeviceTable.setDescription('A list of SCSI devices contained in each of the SCSI manageable\n     instances that this agent is reporting.')
scsiDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiDeviceEntry.setDescription('An entry (row) containing management information applicable to\n     a particular SCSI device included in this SCSI manageable\n     instance identifiable by the value of scsiInstIndex.')
scsiDeviceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDeviceIndex.setDescription('This object is an arbitrary integer used to uniquely identify\n     a particular device within a particular SCSI instance.')
scsiDeviceAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiDeviceAlias.setDescription('This object contains an administrative name for this device.\n     If no name is assigned, the value of this object is the\n     zero-length string.\n     The StorageType of this object is specified by the instance\n     of scsiInstStorageType that is INDEXed by the same value of\n     scsiInstIndex.')
scsiDeviceRole = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDeviceRole.setDescription('This object determines whether this device is acting as a\n     SCSI initiator device, or as a SCSI target device, or as both.')
scsiDevicePortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDevicePortNumber.setDescription('This object represents the number of ports contained in this\n     device.')
scsiPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 3), )
if mibBuilder.loadTexts: scsiPortTable.setDescription('A list of SCSI ports for each SCSI device in each instance.')
scsiPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiPortEntry.setDescription('An entry (row) containing management information applicable to\n     a particular SCSI port of a particular SCSI device in a\n     particular SCSI instance.')
scsiPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiPortIndex.setDescription('An arbitrary integer used to uniquely identify a particular\n     port of a given device within a particular SCSI instance.')
scsiPortRole = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("target", 0), ("initiator", 1),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortRole.setDescription('This object indicates whether this port is acting as a\n     SCSI initiator port, or as a SCSI target port or as both.')
scsiPortTransportPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortTransportPtr.setDescription('This object is a pointer to the corresponding row in the\n     scsiTransportTable.  This row contains information on the\n     transport such as transport type and port name.')
scsiPortBusyStatuses = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiPortBusyStatuses.setDescription('This object represents the number of port busy statuses sent or\n     received by this port.  Note: Initiator ports only receive busy\n     status and SCSI target ports only send busy status.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiTransportTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 1, 5), )
if mibBuilder.loadTexts: scsiTransportTable.setDescription('This table contains the device transport-specific information\n     for each transport connected to each device in\n     scsiDeviceTable.')
scsiTransportEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiTransportIndex"))
if mibBuilder.loadTexts: scsiTransportEntry.setDescription('An entry (row) containing parameters applicable to a transport\n     used by a particular device of a particular SCSI manageable\n     instance.')
scsiTransportIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiTransportIndex.setDescription('An arbitrary integer used to uniquely identify a particular\n     transport within a given device within a particular SCSI\n     instance.')
scsiTransportType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportType.setDescription('This object identifies the transport type of this row of the\n     transport table.  For example, if this object has the value\n     scsiTransportFCP, then the identified transport is FCP.')
scsiTransportPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportPointer.setDescription("This object represents a pointer to a conceptual row in a\n     'transport' MIB module allowing a manager to get useful\n     information for the transport described by this entry.\n     For example, if the transport of this device is iSCSI, this\n     object will point to the iSCSI Instance of the iSCSI MIB\n     module.\n     If there is no MIB for this transport, this object has the\n     value 0.0.")
scsiTransportDevName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 1, 5, 1, 4), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTransportDevName.setDescription('This object represents the name of this device in one of the\n     format(s) appropriate for this type of transport.')
scsiIntrDevTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 1), )
if mibBuilder.loadTexts: scsiIntrDevTable.setDescription('This table contains information for each local SCSI initiator\n     device in each instance.')
scsiIntrDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiIntrDevEntry.setDescription('An entry (row) containing information applicable to a SCSI\n     initiator device within a particular SCSI instance.')
scsiIntrDevTgtAccessMode = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3,))).clone(namedValues=NamedValues(("unknown", 1), ("autoEnable", 2), ("manualEnable", 3),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiIntrDevTgtAccessMode.setDescription('This object controls whether or not a discovered SCSI target\n     device is immediately authorized:\n         - autoEnable (2) means that when a SCSI initiator device\n         discovers a SCSI target device, it can use it immediately.\n         - manualEnable (3) means that the SCSI initiator device\n         must wait for an operator to set scsiIntrDscTgtConfigured\n         = true before it is authorized.\n     The StorageType of this object is specified by the instance\n     of scsiInstStorageType that is INDEXed by the same value of\n     scsiInstIndex.')
scsiIntrDevOutResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrDevOutResets.setDescription('This object represents the total number of times that this SCSI\n     initiator device has issued\n     - a LOGICAL UNIT RESET or TARGET RESET task management request,\n       or\n     - any other SCSI transport protocol-specific action or event\n       that causes a Logical Unit Reset or a Hard Reset at one or\n       more SCSI target ports ([SAM2] chapters 5.9.6, 5.9.7).\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiIntrPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 2), )
if mibBuilder.loadTexts: scsiIntrPortTable.setDescription('This table contains all the SCSI initiator ports for each\n     local SCSI initiator or target/initiator devices in each SCSI\n     instance.')
scsiIntrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiIntrPortEntry.setDescription('An entry (row) containing information applicable to a\n     particular SCSI initiator port of a particular SCSI device\n     within a SCSI instance.')
scsiIntrPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortName.setDescription('This object represents the name of the port assigned for use\n     by the SCSI protocol.  The format will depend on the type of\n     transport this port is using.')
scsiIntrPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortIdentifier.setDescription('This object represents the identifier of the port in one of\n     the format(s) appropriate for the type of transport in use.')
scsiIntrPortOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortOutCommands.setDescription('This object represents the number of commands sent by this\n     SCSI initiator port.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiIntrPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortWrittenMegaBytes.setDescription('This object represents the amount of data in megabytes sent\n     by this SCSI initiator port.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiIntrPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortReadMegaBytes.setDescription('This object represents the amount of data in megabytes\n     received by this SCSI initiator port.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiIntrPortHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIntrPortHSOutCommands.setDescription('This object represents the number of commands sent by this\n     SCSI initiator port.  This object provides support for systems\n     that can quickly generate a large number of commands because\n     they run at high speed.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiRemoteTgtDev = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 2, 3))
scsiDscTgtTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1), )
if mibBuilder.loadTexts: scsiDscTgtTable.setDescription('This table includes all the remote (not in the local system)\n     SCSI target ports that are authorized to attach to each local\n     SCSI initiator port of this SCSI instance.')
scsiDscTgtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"))
if mibBuilder.loadTexts: scsiDscTgtEntry.setDescription('Each entry (row) contains information about the SCSI target\n     device or port to which this SCSI initiator port (or all SCSI\n     initiator ports in the SCSI initiator entry indexed by\n     scsiInstIndex, scsiDeviceIndex) will attempt to attach.  The\n     entry is either for all local ports (if scsiDscTgtIntrPortIndex\n     is zero) or only for the specific SCSI initiator port\n     identified by scsiDscTgtIntrPortIndex.  Note that if an entry in\n     this table is deleted, any corresponding entries in the\n     scsiDscLunsTable must be deleted as well.\n     The StorageType of a row in this table is specified by the\n     instance of scsiInstStorageType that is INDEXed by the same\n     value of scsiInstIndex.')
scsiDscTgtIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiDscTgtIntrPortIndex.setDescription('This object relates to a particular local device within a\n     particular SCSI instance and specifies\n     - the index of the local SCSI initiator port,\n     - or zero, if this entry refers to the local device and\n     therefore refers to all the local SCSI initiator ports.')
scsiDscTgtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscTgtIndex.setDescription('This object is an arbitrary integer used to uniquely identify\n     a particular SCSI target device either discovered by, or\n     configured for use with, one or more ports scsiDscTgtName of\n     a particular device within a particular SCSI instance.')
scsiDscTgtDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtDevOrPort.setDescription('This object indicates whether this entry describes a\n     configured SCSI target device name (and applies to all ports\n     on the identified SCSI target device) or an individual SCSI\n     target port.')
scsiDscTgtName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtName.setDescription('This object represents the name of this configured or\n     discovered SCSI target device or port depending on the value\n     of scsiDscTgtDevOrPort.')
scsiDscTgtConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtConfigured.setDescription('This object means\n      -true(1): this entry has been configured by an administrator.\n      -false(2): this entry has been added from a discovery\n     mechanism (e.g., SendTargets, SLP, iSNS).\n     An administrator can modify this value from false to true.')
scsiDscTgtDiscovered = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtDiscovered.setDescription('This object means\n      -true(1): this entry has been discovered by the SCSI instance\n      as result of an automatic discovery process.\n      -false(2):this entry has been added by manual configuration.\n     This entry is read-only because an administrator cannot change\n     it.\n     Note that it is an implementation decision to determine how\n     long to retain a row with configured=false, such as when the\n     SCSI target device is no longer visible/accessible to the local\n     SCSI initiator device.')
scsiDscTgtInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtInCommands.setDescription('This object represents the number of commands received from\n      this SCSI target port or device.\n      Discontinuities in the value of this counter can occur at re-\n      initialization of the management system, and at other times as\n      indicated by the value of scsiDscTgtLastCreation.')
scsiDscTgtWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtWrittenMegaBytes.setDescription('This object represents the amount of megabytes of data sent as\n     the result of WRITE commands to this SCSI target port or device.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiDscTgtLastCreation.')
scsiDscTgtReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtReadMegaBytes.setDescription('This object represents the amount of megabytes received as the\n     result of READ commands to this SCSI target port or device.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiDscTgtLastCreation.')
scsiDscTgtHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtHSInCommands.setDescription('This object represents the number of commands received by this\n     SCSI target port or device.  This object provides support for\n     system that can quickly generate a large number of commands\n     because they run at high speed.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiDscTgtLastCreation.')
scsiDscTgtLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscTgtLastCreation.setDescription('This object represents the value of sysUpTime when this row\n     was created.')
scsiDscTgtRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiDscTgtRowStatus.setDescription("This object allows an administrator to configure dynamically a\n     new entry in this table via SNMP or eventually delete it.\n     An administrator is not allowed to delete an entry for which\n     the value of the object scsiIntrDscTgtDiscovered is equal to\n     true.\n     Note that when an entry in this table is deleted, then any\n     corresponding entries in the scsiDscLunsTable must also be\n     automatically deleted.\n\n     A newly created row cannot be made active until a value has\n     been set for scsiDscTgtName.  In this case, the value of the\n     corresponding instance of the scsiDscTgtRowStatus column will\n     stay 'notReady'.\n     The RowStatus TC [RFC2579] requires that this DESCRIPTION\n     clause states under which circumstances other objects in this\n     row can be modified:\n     The value of this object has no effect on whether other objects\n     in this conceptual row can be modified.")
scsiDscLunTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2), )
if mibBuilder.loadTexts: scsiDscLunTable.setDescription('This table includes all the remote (not in the local system)\n     logical unit numbers (LUNs) discovered via each local SCSI\n     initiator port of each local device within a particular SCSI\n     instance.')
scsiDscLunEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"))
if mibBuilder.loadTexts: scsiDscLunEntry.setDescription('An entry (row) represents a discovered LUN at a particular\n     SCSI target device (scsiDscTgtIndex), where the LUN was\n     discovered by a particular local SCSI initiator device within a\n     particular SCSI instance, possibly via a particular local\n     SCSI initiator port.\n     Note that when an entry in the scsiDscTgtTable is deleted,\n     all corresponding entries in this table should automatically be\n     deleted.')
scsiDscLunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIndex.setDescription('This object is an arbitrary integer used to uniquely identify\n     a particular LUN discovered by a particular SCSI initiator port\n     or a particular SCSI initiator device within a particular SCSI\n     instance.\n     Entries in the scsiDscLunIdTable are associated with a LUN by\n     having the value of this object in their INDEX.')
scsiDscLunLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 2, 1, 2), ScsiLUN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunLun.setDescription('This object contains the Logical Unit Number (LUN) of the\n     discovered logical unit.')
scsiDscLunIdTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3), )
if mibBuilder.loadTexts: scsiDscLunIdTable.setDescription('This table includes all the known LU identifiers of the remote\n     (not in the local system) logical units discovered via each\n     local SCSI initiator port or device of this SCSI instance.')
scsiDscLunIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiDscTgtIntrPortIndex"), (0, "SCSI-MIB", "scsiDscTgtIndex"), (0, "SCSI-MIB", "scsiDscLunIndex"), (0, "SCSI-MIB", "scsiDscLunIdIndex"))
if mibBuilder.loadTexts: scsiDscLunIdEntry.setDescription('An entry (row) represents the LU identifier of a discovered\n     LUN at a particular SCSI target device (scsiDscTgtIndex), where\n     the LUN was discovered by a particular local SCSI initiator\n     device within a particular SCSI instance, possibly via a\n     particular local SCSI initiator port.')
scsiDscLunIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiDscLunIdIndex.setDescription('This object is an arbitrary integer used to uniquely identify\n     a particular LUN identifier discovered by each SCSI initiator\n     device or particular SCSI initiator port within a particular\n     SCSI instance.')
scsiDscLunIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdCodeSet.setDescription("This object specifies the code set in use with this\n     identifier.  The value is represented in the same format as\n     is contained in the identifier's Identification Descriptor\n     within the logical unit's Device Identification Page.")
scsiDscLunIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdAssociation.setDescription("This object specifies what the identifier is associated with\n     (e.g., with the addressed physical/logical device or with a\n     particular port).  The value is represented in the same format\n     as is contained in the identifier's Identification Descriptor\n     within the logical unit's Device Identification Page.")
scsiDscLunIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdType.setDescription("This object specifies the type of the identifier.\n     The value is represented in the same format as is contained in\n     the identifier's Identification Descriptor within the logical\n     unit's Device Identification Page.")
scsiDscLunIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 3, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiDscLunIdValue.setDescription("This object represents the actual value of this identifier.\n     The format is defined by the objects scsiDscLunIdCodeSet,\n     scsiDscLunIdAssociation, scsiDscLunIdType.\n     The value is represented in the same format as is contained in\n     the identifier's Identification Descriptor within the logical\n     unit's Device Identification Page.")
scsiAttTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4), )
if mibBuilder.loadTexts: scsiAttTgtPortTable.setDescription('This table includes all the remote (not in the local system)\n     SCSI target ports that are currently attached to each local\n     SCSI initiator port of this SCSI instance.')
scsiAttTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttTgtPortIndex"))
if mibBuilder.loadTexts: scsiAttTgtPortEntry.setDescription('An entry (row) represents a remote SCSI target port\n     (scsiAttTgtPortIndex) currently attached to a particular\n     SCSI initiator port (scsiPortIndex) of a particular SCSI\n     initiator device within a particular SCSI instance.')
scsiAttTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttTgtPortIndex.setDescription('An arbitrary integer used to uniquely identify a particular\n     SCSI target currently attached to a particular SCSI initiator\n     port of a particular SCSI initiator device within a particular\n     SCSI instance.')
scsiAttTgtPortDscTgtIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortDscTgtIdx.setDescription('This object contains the value of the scsiDscTgtIntrPortIndex\n     index variable for the row in the scsiDscTgtTable representing\n     this currently attached SCSI target port.  If the currently\n     attached SCSI target port is not represented in the\n     scsiDscTgtTable, then the value of this object is zero.')
scsiAttTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortName.setDescription('This object contains the name of the attached SCSI target\n     port.')
scsiAttTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 2, 3, 4, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttTgtPortIdentifier.setDescription('This object contains the identifier of the attached SCSI\n     target port.')
scsiTgtDevTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 1), )
if mibBuilder.loadTexts: scsiTgtDevTable.setDescription('This table contains information about each local SCSI target\n     device.')
scsiTgtDevEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"))
if mibBuilder.loadTexts: scsiTgtDevEntry.setDescription('An entry (row) containing information applicable to a\n     particular local SCSI target device within a particular SCSI\n     instance.')
scsiTgtDevNumberOfLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNumberOfLUs.setDescription('This object is the number of logical units accessible via this\n     local SCSI target device.')
scsiTgtDeviceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("broken", 3), ("readying", 4), ("abnormal", 5), ("nonAddrFailure", 6), ("nonAddrFailReadying", 7), ("nonAddrFailAbnormal", 8),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDeviceStatus.setDescription('This object represents the status of this SCSI device,\n     summarizing the state of both the addressable devices (i.e.,\n     the logical units) and the non-addressable devices within this\n     SCSI device:\n          - unknown(1): This value is used when the status cannot be\n          determined\n          - available(2): All addressable and non-addressable\n          devices within the SCSI device are fully operational (i.e.,\n          no logical units have an abnormal status).\n          - broken(3): The SCSI device is not operational and cannot\n          be made operational without external intervention.\n          - readying(4): One or more logical units within the SCSI\n          device are being initialized and access to the SCSI device\n          is temporarily limited (i.e., one or more of the logical\n          units have a readying status).\n          - abnormal(5): One or more addressable devices within the\n          SCSI device are indicating a status other than available;\n          nevertheless, the SCSI device is operational (i.e., one or\n          more of the logical units have an abnormal status).\n          - nonAddrFailure(6): One or more non-addressable devices\n          within the SCSI device have failed; nevertheless, the SCSI\n          device is operational (i.e., no logical units have an\n          abnormal or readying status).\n\n\n\n          - nonAddrFailReadying(7): One or more non-addressable\n          devices within the SCSI device have failed; nevertheless,\n          one or more logical units within the SCSI device are being\n          initialized and access to the SCSI device is temporarily\n          limited.\n          - nonAddrFailAbnormal(8): One or more non-addressable\n          devices within the SCSI device have failed and one or more\n          addressable devices within the SCSI device are indicating a\n          status other than available; however, the SCSI device is\n          operational.\n     ')
scsiTgtDevNonAccessibleLUs = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevNonAccessibleLUs.setDescription('This object is the number of logical units existing but not\n     currently accessible via this local SCSI target device.')
scsiTgtDevResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtDevResets.setDescription('This object counts the number of hard resets encountered\n     by this SCSI target device.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiTgtPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 2), )
if mibBuilder.loadTexts: scsiTgtPortTable.setDescription('This table includes all the local SCSI target ports of all the\n     local SCSI target devices.')
scsiTgtPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"))
if mibBuilder.loadTexts: scsiTgtPortEntry.setDescription('An entry (row) containing information applicable to a\n     particular local SCSI target port of a particular local SCSI\n     target device within a particular SCSI instance.')
scsiTgtPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 1), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortName.setDescription('This object represents the name of the port assigned for use\n     in the SCSI protocol.')
scsiTgtPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 2), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortIdentifier.setDescription('This object represents the identifier of the port in one of\n     the format(s) appropriate for the type of transport.')
scsiTgtPortInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 3), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortInCommands.setDescription('This object represents the number of commands received by this\n     SCSI target port.\n\n\n\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiTgtPortWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 4), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortWrittenMegaBytes.setDescription('This object represents the amount of data written in megabytes\n     by this SCSI target port.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiTgtPortReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 5), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortReadMegaBytes.setDescription('This object represents the amount of data read in megabytes by\n     this SCSI target port.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiTgtPortHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 2, 1, 6), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTgtPortHSInCommands.setDescription('This object represents the number of commands received.  This\n     object provides support for systems that can quickly generate a\n     large number of commands because they run at high speed.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system.')
scsiRemoteIntrDev = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 2, 3, 3))
scsiAuthorizedIntrTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1), )
if mibBuilder.loadTexts: scsiAuthorizedIntrTable.setDescription('This table includes all the authorized SCSI initiator devices\n     or ports that may attach a SCSI target device\n     (ScsiAuthIntrTgtPortIndex = 0) or port (ScsiAuthIntrTgtPortIndex\n     different than 0) of the local SCSI instance.  Statistics are\n     kept for each such authorization; thus, the authorizations\n     should be configured in the manner that will cause the desired\n     set of statistics to be collected and that will determine the\n     correct LUN map.')
scsiAuthorizedIntrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiAuthIntrTgtPortIndex"), (0, "SCSI-MIB", "scsiAuthIntrIndex"))
if mibBuilder.loadTexts: scsiAuthorizedIntrEntry.setDescription('An entry (row) represents a remote SCSI initiator port or\n     remote SCSI initiator device that may attach to the local SCSI\n     target port or device within a particular SCSI instance.\n     The StorageType of a row in this table is specified by the\n     instance of scsiInstStorageType that is INDEXed by the same\n     value of scsiInstIndex.')
scsiAuthIntrTgtPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 1), ScsiPortIndexValueOrZero())
if mibBuilder.loadTexts: scsiAuthIntrTgtPortIndex.setDescription('This object contains either the index of the port or zero, to\n     indicate any port, on the particular local SCSI target device.')
scsiAuthIntrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 2), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAuthIntrIndex.setDescription('This object is an arbitrary integer used to uniquely identify\n     a SCSI initiator device or port that is authorized to attach\n     to a particular local SCSI target device or port of a particular\n     SCSI instance.')
scsiAuthIntrDevOrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 3), ScsiDeviceOrPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrDevOrPort.setDescription('This object specifies whether this entry refers to a remote\n     SCSI initiator port or to a SCSI initiator device.\n     A value of device(1) means that the authorized remote initiator\n     is a SCSI initiator device and includes all of its ports.\n     A value of port(2) means that the authorized remote initiator\n     is a SCSI initiator port.')
scsiAuthIntrName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 4), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrName.setDescription('This object represents the name of the remote SCSI initiator\n     device or port authorized by this row.')
scsiAuthIntrLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 5), ScsiIndexValueOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrLunMapIndex.setDescription('This object identifies the set of entries in the\n     scsiLunMapTable for which scsiLunMapIndex has the same value as\n     the value of this object.  The identified set of entries\n\n\n\n     constitutes the LUN map to be used for accessing logical units\n     when the remote SCSI initiator port or device corresponding to\n     this entry is attached to any local SCSI target port or device\n     corresponding to this entry.\n     Note that this object has a value of zero if this entry should\n     use the default LUN map.')
scsiAuthIntrAttachedTimes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 6), Counter32()).setUnits('Times').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrAttachedTimes.setDescription('This object indicates the number of times that this remote\n     SCSI initiator device or port has transitioned from unattached\n     to attached to this local SCSI target device or port.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiAuthIntrLastCreation.')
scsiAuthIntrOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 7), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrOutCommands.setDescription('This object indicates the number of commands that the remote\n     SCSI initiator device or port corresponding to this entry has\n     sent to the local SCSI target device or port corresponding to\n     this entry.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiAuthIntrLastCreation.')
scsiAuthIntrReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 8), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrReadMegaBytes.setDescription('This object indicates the amount of data in megabytes that\n     the remote SCSI initiator device or port corresponding to this\n     entry has read from the local SCSI target device or port\n     corresponding to this entry.\n     Discontinuities in the value of this counter can occur at re-\n\n\n\n     initialization of the management system, and at other times as\n     indicated by the value of scsiAuthIntrLastCreation.')
scsiAuthIntrWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 9), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrWrittenMegaBytes.setDescription('This object indicates the amount of data in megabytes that the\n     remote SCSI initiator device or port corresponding to this\n     entry has written to the local SCSI target device or port\n     corresponding to this entry.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiAuthIntrLastCreation.')
scsiAuthIntrHSOutCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 10), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrHSOutCommands.setDescription('This object represents the number of commands sent by the\n     remote SCSI initiator device or port corresponding to this\n     entry to the local SCSI target device or port corresponding to\n     this entry.  This object provides support for systems that can\n     quickly generate a large number of commands because they run at\n     high speed.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiAuthIntrLastCreation.')
scsiAuthIntrLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAuthIntrLastCreation.setDescription('This object indicates the value of sysUpTime when this row was\n     last created.')
scsiAuthIntrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiAuthIntrRowStatus.setDescription("This object allows an administrator to create or delete this\n     entry.\n     A newly created row cannot be made active until a value has\n     been set for scsiAuthIntrName.  In this case, the value of the\n     corresponding instance of the scsiAuthIntrRowStatus column will\n     stay 'notReady'.\n     The RowStatus TC [RFC2579] requires that this DESCRIPTION\n     clause states under which circumstances other objects in this\n     row can be modified:\n     The value of this object has no effect on whether other objects\n     in this conceptual row can be modified.")
scsiAttIntrPortTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2), )
if mibBuilder.loadTexts: scsiAttIntrPortTable.setDescription('This table includes all the remote SCSI initiator ports that\n     are currently attached to a local SCSI target port of all local\n     devices within all SCSI instances.')
scsiAttIntrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiPortIndex"), (0, "SCSI-MIB", "scsiAttIntrPortIndex"))
if mibBuilder.loadTexts: scsiAttIntrPortEntry.setDescription('An entry (row) represents a remote SCSI initiator port\n     currently attached to a particular local SCSI target port of a\n     particular SCSI target device of a particular SCSI instance.')
scsiAttIntrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiAttIntrPortIndex.setDescription('This object represents an arbitrary integer used to uniquely\n     identify a particular attached remote initiator port to a\n     particular SCSI target port within a particular SCSI target\n     device within a particular SCSI instance.')
scsiAttIntrPortAuthIntrIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 2), ScsiIndexValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortAuthIntrIdx.setDescription('This object is the corresponding index in the\n     scsiAuthorizedIntrTable for this current attached remote\n     SCSI initiator device or zero if this remote attached SCSI\n     initiator device is not configured in that table.')
scsiAttIntrPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 3), ScsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortName.setDescription('This object represents the name of the remote SCSI initiator\n     device attached to this local SCSI target port.')
scsiAttIntrPortIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 3, 3, 2, 1, 4), ScsiIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiAttIntrPortIdentifier.setDescription('This object represents the identifier of the remote SCSI\n     initiator device attached to this local SCSI target port.')
scsiLuTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 1), )
if mibBuilder.loadTexts: scsiLuTable.setDescription('This table contains the logical units exposed by local SCSI\n     target devices.\n\n\n\n     It includes attributes for the World Wide Name (WWN),\n     scsiLuVendorId, scsiLuProductId, and scsiLuRevisionId, which may\n     also appear in the scsiLuIdTable.  If an implementation exposes\n     a WWN as a LuIdTable entry, it must match the scsiLuWwnName in\n     this table.  If an implementation exposes a (vendor, product,\n     revision) identifier as an LuIdTable entry, each of these fields\n     must match the scsiLuVendorId, scsiLuProductId, and\n     scsiLuRevisionId attributes in this table.')
scsiLuEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"))
if mibBuilder.loadTexts: scsiLuEntry.setDescription('An entry (row) contains information applicable to a particular\n     logical unit of a particular local SCSI target device within a\n     particular SCSI instance.')
scsiLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIndex.setDescription('This object represents an arbitrary integer used to uniquely\n     identify a particular logical unit within a particular SCSI\n     target device within a particular SCSI instance.')
scsiLuDefaultLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 2), ScsiLUN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuDefaultLun.setDescription('This object represents the default Logical Unit Number (LUN)\n     for this logical unit; if a SCSI initiator device has not been\n     configured to view this logical unit via an entry in the\n     ScsiLunMapTable, the LU will be visible as scsiLuDefaultLun.\n     If this logical unit does not have a default LUN, it will only\n     be visible if specified via the ScsiLunMapTable, and this\n     object will contain a zero-length string.')
scsiLuWwnName = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 3), ScsiLuNameOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWwnName.setDescription('This object represents the World Wide Name of this LU that is\n     the device identifier of the Vital Product Data (VPD) page name;\n     if there is no WWN for this LU, this object will contain a\n     zero-length string.  If there is more than one identifier, they\n     will be listed in the scsiLuIdTable and this object will contain\n     a zero-length string.')
scsiLuVendorId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuVendorId.setDescription('This object represents a string identifying the vendor of this\n     LU as reported in the Standard INQUIRY data.')
scsiLuProductId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuProductId.setDescription('This object represents a string identifying the product for\n     this LU as reported in the Standard INQUIRY data.')
scsiLuRevisionId = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuRevisionId.setDescription('This object represents a string defining the product revision\n     of this LU as reported in the Standard INQUIRY data.')
scsiLuPeripheralType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuPeripheralType.setDescription('This object is the value returned by SCSI Standard INQUIRY\n     data.  It can be: direct-access device, sequential-access\n     device, printer, communication device and so on.\n     The values that can be returned here are defined in SCSI\n     Primary Commands -2.')
scsiLuStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6,))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 3), ("broken", 4), ("readying", 5), ("abnormal", 6),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuStatus.setDescription('This object represents the status of this logical unit:\n       - unknown(1): The status of this logical unit cannot be\n       determined.\n       - available(2): The logical unit is fully operational (i.e.,\n       accepts media access SCSI commands and has no state\n       information to report).\n       - notAvailable(3): The logical unit is capable of being\n       supported but is not available (i.e., no logical unit is\n       currently present or the logical unit is present but not\n       configured for use).\n       - broken(4): The logical unit has failed and cannot respond\n       to SCSI commands.\n       - readying(5): The logical unit is being initialized and\n\n\n\n       access is temporarily limited.\n       - abnormal(6): The logical unit has state information\n       available that indicates it is operating with limits.  The\n       scsiLuState indicates what those limits are.\n     ')
scsiLuState = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 9), Bits().clone(namedValues=NamedValues(("dataLost", 0), ("dynamicReconfigurationInProgress", 1), ("exposed", 2), ("fractionallyExposed", 3), ("partiallyExposed", 4), ("protectedRebuild", 5), ("protectionDisabled", 6), ("rebuild", 7), ("recalculate", 8), ("spareInUse", 9), ("verifyInProgress", 10),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuState.setDescription('This object represents the state of a logical unit and its\n     meaning according to the bit position:\n          0 Data lost: Within the logical unit data has been lost.\n          1 Dynamic reconfiguration in progress: The logical unit is\n               being reconfigured.  In this state all data is still\n               protected.\n          2 Exposed: Within the logical unit data is not protected.\n               In this state all data is still valid; however, loss\n               of data or data availability is unavoidable in the\n               event of a failure.\n          3 Fractionally exposed: Within the logical unit part of\n               the data is not protected.  In this state all data is\n               still valid; however, a failure may cause a loss of\n               data or a loss of data availability.\n          4 Partially exposed: Within the logical unit one or more\n               underlying storage devices have failed.  In this state\n               all data is still protected.\n          5 Protected rebuild: The logical unit is in the process of\n               a rebuild operation.  In this state all data is\n               protected.\n          6 Protection disabled: Within the logical unit the data\n\n\n\n               protection method has been disabled.\n               In this state all data is still valid; however,\n               loss of data or data availability is unavoidable\n               in the event of a failure.\n          7 Rebuild: The data protection method is in the process of\n               rebuilding data.  In this state data is not protected.\n          8 Recalculate: The logical unit is in the process of a\n               recalculate operation.\n          9 Spare in use: Within the logical unit a storage device\n               in full or part is being used to store data.  In this\n               state all data is still protected.\n          10 Verify in progress: Within the logical unit data is\n               being verified.')
scsiLuInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 10), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInCommands.setDescription('This object represents the number of commands received by this\n     logical unit.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiLuLastCreation.')
scsiLuReadMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuReadMegaBytes.setDescription('This object represents the amount of data in megabytes read\n     from this logical unit.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiLuLastCreation.')
scsiLuWrittenMegaBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 12), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuWrittenMegaBytes.setDescription('This object represents the amount of data in megabytes written\n     to this logical unit.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiLuLastCreation.')
scsiLuInResets = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 13), Counter32()).setUnits('resets').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuInResets.setDescription('This object represents the number of times that this logical\n     unit received\n     - a LOGICAL UNIT RESET or TARGET RESET task management request,\n     or\n     - any other SCSI transport protocol-specific action or event\n     that causes a Logical Unit Reset or a Hard Reset at a SCSI\n     target port of the containing device\n     ([SAM2] Chapters 5.9.6, 5.9.7).\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiLuLastCreation.')
scsiLuOutTaskSetFullStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuOutTaskSetFullStatus.setDescription('This object represents the number of Task Set full statuses\n     issued for this logical unit.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiLuLastCreation.')
scsiLuHSInCommands = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 15), Counter64()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuHSInCommands.setDescription('This object represents the number of commands received by this\n     logical unit.  This object provides support for systems that can\n     quickly generate a large number of commands because they run at\n     high speed.\n     Discontinuities in the value of this counter can occur at re-\n     initialization of the management system, and at other times as\n     indicated by the value of scsiLuLastCreation.')
scsiLuLastCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 1, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuLastCreation.setDescription('This object indicates the value of sysUpTime when this row was\n     last created.')
scsiLuIdTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 2), )
if mibBuilder.loadTexts: scsiLuIdTable.setDescription('A table of identifiers for all logical units exposed by the\n      local SCSI target device.')
scsiLuIdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLuIndex"), (0, "SCSI-MIB", "scsiLuIdIndex"))
if mibBuilder.loadTexts: scsiLuIdEntry.setDescription('An entry (row) containing information applicable to a\n     particular identifier for a particular logical unit of a\n     particular SCSI target device within a particular SCSI\n     instance.')
scsiLuIdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLuIdIndex.setDescription('This object represents an arbitrary integer used to uniquely\n     identify a particular LU identifier within a particular logical\n     unit within a particular SCSI target device within a particular\n     SCSI instance.')
scsiLuIdCodeSet = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 2), ScsiIdCodeSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdCodeSet.setDescription("This object specifies the code set in use with this\n     identifier.  The value is represented in the same format as is\n     contained in the identifier's Identification Descriptor within\n     the logical unit's Device Identification Page.")
scsiLuIdAssociation = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 3), ScsiIdAssociation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdAssociation.setDescription("This object specifies what the identifier is associated with\n     (e.g., with the addressed physical/logical device or with a\n     particular port).  The value is represented in the same format\n     as is contained in the identifier's Identification Descriptor\n     within the logical unit's Device Identification Page.")
scsiLuIdType = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 4), ScsiIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdType.setDescription("This object specifies the type of the identifier.\n\n\n\n     The value is represented in the same format as is contained in\n     the identifier's Identification Descriptor within the logical\n     unit's Device Identification Page.")
scsiLuIdValue = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 2, 1, 5), ScsiIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLuIdValue.setDescription("This object represents the actual value of this identifier.\n     The format is defined by the objects scsiLuIdCodeSet,\n     scsiLuIdAssociation, scsiLuIdType.\n     The value is represented in the same format as is contained in\n     the identifier's Identification Descriptor within the logical\n     unit's Device Identification Page.")
scsiLunMapTable = MibTable((1, 3, 6, 1, 2, 1, 139, 2, 4, 3), )
if mibBuilder.loadTexts: scsiLunMapTable.setDescription('This table provides the ability to present a logical unit\n     using different Logical Unit Numbers for different SCSI\n     initiator devices.\n     This table provides a mapping between a logical unit and a\n     Logical Unit Number, and can be referenced by a\n     ScsiAuthorizedIntrEntry to specify the LUN map for that\n     initiator.')
scsiLunMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1), ).setIndexNames((0, "SCSI-MIB", "scsiInstIndex"), (0, "SCSI-MIB", "scsiDeviceIndex"), (0, "SCSI-MIB", "scsiLunMapIndex"), (0, "SCSI-MIB", "scsiLunMapLun"))
if mibBuilder.loadTexts: scsiLunMapEntry.setDescription('An entry containing information about the mapping of a\n\n\n\n     particular logical unit to a particular LUN.  The set of\n     entries that all have the same values of scsiInstIndex,\n     scsiDeviceIndex and scsiLunMapIndex constitutes a LUN map\n     within a particular SCSI instance.\n     The StorageType of a row in this table is specified by\n     the instance of scsiInstStorageType that is INDEX-ed by\n     the same value of scsiInstIndex.')
scsiLunMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 1), ScsiIndexValue())
if mibBuilder.loadTexts: scsiLunMapIndex.setDescription('This object represents an arbitrary integer used to uniquely\n     identify a particular LunMap within a particular SCSI target\n     device within a particular SCSI instance.')
scsiLunMapLun = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 2), ScsiLUN())
if mibBuilder.loadTexts: scsiLunMapLun.setDescription('This object specifies the Logical Unit Number, to which a\n     logical unit is mapped by this row.')
scsiLunMapLuIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 3), ScsiIndexValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapLuIndex.setDescription('This object identifies the logical unit for which the value of\n     scsiLuIndex is the same as the value of this object.  The\n     identified logical unit is the one mapped to a LUN by this\n     row.')
scsiLunMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 139, 2, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLunMapRowStatus.setDescription('This object allows an administrator to create and delete this\n     entry.')
scsiNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 0, 0))
scsiTgtDeviceStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 139, 0, 0, 1)).setObjects(*(("SCSI-MIB", "scsiTgtDeviceStatus"),))
if mibBuilder.loadTexts: scsiTgtDeviceStatusChanged.setDescription("This notification will be generated for each occurrence of the\n     abnormal status (e.g., if the SCSI target device's current\n     status is abnormal) providing that the SCSI instance's value of\n     scsiInstScsiNotificationsEnable is enabled.\n     An SNMP agent implementing the SCSI MIB module should not send\n     more than three SCSI identical notifications in any 10-second\n     period.")
scsiLuStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 139, 0, 0, 2)).setObjects(*(("SCSI-MIB", "scsiLuStatus"),))
if mibBuilder.loadTexts: scsiLuStatusChanged.setDescription("This notification will be generated each time that\n     scsiLuStatus changes providing that the SCSI instance's value\n     of scsiInstScsiNotificationsEnable is enabled.\n     An SNMP agent implementing the SCSI MIB module should not send\n     more than three SCSI identical notifications in any 10-second\n     period.")
scsiCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3, 1))
scsiCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 139, 3, 1, 1)).setObjects(*(("SCSI-MIB", "scsiDeviceGroup"),))
if mibBuilder.loadTexts: scsiCompliance.setDescription('Describes the requirements for compliance to this SCSI MIB\n      module.\n     If an implementation can be both a SCSI target device and a SCSI\n     initiator device, all groups are mandatory.')
scsiGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 139, 3, 2))
scsiDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 1)).setObjects(*(("SCSI-MIB", "scsiInstAlias"), ("SCSI-MIB", "scsiInstSoftwareIndex"), ("SCSI-MIB", "scsiInstVendorVersion"), ("SCSI-MIB", "scsiInstScsiNotificationsEnable"), ("SCSI-MIB", "scsiInstStorageType"), ("SCSI-MIB", "scsiDeviceAlias"), ("SCSI-MIB", "scsiDeviceRole"), ("SCSI-MIB", "scsiDevicePortNumber"), ("SCSI-MIB", "scsiPortRole"), ("SCSI-MIB", "scsiPortTransportPtr"), ("SCSI-MIB", "scsiTransportType"), ("SCSI-MIB", "scsiTransportPointer"), ("SCSI-MIB", "scsiTransportDevName"),))
if mibBuilder.loadTexts: scsiDeviceGroup.setDescription('A collection of objects providing information about SCSI\n     instances, devices, and ports.')
scsiInitiatorDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 2)).setObjects(*(("SCSI-MIB", "scsiIntrDevTgtAccessMode"), ("SCSI-MIB", "scsiIntrPortName"), ("SCSI-MIB", "scsiIntrPortIdentifier"), ("SCSI-MIB", "scsiAttTgtPortDscTgtIdx"), ("SCSI-MIB", "scsiAttTgtPortName"), ("SCSI-MIB", "scsiAttTgtPortIdentifier"),))
if mibBuilder.loadTexts: scsiInitiatorDeviceGroup.setDescription('This group is relevant for s SCSI initiator device and port.')
scsiDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 3)).setObjects(*(("SCSI-MIB", "scsiDscTgtDevOrPort"), ("SCSI-MIB", "scsiDscTgtName"), ("SCSI-MIB", "scsiDscTgtConfigured"), ("SCSI-MIB", "scsiDscTgtDiscovered"), ("SCSI-MIB", "scsiDscTgtRowStatus"), ("SCSI-MIB", "scsiDscTgtLastCreation"), ("SCSI-MIB", "scsiDscLunLun"), ("SCSI-MIB", "scsiDscLunIdCodeSet"), ("SCSI-MIB", "scsiDscLunIdAssociation"), ("SCSI-MIB", "scsiDscLunIdType"), ("SCSI-MIB", "scsiDscLunIdValue"),))
if mibBuilder.loadTexts: scsiDiscoveryGroup.setDescription('This group is relevant for the discovered SCSI target devices\n     by a SCSI initiator port.')
scsiTargetDeviceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 4)).setObjects(*(("SCSI-MIB", "scsiTgtDevNumberOfLUs"), ("SCSI-MIB", "scsiTgtDeviceStatus"), ("SCSI-MIB", "scsiTgtDevNonAccessibleLUs"), ("SCSI-MIB", "scsiTgtPortName"), ("SCSI-MIB", "scsiTgtPortIdentifier"), ("SCSI-MIB", "scsiAttIntrPortAuthIntrIdx"), ("SCSI-MIB", "scsiAttIntrPortName"), ("SCSI-MIB", "scsiAttIntrPortIdentifier"), ("SCSI-MIB", "scsiLuDefaultLun"), ("SCSI-MIB", "scsiLuWwnName"), ("SCSI-MIB", "scsiLuVendorId"), ("SCSI-MIB", "scsiLuProductId"), ("SCSI-MIB", "scsiLuRevisionId"), ("SCSI-MIB", "scsiLuPeripheralType"), ("SCSI-MIB", "scsiLuStatus"), ("SCSI-MIB", "scsiLuState"), ("SCSI-MIB", "scsiLuLastCreation"), ("SCSI-MIB", "scsiLuIdCodeSet"), ("SCSI-MIB", "scsiLuIdAssociation"), ("SCSI-MIB", "scsiLuIdType"), ("SCSI-MIB", "scsiLuIdValue"),))
if mibBuilder.loadTexts: scsiTargetDeviceGroup.setDescription('This group is relevant for a SCSI target device and port.')
scsiLunMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 5)).setObjects(*(("SCSI-MIB", "scsiLunMapLuIndex"), ("SCSI-MIB", "scsiLunMapRowStatus"), ("SCSI-MIB", "scsiAuthIntrDevOrPort"), ("SCSI-MIB", "scsiAuthIntrName"), ("SCSI-MIB", "scsiAuthIntrLunMapIndex"), ("SCSI-MIB", "scsiAuthIntrLastCreation"), ("SCSI-MIB", "scsiAuthIntrRowStatus"),))
if mibBuilder.loadTexts: scsiLunMapGroup.setDescription('This group is a collection of attributes regarding the mapping\n     between Logical Unit Number, logical unit, and target device.')
scsiTargetDevStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 6)).setObjects(*(("SCSI-MIB", "scsiTgtDevResets"), ("SCSI-MIB", "scsiTgtPortInCommands"), ("SCSI-MIB", "scsiTgtPortWrittenMegaBytes"), ("SCSI-MIB", "scsiTgtPortReadMegaBytes"), ("SCSI-MIB", "scsiLuInCommands"), ("SCSI-MIB", "scsiLuReadMegaBytes"), ("SCSI-MIB", "scsiLuWrittenMegaBytes"), ("SCSI-MIB", "scsiLuInResets"), ("SCSI-MIB", "scsiLuOutTaskSetFullStatus"),))
if mibBuilder.loadTexts: scsiTargetDevStatsGroup.setDescription('This group is a collection of statistics for all\n     implementations of the SCSI MIB module that contain SCSI target\n     devices.')
scsiTargetDevHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 7)).setObjects(*(("SCSI-MIB", "scsiTgtPortHSInCommands"), ("SCSI-MIB", "scsiLuHSInCommands"),))
if mibBuilder.loadTexts: scsiTargetDevHSStatsGroup.setDescription('This group is a collection of high speed statistics for all\n     implementations of the SCSI MIB module that contain SCSI target\n     devices.')
scsiLunMapStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 8)).setObjects(*(("SCSI-MIB", "scsiAuthIntrAttachedTimes"), ("SCSI-MIB", "scsiAuthIntrOutCommands"), ("SCSI-MIB", "scsiAuthIntrReadMegaBytes"), ("SCSI-MIB", "scsiAuthIntrWrittenMegaBytes"),))
if mibBuilder.loadTexts: scsiLunMapStatsGroup.setDescription('This group is a collection of statistics regarding SCSI\n     initiator devices authorized to attach local logical unit and\n     SCSI target device.')
scsiLunMapHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 9)).setObjects(*(("SCSI-MIB", "scsiAuthIntrHSOutCommands"),))
if mibBuilder.loadTexts: scsiLunMapHSStatsGroup.setDescription('This group is a collection of high speed statistics regarding\n     SCSI initiator devices authorized to attach local logical unit\n     and SCSI target device.')
scsiInitiatorDevStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 10)).setObjects(*(("SCSI-MIB", "scsiIntrDevOutResets"), ("SCSI-MIB", "scsiIntrPortOutCommands"), ("SCSI-MIB", "scsiIntrPortWrittenMegaBytes"), ("SCSI-MIB", "scsiIntrPortReadMegaBytes"),))
if mibBuilder.loadTexts: scsiInitiatorDevStatsGroup.setDescription('This group is a collection of statistics for all\n     implementations of the SCSI MIB module that contain SCSI\n     initiator devices.')
scsiInitiatorDevHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 11)).setObjects(*(("SCSI-MIB", "scsiIntrPortHSOutCommands"),))
if mibBuilder.loadTexts: scsiInitiatorDevHSStatsGroup.setDescription('This group is a collection of high speed statistics for all\n\n\n\n     implementations of the SCSI MIB module that contain SCSI\n     initiator devices.')
scsiDiscoveryStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 12)).setObjects(*(("SCSI-MIB", "scsiDscTgtInCommands"), ("SCSI-MIB", "scsiDscTgtReadMegaBytes"), ("SCSI-MIB", "scsiDscTgtWrittenMegaBytes"),))
if mibBuilder.loadTexts: scsiDiscoveryStatsGroup.setDescription('This group is a collection of statistics for all\n     implementations of the SCSI MIB module that contain discovered\n     SCSI initiator devices.')
scsiDiscoveryHSStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 13)).setObjects(*(("SCSI-MIB", "scsiDscTgtHSInCommands"),))
if mibBuilder.loadTexts: scsiDiscoveryHSStatsGroup.setDescription('This group is a collection of high speed statistics for all\n     implementations of the SCSI MIB module that contain discovered\n     SCSI initiator devices.')
scsiDeviceStatGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 14)).setObjects(*(("SCSI-MIB", "scsiPortBusyStatuses"),))
if mibBuilder.loadTexts: scsiDeviceStatGroup.setDescription('A collection of statistics regarding SCSI devices and\n     ports.')
scsiTgtDevLuNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 139, 3, 2, 15)).setObjects(*(("SCSI-MIB", "scsiTgtDeviceStatusChanged"), ("SCSI-MIB", "scsiLuStatusChanged"),))
if mibBuilder.loadTexts: scsiTgtDevLuNotificationsGroup.setDescription('A collection of notifications regarding status change of SCSI\n     target devices and logical units.')
mibBuilder.exportSymbols("SCSI-MIB", ScsiIdValue=ScsiIdValue, scsiDscLunIdAssociation=scsiDscLunIdAssociation, scsiLunMapHSStatsGroup=scsiLunMapHSStatsGroup, scsiConformance=scsiConformance, scsiRemoteIntrDev=scsiRemoteIntrDev, scsiLuIdTable=scsiLuIdTable, scsiAttTgtPortIndex=scsiAttTgtPortIndex, scsiInstVendorVersion=scsiInstVendorVersion, scsiIntrDevEntry=scsiIntrDevEntry, scsiInitiatorDevStatsGroup=scsiInitiatorDevStatsGroup, scsiAttIntrPortTable=scsiAttIntrPortTable, scsiLuIdCodeSet=scsiLuIdCodeSet, scsiDeviceRole=scsiDeviceRole, scsiDscTgtDiscovered=scsiDscTgtDiscovered, scsiPortRole=scsiPortRole, scsiObjects=scsiObjects, scsiLuVendorId=scsiLuVendorId, scsiNotificationsPrefix=scsiNotificationsPrefix, ScsiIdCodeSet=ScsiIdCodeSet, scsiDscTgtTable=scsiDscTgtTable, scsiInstanceTable=scsiInstanceTable, scsiDscLunEntry=scsiDscLunEntry, scsiInitiatorDevice=scsiInitiatorDevice, scsiDscLunIdIndex=scsiDscLunIdIndex, scsiTgtDevTable=scsiTgtDevTable, scsiDeviceTable=scsiDeviceTable, scsiTransportDevName=scsiTransportDevName, scsiIntrPortWrittenMegaBytes=scsiIntrPortWrittenMegaBytes, scsiAuthIntrLunMapIndex=scsiAuthIntrLunMapIndex, scsiDscTgtIntrPortIndex=scsiDscTgtIntrPortIndex, scsiDscTgtWrittenMegaBytes=scsiDscTgtWrittenMegaBytes, scsiCompliances=scsiCompliances, scsiGroups=scsiGroups, scsiAuthIntrOutCommands=scsiAuthIntrOutCommands, scsiIntrPortHSOutCommands=scsiIntrPortHSOutCommands, scsiDscLunLun=scsiDscLunLun, scsiTransportIndex=scsiTransportIndex, scsiTgtDevNonAccessibleLUs=scsiTgtDevNonAccessibleLUs, scsiDscTgtConfigured=scsiDscTgtConfigured, scsiLuHSInCommands=scsiLuHSInCommands, scsiLunMapStatsGroup=scsiLunMapStatsGroup, ScsiHrSWInstalledIndexOrZero=ScsiHrSWInstalledIndexOrZero, scsiLuInResets=scsiLuInResets, scsiLunMapTable=scsiLunMapTable, scsiInstStorageType=scsiInstStorageType, scsiDeviceEntry=scsiDeviceEntry, scsiLunMapGroup=scsiLunMapGroup, scsiLuWrittenMegaBytes=scsiLuWrittenMegaBytes, scsiTgtDevResets=scsiTgtDevResets, scsiDscTgtInCommands=scsiDscTgtInCommands, scsiInstanceEntry=scsiInstanceEntry, scsiLuIdEntry=scsiLuIdEntry, scsiTgtPortEntry=scsiTgtPortEntry, scsiAuthIntrHSOutCommands=scsiAuthIntrHSOutCommands, scsiDscTgtHSInCommands=scsiDscTgtHSInCommands, scsiPortTable=scsiPortTable, scsiLuProductId=scsiLuProductId, scsiDscTgtDevOrPort=scsiDscTgtDevOrPort, scsiTransportISCSI=scsiTransportISCSI, scsiDscLunIndex=scsiDscLunIndex, scsiAttTgtPortEntry=scsiAttTgtPortEntry, scsiPortIndex=scsiPortIndex, scsiMIB=scsiMIB, scsiLuLastCreation=scsiLuLastCreation, scsiDscLunIdTable=scsiDscLunIdTable, scsiTargetDevStatsGroup=scsiTargetDevStatsGroup, scsiDeviceStatGroup=scsiDeviceStatGroup, scsiLogicalUnit=scsiLogicalUnit, scsiLunMapIndex=scsiLunMapIndex, scsiIntrDevTgtAccessMode=scsiIntrDevTgtAccessMode, scsiTargetDeviceGroup=scsiTargetDeviceGroup, scsiAuthIntrReadMegaBytes=scsiAuthIntrReadMegaBytes, scsiTransportTypes=scsiTransportTypes, scsiDiscoveryHSStatsGroup=scsiDiscoveryHSStatsGroup, scsiDeviceIndex=scsiDeviceIndex, scsiLuTable=scsiLuTable, scsiTransportSRP=scsiTransportSRP, scsiAuthIntrLastCreation=scsiAuthIntrLastCreation, scsiLuStatusChanged=scsiLuStatusChanged, scsiInstSoftwareIndex=scsiInstSoftwareIndex, scsiDscTgtIndex=scsiDscTgtIndex, scsiLuIndex=scsiLuIndex, scsiTgtDeviceStatus=scsiTgtDeviceStatus, scsiAuthIntrName=scsiAuthIntrName, scsiTargetDevHSStatsGroup=scsiTargetDevHSStatsGroup, scsiIntrDevOutResets=scsiIntrDevOutResets, scsiLuIdAssociation=scsiLuIdAssociation, scsiLuState=scsiLuState, ScsiLuNameOrZero=ScsiLuNameOrZero, scsiTgtDeviceStatusChanged=scsiTgtDeviceStatusChanged, scsiTargetDevice=scsiTargetDevice, scsiTgtDevNumberOfLUs=scsiTgtDevNumberOfLUs, scsiLunMapLun=scsiLunMapLun, scsiAttIntrPortName=scsiAttIntrPortName, scsiIntrPortReadMegaBytes=scsiIntrPortReadMegaBytes, scsiDscTgtEntry=scsiDscTgtEntry, scsiDiscoveryGroup=scsiDiscoveryGroup, scsiTgtPortTable=scsiTgtPortTable, ScsiLUN=ScsiLUN, scsiInstAlias=scsiInstAlias, scsiLuIdValue=scsiLuIdValue, scsiAuthIntrWrittenMegaBytes=scsiAuthIntrWrittenMegaBytes, scsiAttTgtPortIdentifier=scsiAttTgtPortIdentifier, scsiTransportEntry=scsiTransportEntry, scsiDiscoveryStatsGroup=scsiDiscoveryStatsGroup, scsiDscTgtLastCreation=scsiDscTgtLastCreation, scsiAdmin=scsiAdmin, ScsiPortIndexValueOrZero=ScsiPortIndexValueOrZero, scsiLuIdType=scsiLuIdType, scsiDscTgtName=scsiDscTgtName, scsiDscLunTable=scsiDscLunTable, scsiTgtPortWrittenMegaBytes=scsiTgtPortWrittenMegaBytes, scsiTgtPortInCommands=scsiTgtPortInCommands, scsiPortTransportPtr=scsiPortTransportPtr, scsiIntrDevTable=scsiIntrDevTable, scsiLuRevisionId=scsiLuRevisionId, scsiTransportSPI=scsiTransportSPI, ScsiDeviceOrPort=ScsiDeviceOrPort, scsiAuthIntrTgtPortIndex=scsiAuthIntrTgtPortIndex, scsiTgtPortReadMegaBytes=scsiTgtPortReadMegaBytes, scsiAuthorizedIntrEntry=scsiAuthorizedIntrEntry, scsiLunMapLuIndex=scsiLunMapLuIndex, scsiTransportFCP=scsiTransportFCP, scsiDscTgtRowStatus=scsiDscTgtRowStatus, scsiAttTgtPortName=scsiAttTgtPortName, scsiTransportPointer=scsiTransportPointer, scsiLuEntry=scsiLuEntry, scsiTransportOther=scsiTransportOther, ScsiName=ScsiName, scsiIntrPortIdentifier=scsiIntrPortIdentifier, scsiGeneral=scsiGeneral, ScsiIdAssociation=ScsiIdAssociation, scsiTransportSAS=scsiTransportSAS, scsiIntrPortEntry=scsiIntrPortEntry, scsiAuthorizedIntrTable=scsiAuthorizedIntrTable, ScsiIndexValueOrZero=ScsiIndexValueOrZero, scsiLuPeripheralType=scsiLuPeripheralType, scsiLunMapEntry=scsiLunMapEntry, ScsiIdentifier=ScsiIdentifier, scsiDscLunIdEntry=scsiDscLunIdEntry, scsiLuReadMegaBytes=scsiLuReadMegaBytes, scsiPortBusyStatuses=scsiPortBusyStatuses, scsiLunMapRowStatus=scsiLunMapRowStatus, ScsiIdType=ScsiIdType, scsiAuthIntrRowStatus=scsiAuthIntrRowStatus, scsiTransportSBP=scsiTransportSBP, scsiInstScsiNotificationsEnable=scsiInstScsiNotificationsEnable, scsiIntrPortName=scsiIntrPortName, scsiTgtDevEntry=scsiTgtDevEntry, scsiTgtPortHSInCommands=scsiTgtPortHSInCommands, scsiDeviceGroup=scsiDeviceGroup, scsiPortEntry=scsiPortEntry, scsiDscLunIdCodeSet=scsiDscLunIdCodeSet, scsiLuInCommands=scsiLuInCommands, scsiDscLunIdValue=scsiDscLunIdValue, scsiDscTgtReadMegaBytes=scsiDscTgtReadMegaBytes, scsiInitiatorDeviceGroup=scsiInitiatorDeviceGroup, scsiAuthIntrDevOrPort=scsiAuthIntrDevOrPort, scsiDevicePortNumber=scsiDevicePortNumber, scsiNotifications=scsiNotifications, scsiAttIntrPortAuthIntrIdx=scsiAttIntrPortAuthIntrIdx, scsiLuWwnName=scsiLuWwnName, PYSNMP_MODULE_ID=scsiMIB, ScsiIndexValue=ScsiIndexValue, scsiTransportTable=scsiTransportTable, scsiIntrPortTable=scsiIntrPortTable, scsiAttIntrPortIdentifier=scsiAttIntrPortIdentifier, scsiDscLunIdType=scsiDscLunIdType, scsiAuthIntrIndex=scsiAuthIntrIndex, scsiLuIdIndex=scsiLuIdIndex, scsiCompliance=scsiCompliance, scsiAttTgtPortDscTgtIdx=scsiAttTgtPortDscTgtIdx, scsiAttIntrPortIndex=scsiAttIntrPortIndex, scsiRemoteTgtDev=scsiRemoteTgtDev, scsiTgtDevLuNotificationsGroup=scsiTgtDevLuNotificationsGroup, scsiTgtPortIdentifier=scsiTgtPortIdentifier, scsiLuDefaultLun=scsiLuDefaultLun, scsiTgtPortName=scsiTgtPortName, scsiAuthIntrAttachedTimes=scsiAuthIntrAttachedTimes, scsiLuOutTaskSetFullStatus=scsiLuOutTaskSetFullStatus, scsiAttIntrPortEntry=scsiAttIntrPortEntry, scsiInstIndex=scsiInstIndex, scsiTransportType=scsiTransportType, scsiLuStatus=scsiLuStatus, scsiInitiatorDevHSStatsGroup=scsiInitiatorDevHSStatsGroup, scsiDeviceAlias=scsiDeviceAlias, scsiAttTgtPortTable=scsiAttTgtPortTable, scsiIntrPortOutCommands=scsiIntrPortOutCommands)
