#
# PySNMP MIB module ALARM-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/ALARM-MIB
# Produced by pysmi-0.0.7 at Sun Feb 14 00:04:40 2016
# On host bldfarm platform Linux version 4.1.13-100.fc21.x86_64 by user goose
# Using Python version 3.5.0 (default, Jan  5 2016, 17:11:52) 
#
( ObjectIdentifier, Integer, OctetString, ) = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
( InetAddressType, InetAddress, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
( ZeroBasedCounter32, ) = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ObjectGroup, NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
( MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, mib_2, Counter32, Opaque, ObjectIdentity, MibIdentifier, iso, zeroDotZero, IpAddress, Integer32, Unsigned32, NotificationType, Gauge32, Bits, ModuleIdentity, Counter64, ) = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "mib-2", "Counter32", "Opaque", "ObjectIdentity", "MibIdentifier", "iso", "zeroDotZero", "IpAddress", "Integer32", "Unsigned32", "NotificationType", "Gauge32", "Bits", "ModuleIdentity", "Counter64")
( DisplayString, RowPointer, TextualConvention, RowStatus, DateAndTime, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "TextualConvention", "RowStatus", "DateAndTime")
alarmMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 118)).setRevisions(("2004-09-09 00:00",))
if mibBuilder.loadTexts: alarmMIB.setLastUpdated('200409090000Z')
if mibBuilder.loadTexts: alarmMIB.setOrganization('IETF Distributed Management Working Group')
if mibBuilder.loadTexts: alarmMIB.setContactInfo('WG EMail: disman@ietf.org\n           Subscribe: disman-request@ietf.org\n           http://www.ietf.org/html.charters/disman-charter.html\n\n\n\n           Chair:     Randy Presuhn\n                      randy_presuhn@mindspring.com\n\n           Editors:   Sharon Chisholm\n                      Nortel Networks\n                      PO Box 3511 Station C\n                      Ottawa, Ont.  K1Y 4H7\n                      Canada\n                      schishol@nortelnetworks.com\n\n                      Dan Romascanu\n                      Avaya\n                      Atidim Technology Park, Bldg. #3\n                      Tel Aviv, 61131\n                      Israel\n                      Tel: +972-3-645-8414\n                      Email: dromasca@avaya.com')
if mibBuilder.loadTexts: alarmMIB.setDescription('The MIB module describes a generic solution\n           to model alarms and to store the current list\n           of active alarms.\n\n           Copyright (C) The Internet Society (2004).  The\n           initial version of this MIB module was published\n           in RFC 3877.  For full legal notices see the RFC\n           itself.  Supplementary information may be available on:\n           http://www.ietf.org/copyrights/ianamib.html')
alarmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 1))
alarmNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 0))
alarmModel = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 1, 1))
alarmActive = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 1, 2))
alarmClear = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 1, 3))
class ResourceId(ObjectIdentifier, TextualConvention):
    pass

class LocalSnmpEngineOrZeroLenStr(OctetString, TextualConvention):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(5,32),)
alarmModelLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 118, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmModelLastChanged.setDescription('The value of sysUpTime at the time of the last\n         creation, deletion or modification of an entry in\n         the alarmModelTable.\n\n         If the number and content of entries has been unchanged\n         since the last re-initialization of the local network\n         management subsystem, then the value of this object\n         MUST be zero.')
alarmModelTable = MibTable((1, 3, 6, 1, 2, 1, 118, 1, 1, 2), )
if mibBuilder.loadTexts: alarmModelTable.setDescription('A table of information about possible alarms on the system,\n        and how they have been modelled.')
alarmModelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1), ).setIndexNames((0, "ALARM-MIB", "alarmListName"), (0, "ALARM-MIB", "alarmModelIndex"), (0, "ALARM-MIB", "alarmModelState"))
if mibBuilder.loadTexts: alarmModelEntry.setDescription('Entries appear in this table for each possible alarm state.\n       This table MUST be persistent across system reboots.')
alarmModelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: alarmModelIndex.setDescription('An integer that acts as an alarm Id\n       to uniquely identify each alarm\n       within the named alarm list. ')
alarmModelState = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: alarmModelState.setDescription('A value of 1 MUST indicate a clear alarm state.\n        The value of this object MUST be less than the\n        alarmModelState of more severe alarm states for\n        this alarm.  The value of this object MUST be more\n        than the alarmModelState of less severe alarm states\n        for this alarm.')
alarmModelNotificationId = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 3), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelNotificationId.setDescription("The NOTIFICATION-TYPE object identifier of this alarm\n       state transition.  If there is no notification associated\n       with this alarm state, the value of this object MUST be\n       '0.0'")
alarmModelVarbindIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelVarbindIndex.setDescription('The index into the varbind listing of the notification\n     indicated by alarmModelNotificationId which helps\n     signal that the given alarm has changed state.\n     If there is no applicable varbind, the value of this\n     object MUST be zero.\n\n     Note that the value of alarmModelVarbindIndex acknowledges\n     the existence of the first two obligatory varbinds in\n     the InformRequest-PDU and SNMPv2-Trap-PDU (sysUpTime.0\n     and snmpTrapOID.0).  That is, a value of 2 refers to\n     the snmpTrapOID.0.\n\n     If the incoming notification is instead an SNMPv1 Trap-PDU,\n     then an appropriate value for sysUpTime.0 or snmpTrapOID.0\n     shall be determined by using the rules in section 3.1 of\n     [RFC3584]')
alarmModelVarbindValue = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelVarbindValue.setDescription('The value that the varbind indicated by\n     alarmModelVarbindIndex takes to indicate\n     that the alarm has entered this state.\n\n     If alarmModelVarbindIndex has a value of 0, so\n     MUST alarmModelVarbindValue.\n     ')
alarmModelDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelDescription.setDescription('A brief description of this alarm and state suitable\n      to display to operators.')
alarmModelSpecificPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 7), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelSpecificPointer.setDescription("If no additional, model-specific Alarm MIB is supported by\n      the system the value of this object is `0.0'and attempts\n      to set it to any other value MUST be rejected appropriately.\n\n      When a model-specific Alarm MIB is supported, this object\n      MUST refer to the first accessible object in a corresponding\n      row of the model definition in one of these model-specific\n      MIB and attempts to set this object to { 0 0 } or any other\n      value MUST be rejected appropriately.")
alarmModelVarbindSubtree = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 8), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelVarbindSubtree.setDescription("The name portion of each VarBind in the notification,\n        in order, is compared to the value of this object.\n        If the name is equal to or a subtree of the value\n        of this object, for purposes of computing the value\n\n\n\n        of AlarmActiveResourceID the 'prefix' will be the\n        matching portion, and the 'indexes' will be any\n        remainder.  The examination of varbinds ends with\n        the first match.  If the value of this object is 0.0,\n        then the first varbind, or in the case of v2, the\n        first varbind after the timestamp and the trap\n        OID, will always be matched.\n       ")
alarmModelResourcePrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 9), ObjectIdentifier().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelResourcePrefix.setDescription("The value of AlarmActiveResourceId is computed\n        by appending any indexes extracted in accordance\n        with the description of alarmModelVarbindSubtree\n        onto the value of this object.  If this object's\n        value is 0.0, then the 'prefix' extracted is used\n        instead.\n       ")
alarmModelRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmModelRowStatus.setDescription("Control for creating and deleting entries.  Entries may be\n    modified while active.  Alarms whose alarmModelRowStatus is\n    not active will not appear in either the alarmActiveTable\n    or the alarmClearTable.  Setting this object to notInService\n    cannot be used as an alarm suppression mechanism.  Entries\n    that are notInService will disappear as described in RFC2579.\n\n    This row can not be modified while it is being\n    referenced by a value of alarmActiveModelPointer.  In these\n    cases, an error of `inconsistentValue' will be returned to\n    the manager.\n\n    This entry may be deleted while it is being\n    referenced by a value of alarmActiveModelPointer.  This results\n    in the deletion of this entry and entries in the active alarms\n    referencing this entry via an alarmActiveModelPointer.\n\n\n\n\n    As all read-create objects in this table have a DEFVAL clause,\n    there is no requirement that any object be explicitly set\n    before this row can become active.  Note that a row consisting\n    only of default values is not very meaningful.")
alarmActiveLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 118, 1, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveLastChanged.setDescription('The value of sysUpTime at the time of the last\n       creation or deletion of an entry in the alarmActiveTable.\n       If the number of entries has been unchanged since the\n       last re-initialization of the local network management\n       subsystem, then this object contains a zero value.')
alarmActiveOverflow = MibScalar((1, 3, 6, 1, 2, 1, 118, 1, 2, 5), Counter32()).setUnits('active alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveOverflow.setDescription('The number of active alarms that have not been put into\n         the alarmActiveTable since system restart as a result\n         of extreme resource constraints.')
alarmActiveTable = MibTable((1, 3, 6, 1, 2, 1, 118, 1, 2, 2), )
if mibBuilder.loadTexts: alarmActiveTable.setDescription('A table of Active Alarms entries.')
alarmActiveEntry = MibTableRow((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1), ).setIndexNames((0, "ALARM-MIB", "alarmListName"), (0, "ALARM-MIB", "alarmActiveDateAndTime"), (0, "ALARM-MIB", "alarmActiveIndex"))
if mibBuilder.loadTexts: alarmActiveEntry.setDescription('Entries appear in this table when alarms are raised.  They\n        are removed when the alarm is cleared.\n\n        If under extreme resource constraint the system is unable to\n\n\n\n        add any more entries into this table, then the\n        alarmActiveOverflow statistic will be increased by one.')
alarmListName = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,32)))
if mibBuilder.loadTexts: alarmListName.setDescription('The name of the list of alarms.  This SHOULD be the same as\n    nlmLogName if the Notification Log MIB [RFC3014] is supported.\n    This SHOULD be the same as, or contain as a prefix, the\n    applicable snmpNotifyFilterProfileName if the\n    SNMP-NOTIFICATION-MIB DEFINITIONS [RFC3413] is supported.\n\n    An implementation may allow multiple named alarm lists, up to\n    some implementation-specific limit (which may be none).  A\n    zero-length list name is reserved for creation and deletion\n    by the managed system, and MUST be used as the default log\n    name by systems that do not support named alarm lists.')
alarmActiveDateAndTime = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 2), DateAndTime())
if mibBuilder.loadTexts: alarmActiveDateAndTime.setDescription('The local date and time when the error occurred.\n\n       This object facilitates retrieving all instances of\n\n\n\n       alarms that have been raised or have changed state\n       since a given point in time.\n\n       Implementations MUST include the offset from UTC,\n       if available.  Implementation in environments in which\n       the UTC offset is not available is NOT RECOMMENDED.')
alarmActiveIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: alarmActiveIndex.setDescription('A strictly monotonically increasing integer which\n       acts as the index of entries within the named alarm\n       list.  It wraps back to 1 after it reaches its\n       maximum value.')
alarmActiveEngineID = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 4), LocalSnmpEngineOrZeroLenStr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveEngineID.setDescription('The identification of the SNMP engine at which the alarm\n        originated.  If the alarm is from an SNMPv1 system this\n        object is a zero length string.')
alarmActiveEngineAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveEngineAddressType.setDescription('This object indicates what type of address is stored in\n    the alarmActiveEngineAddress object - IPv4, IPv6, DNS, etc.')
alarmActiveEngineAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveEngineAddress.setDescription('The address of the SNMP engine on which the alarm is\n    occurring.\n\n    This object MUST always be instantiated, even if the list\n    can contain alarms from only one engine.')
alarmActiveContextName = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveContextName.setDescription("The name of the SNMP MIB context from which the alarm came.\n        For SNMPv1 alarms this is the community string from the Trap.\n        Note that care MUST be taken when selecting community\n        strings to ensure that these can be represented as a\n        well-formed SnmpAdminString.  Community or Context names\n        that are not well-formed SnmpAdminStrings will be mapped\n        to zero length strings.\n\n        If the alarm's source SNMP engine is known not to support\n        multiple contexts, this object is a zero length string.")
alarmActiveVariables = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariables.setDescription('The number of variables in alarmActiveVariableTable for this\n       alarm.')
alarmActiveNotificationID = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveNotificationID.setDescription('The NOTIFICATION-TYPE object identifier of the alarm\n       state transition that is occurring.')
alarmActiveResourceId = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 10), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveResourceId.setDescription('This object identifies the resource under alarm.\n\n      If there is no corresponding resource, then\n      the value of this object MUST be 0.0.')
alarmActiveDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveDescription.setDescription('This object provides a textual description of the\n      active alarm.  This text is generated dynamically by the\n      notification generator to provide useful information\n      to the human operator.  This information SHOULD\n      provide information allowing the operator to locate\n      the resource for which this alarm is being generated.\n      This information is not intended for consumption by\n      automated tools.')
alarmActiveLogPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 12), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveLogPointer.setDescription('A pointer to the corresponding row in a\n       notification logging MIB where the state change\n       notification for this active alarm is logged.\n       If no log entry applies to this active alarm,\n       then this object MUST have the value of 0.0')
alarmActiveModelPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 13), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveModelPointer.setDescription('A pointer to the corresponding row in the\n       alarmModelTable for this active alarm.  This\n       points not only to the alarm model being\n       instantiated, but also to the specific alarm\n       state that is active.')
alarmActiveSpecificPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 2, 1, 14), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveSpecificPointer.setDescription("If no additional, model-specific, Alarm MIB is supported by\n     the system this object is `0.0'.  When a model-specific Alarm\n     MIB is supported, this object is the instance pointer to the\n     specific model-specific active alarm list.")
alarmActiveVariableTable = MibTable((1, 3, 6, 1, 2, 1, 118, 1, 2, 3), )
if mibBuilder.loadTexts: alarmActiveVariableTable.setDescription('A table of variables to go with active alarm entries.')
alarmActiveVariableEntry = MibTableRow((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1), ).setIndexNames((0, "ALARM-MIB", "alarmListName"), (0, "ALARM-MIB", "alarmActiveIndex"), (0, "ALARM-MIB", "alarmActiveVariableIndex"))
if mibBuilder.loadTexts: alarmActiveVariableEntry.setDescription('Entries appear in this table when there are variables in\n       the varbind list of a corresponding alarm in\n       alarmActiveTable.\n\n       Entries appear in this table as though\n       the trap/notification had been transported using a\n       SNMPv2-Trap-PDU, as defined in [RFC3416] - i.e., the\n       alarmActiveVariableIndex 1 will always be sysUpTime\n       and alarmActiveVariableIndex 2 will always be\n       snmpTrapOID.\n\n       If the incoming notification is instead an SNMPv1 Trap-PDU and\n       the value of alarmModelVarbindIndex is 1 or 2, an appropriate\n       value for sysUpTime.0 or snmpTrapOID.0 shall be determined\n       by using the rules in section 3.1 of [RFC3584].')
alarmActiveVariableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: alarmActiveVariableIndex.setDescription('A strictly monotonically increasing integer, starting at\n       1 for a given alarmActiveIndex, for indexing variables\n       within the active alarm variable list. ')
alarmActiveVariableID = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableID.setDescription("The alarm variable's object identifier.")
alarmActiveVariableValueType = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,))).clone(namedValues=NamedValues(("counter32", 1), ("unsigned32", 2), ("timeTicks", 3), ("integer32", 4), ("ipAddress", 5), ("octetString", 6), ("objectId", 7), ("counter64", 8), ("opaque", 9),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableValueType.setDescription('The type of the value.  One and only one of the value\n       objects that follow is used for a given row in this table,\n       based on this type.')
alarmActiveVariableCounter32Val = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableCounter32Val.setDescription("The value when alarmActiveVariableType is 'counter32'.")
alarmActiveVariableUnsigned32Val = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableUnsigned32Val.setDescription("The value when alarmActiveVariableType is 'unsigned32'.")
alarmActiveVariableTimeTicksVal = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableTimeTicksVal.setDescription("The value when alarmActiveVariableType is 'timeTicks'.")
alarmActiveVariableInteger32Val = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableInteger32Val.setDescription("The value when alarmActiveVariableType is 'integer32'.")
alarmActiveVariableOctetStringVal = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableOctetStringVal.setDescription("The value when alarmActiveVariableType is 'octetString'.")
alarmActiveVariableIpAddressVal = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableIpAddressVal.setDescription("The value when alarmActiveVariableType is 'ipAddress'.")
alarmActiveVariableOidVal = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableOidVal.setDescription("The value when alarmActiveVariableType is 'objectId'.")
alarmActiveVariableCounter64Val = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableCounter64Val.setDescription("The value when alarmActiveVariableType is 'counter64'.")
alarmActiveVariableOpaqueVal = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 3, 1, 12), Opaque().subtype(subtypeSpec=ValueSizeConstraint(0,65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveVariableOpaqueVal.setDescription("The value when alarmActiveVariableType is 'opaque'.\n\n       Note that although RFC2578 [RFC2578] forbids the use\n       of Opaque in 'standard' MIB modules, this particular\n       usage is driven by the need to be able to accurately\n       represent any well-formed notification, and justified\n       by the need for backward compatibility.")
alarmActiveStatsTable = MibTable((1, 3, 6, 1, 2, 1, 118, 1, 2, 4), )
if mibBuilder.loadTexts: alarmActiveStatsTable.setDescription('This table represents the alarm statistics\n         information.')
alarmActiveStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 118, 1, 2, 4, 1), ).setIndexNames((0, "ALARM-MIB", "alarmListName"))
if mibBuilder.loadTexts: alarmActiveStatsEntry.setDescription('Statistics on the current active alarms.')
alarmActiveStatsActiveCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveStatsActiveCurrent.setDescription('The total number of currently active alarms on the system.')
alarmActiveStatsActives = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 4, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveStatsActives.setDescription('The total number of active alarms since system restarted.')
alarmActiveStatsLastRaise = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveStatsLastRaise.setDescription('The value of sysUpTime at the time of the last\n       alarm raise for this alarm list.\n       If no alarm raises have occurred since the\n       last re-initialization of the local network management\n       subsystem, then this object contains a zero value.')
alarmActiveStatsLastClear = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 2, 4, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmActiveStatsLastClear.setDescription('The value of sysUpTime at the time of the last\n       alarm clear for this alarm list.\n       If no alarm clears have occurred since the\n       last re-initialization of the local network management\n       subsystem, then this object contains a zero value.')
alarmClearMaximum = MibScalar((1, 3, 6, 1, 2, 1, 118, 1, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmClearMaximum.setDescription('This object specifies the maximum number of cleared\n   alarms to store in the alarmClearTable.  When this\n   number is reached, the cleared alarms with the\n   earliest clear time will be removed from the table.')
alarmClearTable = MibTable((1, 3, 6, 1, 2, 1, 118, 1, 3, 2), )
if mibBuilder.loadTexts: alarmClearTable.setDescription('This table contains information on\n         cleared alarms.')
alarmClearEntry = MibTableRow((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1), ).setIndexNames((0, "ALARM-MIB", "alarmListName"), (0, "ALARM-MIB", "alarmClearDateAndTime"), (0, "ALARM-MIB", "alarmClearIndex"))
if mibBuilder.loadTexts: alarmClearEntry.setDescription('Information on a cleared alarm.')
alarmClearIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,4294967295)))
if mibBuilder.loadTexts: alarmClearIndex.setDescription('An integer which acts as the index of entries within\n\n\n\n       the named alarm list.  It wraps back to 1 after it\n       reaches its maximum value.\n\n       This object has the same value as the alarmActiveIndex that\n       this alarm instance had when it was active.')
alarmClearDateAndTime = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 2), DateAndTime())
if mibBuilder.loadTexts: alarmClearDateAndTime.setDescription('The local date and time when the alarm cleared.\n\n       This object facilitates retrieving all instances of\n       alarms that have been cleared since a given point in time.\n\n       Implementations MUST include the offset from UTC,\n       if available.  Implementation in environments in which\n       the UTC offset is not available is NOT RECOMMENDED.')
alarmClearEngineID = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 3), LocalSnmpEngineOrZeroLenStr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearEngineID.setDescription('The identification of the SNMP engine at which the alarm\n        originated.  If the alarm is from an SNMPv1 system this\n        object is a zero length string.')
alarmClearEngineAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearEngineAddressType.setDescription('This object indicates what type of address is stored in\n    the alarmActiveEngineAddress object - IPv4, IPv6, DNS, etc.')
alarmClearEngineAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearEngineAddress.setDescription('The Address of the SNMP engine on which the alarm was\n    occurring.  This is used to identify the source of an SNMPv1\n\n\n\n    trap, since an alarmActiveEngineId cannot be extracted from the\n    SNMPv1 trap PDU.\n\n    This object MUST always be instantiated, even if the list\n    can contain alarms from only one engine.')
alarmClearContextName = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearContextName.setDescription("The name of the SNMP MIB context from which the alarm came.\n       For SNMPv1 traps this is the community string from the Trap.\n       Note that care needs to be taken when selecting community\n       strings to ensure that these can be represented as a\n       well-formed SnmpAdminString.  Community or Context names\n       that are not well-formed SnmpAdminStrings will be mapped\n       to zero length strings.\n\n       If the alarm's source SNMP engine is known not to support\n       multiple contexts, this object is a zero length string.")
alarmClearNotificationID = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearNotificationID.setDescription('The NOTIFICATION-TYPE object identifier of the alarm\n       clear.')
alarmClearResourceId = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 8), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearResourceId.setDescription('This object identifies the resource that was under alarm.\n\n      If there is no corresponding resource, then\n      the value of this object MUST be 0.0.')
alarmClearLogIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearLogIndex.setDescription('This number MUST be the same as the log index of the\n       applicable row in the notification log MIB, if it exists.\n       If no log index applies to the trap, then this object\n       MUST have the value of 0.')
alarmClearModelPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 118, 1, 3, 2, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClearModelPointer.setDescription('A pointer to the corresponding row in the\n       alarmModelTable for this cleared alarm.')
alarmActiveState = NotificationType((1, 3, 6, 1, 2, 1, 118, 0, 2)).setObjects(*(("ALARM-MIB", "alarmActiveModelPointer"), ("ALARM-MIB", "alarmActiveResourceId"),))
if mibBuilder.loadTexts: alarmActiveState.setDescription('An instance of the alarm indicated by\n    alarmActiveModelPointer has been raised\n    against the entity indicated by\n    alarmActiveResourceId.\n\n    The agent must throttle the generation of\n    consecutive alarmActiveState traps so that there is at\n    least a two-second gap between traps of this\n    type against the same alarmActiveModelPointer and\n    alarmActiveResourceId.  When traps are throttled,\n    they are dropped, not queued for sending at a future time.\n\n    A management application should periodically check\n    the value of alarmActiveLastChanged to detect any\n    missed alarmActiveState notification-events, e.g.,\n    due to throttling or transmission loss.')
alarmClearState = NotificationType((1, 3, 6, 1, 2, 1, 118, 0, 3)).setObjects(*(("ALARM-MIB", "alarmActiveModelPointer"), ("ALARM-MIB", "alarmActiveResourceId"),))
if mibBuilder.loadTexts: alarmClearState.setDescription('An instance of the alarm indicated by\n     alarmActiveModelPointer has been cleared against\n\n\n\n     the entity indicated by alarmActiveResourceId.\n\n    The agent must throttle the generation of\n    consecutive alarmActiveClear traps so that there is at\n    least a two-second gap between traps of this\n    type against the same alarmActiveModelPointer and\n    alarmActiveResourceId.  When traps are throttled,\n    they are dropped, not queued for sending at a future time.\n\n    A management application should periodically check\n    the value of alarmActiveLastChanged to detect any\n    missed alarmClearState notification-events, e.g.,\n    due to throttling or transmission loss.')
alarmConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 2))
alarmCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 2, 1))
alarmCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 118, 2, 1, 1)).setObjects(*(("ALARM-MIB", "alarmActiveGroup"), ("ALARM-MIB", "alarmModelGroup"), ("ALARM-MIB", "alarmActiveStatsGroup"), ("ALARM-MIB", "alarmClearGroup"), ("ALARM-MIB", "alarmNotificationsGroup"),))
if mibBuilder.loadTexts: alarmCompliance.setDescription('The compliance statement for systems supporting\n          the Alarm MIB.')
alarmGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 118, 2, 2))
alarmModelGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 118, 2, 2, 1)).setObjects(*(("ALARM-MIB", "alarmModelLastChanged"), ("ALARM-MIB", "alarmModelNotificationId"), ("ALARM-MIB", "alarmModelVarbindIndex"), ("ALARM-MIB", "alarmModelVarbindValue"), ("ALARM-MIB", "alarmModelDescription"), ("ALARM-MIB", "alarmModelSpecificPointer"), ("ALARM-MIB", "alarmModelVarbindSubtree"), ("ALARM-MIB", "alarmModelResourcePrefix"), ("ALARM-MIB", "alarmModelRowStatus"),))
if mibBuilder.loadTexts: alarmModelGroup.setDescription('Alarm model group.')
alarmActiveGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 118, 2, 2, 2)).setObjects(*(("ALARM-MIB", "alarmActiveLastChanged"), ("ALARM-MIB", "alarmActiveOverflow"), ("ALARM-MIB", "alarmActiveEngineID"), ("ALARM-MIB", "alarmActiveEngineAddressType"), ("ALARM-MIB", "alarmActiveEngineAddress"), ("ALARM-MIB", "alarmActiveContextName"), ("ALARM-MIB", "alarmActiveVariables"), ("ALARM-MIB", "alarmActiveNotificationID"), ("ALARM-MIB", "alarmActiveResourceId"), ("ALARM-MIB", "alarmActiveDescription"), ("ALARM-MIB", "alarmActiveLogPointer"), ("ALARM-MIB", "alarmActiveModelPointer"), ("ALARM-MIB", "alarmActiveSpecificPointer"), ("ALARM-MIB", "alarmActiveVariableID"), ("ALARM-MIB", "alarmActiveVariableValueType"), ("ALARM-MIB", "alarmActiveVariableCounter32Val"), ("ALARM-MIB", "alarmActiveVariableUnsigned32Val"), ("ALARM-MIB", "alarmActiveVariableTimeTicksVal"), ("ALARM-MIB", "alarmActiveVariableInteger32Val"), ("ALARM-MIB", "alarmActiveVariableOctetStringVal"), ("ALARM-MIB", "alarmActiveVariableIpAddressVal"), ("ALARM-MIB", "alarmActiveVariableOidVal"), ("ALARM-MIB", "alarmActiveVariableCounter64Val"), ("ALARM-MIB", "alarmActiveVariableOpaqueVal"),))
if mibBuilder.loadTexts: alarmActiveGroup.setDescription('Active Alarm list group.')
alarmActiveStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 118, 2, 2, 3)).setObjects(*(("ALARM-MIB", "alarmActiveStatsActives"), ("ALARM-MIB", "alarmActiveStatsActiveCurrent"), ("ALARM-MIB", "alarmActiveStatsLastRaise"), ("ALARM-MIB", "alarmActiveStatsLastClear"),))
if mibBuilder.loadTexts: alarmActiveStatsGroup.setDescription('Active alarm summary group.')
alarmClearGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 118, 2, 2, 4)).setObjects(*(("ALARM-MIB", "alarmClearMaximum"), ("ALARM-MIB", "alarmClearEngineID"), ("ALARM-MIB", "alarmClearEngineAddressType"), ("ALARM-MIB", "alarmClearEngineAddress"), ("ALARM-MIB", "alarmClearContextName"), ("ALARM-MIB", "alarmClearNotificationID"), ("ALARM-MIB", "alarmClearResourceId"), ("ALARM-MIB", "alarmClearLogIndex"), ("ALARM-MIB", "alarmClearModelPointer"),))
if mibBuilder.loadTexts: alarmClearGroup.setDescription('Cleared alarm group.')
alarmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 118, 2, 2, 6)).setObjects(*(("ALARM-MIB", "alarmActiveState"), ("ALARM-MIB", "alarmClearState"),))
if mibBuilder.loadTexts: alarmNotificationsGroup.setDescription('The collection of notifications that can be used to\n           model alarms for faults lacking pre-existing\n           notification definitions.')
mibBuilder.exportSymbols("ALARM-MIB", alarmClearEngineAddress=alarmClearEngineAddress, alarmActiveStatsLastRaise=alarmActiveStatsLastRaise, alarmListName=alarmListName, alarmActiveEngineAddress=alarmActiveEngineAddress, alarmActiveVariableOidVal=alarmActiveVariableOidVal, alarmActiveContextName=alarmActiveContextName, alarmNotifications=alarmNotifications, alarmActiveStatsActiveCurrent=alarmActiveStatsActiveCurrent, alarmActiveStatsActives=alarmActiveStatsActives, alarmActiveVariableTable=alarmActiveVariableTable, alarmModelVarbindValue=alarmModelVarbindValue, alarmCompliances=alarmCompliances, alarmClearGroup=alarmClearGroup, alarmModelVarbindIndex=alarmModelVarbindIndex, alarmModel=alarmModel, alarmModelNotificationId=alarmModelNotificationId, alarmMIB=alarmMIB, alarmActiveSpecificPointer=alarmActiveSpecificPointer, alarmActiveNotificationID=alarmActiveNotificationID, alarmClearEngineID=alarmClearEngineID, alarmClearLogIndex=alarmClearLogIndex, alarmActiveVariableUnsigned32Val=alarmActiveVariableUnsigned32Val, alarmClearModelPointer=alarmClearModelPointer, alarmClearMaximum=alarmClearMaximum, alarmModelGroup=alarmModelGroup, alarmClearTable=alarmClearTable, alarmClearResourceId=alarmClearResourceId, alarmActiveGroup=alarmActiveGroup, alarmActiveVariableCounter64Val=alarmActiveVariableCounter64Val, alarmActiveEngineAddressType=alarmActiveEngineAddressType, alarmActiveDateAndTime=alarmActiveDateAndTime, alarmActiveStatsEntry=alarmActiveStatsEntry, alarmClearEntry=alarmClearEntry, alarmModelLastChanged=alarmModelLastChanged, alarmActiveVariableIpAddressVal=alarmActiveVariableIpAddressVal, alarmActiveTable=alarmActiveTable, alarmClearDateAndTime=alarmClearDateAndTime, alarmModelResourcePrefix=alarmModelResourcePrefix, LocalSnmpEngineOrZeroLenStr=LocalSnmpEngineOrZeroLenStr, alarmConformance=alarmConformance, alarmActiveStatsGroup=alarmActiveStatsGroup, alarmActiveVariableOctetStringVal=alarmActiveVariableOctetStringVal, alarmActiveState=alarmActiveState, alarmClearContextName=alarmClearContextName, alarmActiveVariableOpaqueVal=alarmActiveVariableOpaqueVal, alarmClearState=alarmClearState, alarmCompliance=alarmCompliance, alarmModelRowStatus=alarmModelRowStatus, alarmModelState=alarmModelState, alarmClearEngineAddressType=alarmClearEngineAddressType, alarmActiveResourceId=alarmActiveResourceId, alarmActiveVariableEntry=alarmActiveVariableEntry, alarmModelVarbindSubtree=alarmModelVarbindSubtree, alarmActiveLogPointer=alarmActiveLogPointer, alarmActiveVariables=alarmActiveVariables, alarmActiveEntry=alarmActiveEntry, alarmActiveVariableInteger32Val=alarmActiveVariableInteger32Val, alarmClearNotificationID=alarmClearNotificationID, alarmModelEntry=alarmModelEntry, alarmActiveVariableValueType=alarmActiveVariableValueType, alarmModelDescription=alarmModelDescription, alarmModelTable=alarmModelTable, alarmObjects=alarmObjects, alarmModelSpecificPointer=alarmModelSpecificPointer, alarmModelIndex=alarmModelIndex, alarmActiveIndex=alarmActiveIndex, alarmActiveDescription=alarmActiveDescription, alarmActiveVariableIndex=alarmActiveVariableIndex, PYSNMP_MODULE_ID=alarmMIB, alarmActiveVariableTimeTicksVal=alarmActiveVariableTimeTicksVal, alarmActiveVariableID=alarmActiveVariableID, alarmActiveEngineID=alarmActiveEngineID, alarmActiveOverflow=alarmActiveOverflow, alarmActiveStatsTable=alarmActiveStatsTable, alarmActiveStatsLastClear=alarmActiveStatsLastClear, alarmGroups=alarmGroups, alarmActive=alarmActive, alarmActiveModelPointer=alarmActiveModelPointer, alarmClear=alarmClear, ResourceId=ResourceId, alarmNotificationsGroup=alarmNotificationsGroup, alarmClearIndex=alarmClearIndex, alarmActiveVariableCounter32Val=alarmActiveVariableCounter32Val, alarmActiveLastChanged=alarmActiveLastChanged)
