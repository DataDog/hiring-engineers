# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.ls
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../src/vm_files", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #   apt-get update
  #   apt-get install -y apache2
  config.vm.hostname = "service-db-a-1"

  config.vm.provision "shell", inline: <<-SHELL

  echo "Provisioning the database..."

  apt-get install -y postgresql postgresql-contrib

  su postgres -c "psql -c \\"CREATE ROLE vagrant SUPERUSER LOGIN PASSWORD 'vagrant'\\" "

  su postgres -c "createdb -E UTF8 -T template0 --locale=en_US.utf8 -O vagrant sampledb"

  echo "Installing the datadog agent..."
  DD_API_KEY=6caaef27352ea09f824410ddeea49c52 DD_HOST_TAGS=env:qa,role:service_db_a DEBIAN_FRONTEND=noninteractive bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"

  echo "Enabling the datadog agent postgres integration..."
  su postgres -c "psql -c \\"CREATE USER datadog WITH PASSWORD 'Penhorse131'\\" "
  su postgres -c "psql -c \\"GRANT SELECT ON pg_stat_database TO datadog\\" "

  cp /vagrant_data/datadog_agent_postgres_conf.yaml /etc/datadog-agent/conf.d/postgres.d/conf.yaml

  cp /vagrant_data/mymetric.yaml /etc/datadog-agent/conf.d/mymetric.yaml
  cp /vagrant_data/mymetric.py /etc/datadog-agent/checks.d/mymetric.py

  apt-get install -y python-pip

  pip install Flask ddtrace blinker

  mkdir /usr/local/flaskapp

  cp /vagrant_data/flask_app.py /usr/local/flaskapp/flask_app.py

  echo "Register a flask app service.Create a user in order to do that.."

  useradd --system -s /bin/false flaskapp

  cp /vagrant_data/flaskapp.service /etc/systemd/system/flaskapp.service

  systemctl enable flaskapp.service

  service datadog-agent restart

  service flaskapp start

  SHELL
end
